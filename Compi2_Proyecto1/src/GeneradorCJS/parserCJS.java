
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 18 15:11:55 CST 2018
//----------------------------------------------------

package GeneradorCJS;

import java_cup.runtime.Symbol;
import AST.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 18 15:11:55 CST 2018
  */
public class parserCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCJS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\007\000\002\005\004\000" +
    "\002\011\005\000\002\011\010\000\002\021\005\000\002" +
    "\021\003\000\002\016\005\000\002\016\003\000\002\010" +
    "\012\000\002\010\012\000\002\010\010\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\007\000" +
    "\002\010\005\000\002\010\006\000\002\031\006\000\002" +
    "\032\015\000\002\032\006\000\002\006\012\000\002\006" +
    "\011\000\002\012\004\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\003\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\004\000\002\013\004\000\002\007\011\000\002\007\015" +
    "\000\002\014\011\000\002\023\004\000\002\023\003\000" +
    "\002\024\006\000\002\024\005\000\002\020\006\000\002" +
    "\026\005\000\002\027\011\000\002\015\017\000\002\030" +
    "\003\000\002\030\003\000\002\033\005\000\002\017\006" +
    "\000\002\022\005\000\002\022\005\000\002\022\004\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\006" +
    "\000\002\022\005\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\034\003\024\004\015\042\031\043\014\044" +
    "\023\046\011\047\032\050\021\051\030\052\034\055\016" +
    "\061\035\062\036\001\002\000\004\037\321\001\002\000" +
    "\044\002\uffda\003\uffda\004\uffda\034\uffda\042\uffda\043\uffda" +
    "\044\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\061\uffda\062\uffda\001\002\000\004" +
    "\037\320\001\002\000\044\002\uffd9\003\uffd9\004\uffd9\034" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\061\uffd9\062" +
    "\uffd9\001\002\000\004\037\317\001\002\000\004\032\314" +
    "\001\002\000\044\002\uffe1\003\uffe1\004\uffe1\034\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\061\uffe1\062\uffe1\001" +
    "\002\000\044\002\uffe2\003\uffe2\004\uffe2\034\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\061\uffe2\062\uffe2\001\002" +
    "\000\004\032\276\001\002\000\012\032\136\035\273\036" +
    "\134\041\226\001\002\000\004\036\263\001\002\000\004" +
    "\002\262\001\002\000\036\002\000\003\024\004\015\042" +
    "\031\043\014\044\023\046\011\047\032\050\021\051\030" +
    "\052\034\055\016\061\035\062\036\001\002\000\032\004" +
    "\074\005\070\006\061\007\063\010\071\011\072\012\066" +
    "\014\064\031\076\032\065\035\062\055\016\001\002\000" +
    "\004\037\256\001\002\000\004\032\244\001\002\000\004" +
    "\037\243\001\002\000\036\002\ufffd\003\ufffd\004\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\055\ufffd\061\ufffd\062\ufffd\001\002\000\036\002" +
    "\ufffe\003\ufffe\004\ufffe\042\ufffe\043\ufffe\044\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\055\ufffe\061\ufffe\062" +
    "\ufffe\001\002\000\044\002\uffdd\003\uffdd\004\uffdd\034\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\061\uffdd\062\uffdd" +
    "\001\002\000\004\037\242\001\002\000\004\032\234\001" +
    "\002\000\004\004\222\001\002\000\004\037\221\001\002" +
    "\000\004\032\202\001\002\000\004\032\060\001\002\000" +
    "\004\004\040\001\002\000\036\002\ufffc\003\ufffc\004\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\055\ufffc\061\ufffc\062\ufffc\001\002\000\004" +
    "\032\041\001\002\000\006\004\042\033\044\001\002\000" +
    "\006\033\ufff3\040\ufff3\001\002\000\006\033\053\040\052" +
    "\001\002\000\004\035\045\001\002\000\032\003\024\004" +
    "\015\042\031\043\014\044\023\046\011\047\032\050\021" +
    "\051\030\052\034\055\016\061\035\001\002\000\040\003" +
    "\uffe3\004\uffe3\034\uffe3\042\uffe3\043\uffe3\044\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\061\uffe3\001\002\000\034\003\024\004\015\034\050" +
    "\042\031\043\014\044\023\046\011\047\032\050\021\051" +
    "\030\052\034\055\016\061\035\001\002\000\036\002\uffe5" +
    "\003\uffe5\004\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\055\uffe5\061\uffe5\062\uffe5" +
    "\001\002\000\040\003\uffe4\004\uffe4\034\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\061\uffe4\001\002\000\004\004" +
    "\057\001\002\000\004\035\054\001\002\000\032\003\024" +
    "\004\015\042\031\043\014\044\023\046\011\047\032\050" +
    "\021\051\030\052\034\055\016\061\035\001\002\000\034" +
    "\003\024\004\015\034\056\042\031\043\014\044\023\046" +
    "\011\047\032\050\021\051\030\052\034\055\016\061\035" +
    "\001\002\000\036\002\uffe6\003\uffe6\004\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\061\uffe6\062\uffe6\001\002\000\010\033\ufff4\037" +
    "\ufff4\040\ufff4\001\002\000\032\004\074\005\070\006\061" +
    "\007\063\010\071\011\072\012\066\014\064\031\076\032" +
    "\065\035\062\055\016\001\002\000\050\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\033\uffb5" +
    "\034\uffb5\037\uffb5\040\uffb5\041\uffb5\001\002\000\032\004" +
    "\074\005\070\006\061\007\063\010\071\011\072\012\066" +
    "\014\064\031\076\032\065\035\062\055\016\001\002\000" +
    "\050\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\033\uffb4\034\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\001\002\000\032\004\074\005\070\006\061\007\063\010" +
    "\071\011\072\012\066\014\064\031\076\032\065\035\062" +
    "\055\016\001\002\000\032\004\074\005\070\006\061\007" +
    "\063\010\071\011\072\012\066\014\064\031\076\032\065" +
    "\035\062\055\016\001\002\000\050\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\033\uffb1\034" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\001\002\000\050\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\033\uffb0\034\uffb0\037\uffb0\040\uffb0\041\uffb0\001\002\000" +
    "\050\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\033\uffb6\034\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\001\002\000\050\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\033\uffb3\034\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\001\002\000\050\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\033\uffb2\034\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\001\002\000\050\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\033" +
    "\uffb7\034\uffb7\037\uffb7\040\uffb7\041\uffb7\001\002\000\056" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\032\136\033\uffaf\034\uffaf\035\135\036\134\037" +
    "\uffaf\040\uffaf\041\uffaf\001\002\000\050\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\033\uffac" +
    "\034\uffac\037\uffac\040\uffac\041\uffac\001\002\000\032\004" +
    "\074\005\070\006\061\007\063\010\071\011\072\012\066" +
    "\014\064\031\076\032\065\035\062\055\016\001\002\000" +
    "\040\013\107\014\101\015\102\016\111\017\113\020\114" +
    "\021\112\022\115\023\106\024\104\025\103\026\110\027" +
    "\100\030\116\033\105\001\002\000\032\004\074\005\070" +
    "\006\061\007\063\010\071\011\072\012\066\014\064\031" +
    "\076\032\065\035\062\055\016\001\002\000\032\004\074" +
    "\005\070\006\061\007\063\010\071\011\072\012\066\014" +
    "\064\031\076\032\065\035\062\055\016\001\002\000\032" +
    "\004\074\005\070\006\061\007\063\010\071\011\072\012" +
    "\066\014\064\031\076\032\065\035\062\055\016\001\002" +
    "\000\032\004\074\005\070\006\061\007\063\010\071\011" +
    "\072\012\066\014\064\031\076\032\065\035\062\055\016" +
    "\001\002\000\032\004\074\005\070\006\061\007\063\010" +
    "\071\011\072\012\066\014\064\031\076\032\065\035\062" +
    "\055\016\001\002\000\004\037\uffc8\001\002\000\032\004" +
    "\074\005\070\006\061\007\063\010\071\011\072\012\066" +
    "\014\064\031\076\032\065\035\062\055\016\001\002\000" +
    "\032\004\074\005\070\006\061\007\063\010\071\011\072" +
    "\012\066\014\064\031\076\032\065\035\062\055\016\001" +
    "\002\000\032\004\074\005\070\006\061\007\063\010\071" +
    "\011\072\012\066\014\064\031\076\032\065\035\062\055" +
    "\016\001\002\000\032\004\074\005\070\006\061\007\063" +
    "\010\071\011\072\012\066\014\064\031\076\032\065\035" +
    "\062\055\016\001\002\000\032\004\074\005\070\006\061" +
    "\007\063\010\071\011\072\012\066\014\064\031\076\032" +
    "\065\035\062\055\016\001\002\000\050\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\033\uffba" +
    "\034\uffba\037\uffba\040\uffba\041\uffba\001\002\000\050\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\033\uffb9\034\uffb9\037\uffb9\040\uffb9\041\uffb9\001\002" +
    "\000\032\004\074\005\070\006\061\007\063\010\071\011" +
    "\072\012\066\014\064\031\076\032\065\035\062\055\016" +
    "\001\002\000\032\004\074\005\070\006\061\007\063\010" +
    "\071\011\072\012\066\014\064\031\076\032\065\035\062" +
    "\055\016\001\002\000\050\013\107\014\101\015\102\016" +
    "\111\017\113\020\114\021\112\022\115\023\106\024\104" +
    "\025\103\026\110\027\uffc6\030\uffc6\033\uffc6\034\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\001\002\000\050\013\107\014\101" +
    "\015\102\016\111\017\113\020\114\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\033\uffc3" +
    "\034\uffc3\037\uffc3\040\uffc3\041\uffc3\001\002\000\050\013" +
    "\107\014\101\015\102\016\111\017\113\020\114\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\033\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\001\002" +
    "\000\050\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\113\020" +
    "\114\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\033\uffbb\034\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\001\002\000\050\013\107\014\101\015\102\016\111" +
    "\017\113\020\114\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\033\uffbf\034\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\001\002\000\050\013\uffbe\014\uffbe\015" +
    "\102\016\111\017\113\020\114\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\033\uffbe\034" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\001\002\000\050\013\107" +
    "\014\101\015\102\016\111\017\113\020\114\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\033\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2\001\002\000" +
    "\050\013\107\014\101\015\102\016\111\017\113\020\114" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\033\uffc1\034\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\001\002\000\050\013\107\014\101\015\102\016\111\017" +
    "\113\020\114\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\033\uffc0\034\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\001\002\000\050\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\113\020\114\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\033\uffbc\034\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\001\002\000\050\013\uffbd\014" +
    "\uffbd\015\102\016\111\017\113\020\114\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\033" +
    "\uffbd\034\uffbd\037\uffbd\040\uffbd\041\uffbd\001\002\000\050" +
    "\013\107\014\101\015\102\016\111\017\113\020\114\021" +
    "\112\022\115\023\106\024\104\025\103\026\110\027\uffc7" +
    "\030\116\033\uffc7\034\uffc7\037\uffc7\040\uffc7\041\uffc7\001" +
    "\002\000\050\013\107\014\101\015\102\016\111\017\113" +
    "\020\114\021\112\022\115\023\106\024\104\025\103\026" +
    "\110\027\uffc5\030\uffc5\033\uffc5\034\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\001\002\000\012\056\153\057\147\060\154\064" +
    "\150\001\002\000\032\004\074\005\070\006\061\007\063" +
    "\010\071\011\072\012\066\014\064\031\076\032\065\035" +
    "\062\055\016\001\002\000\034\004\074\005\070\006\061" +
    "\007\063\010\071\011\072\012\066\014\064\031\076\032" +
    "\065\033\141\035\062\055\016\001\002\000\006\033\143" +
    "\040\142\001\002\000\044\013\107\014\101\015\102\016" +
    "\111\017\113\020\114\021\112\022\115\023\106\024\104" +
    "\025\103\026\110\027\100\030\116\033\ufff5\034\ufff5\040" +
    "\ufff5\001\002\000\050\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\033\uffeb\034\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\001\002\000\032\004\074\005\070\006" +
    "\061\007\063\010\071\011\072\012\066\014\064\031\076" +
    "\032\065\035\062\055\016\001\002\000\050\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033" +
    "\uffea\034\uffea\037\uffea\040\uffea\041\uffea\001\002\000\044" +
    "\013\107\014\101\015\102\016\111\017\113\020\114\021" +
    "\112\022\115\023\106\024\104\025\103\026\110\027\100" +
    "\030\116\033\ufff6\034\ufff6\040\ufff6\001\002\000\040\013" +
    "\107\014\101\015\102\016\111\017\113\020\114\021\112" +
    "\022\115\023\106\024\104\025\103\026\110\027\100\030" +
    "\116\034\146\001\002\000\050\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\033\uffae\034\uffae" +
    "\037\uffae\040\uffae\041\uffae\001\002\000\004\032\173\001" +
    "\002\000\050\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\033\uffef\034\uffef\037\uffef\040\uffef" +
    "\041\uffef\001\002\000\050\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\033\uffee\034\uffee\037" +
    "\uffee\040\uffee\041\uffee\001\002\000\050\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\033\uffed" +
    "\034\uffed\037\uffed\040\uffed\041\uffed\001\002\000\004\032" +
    "\160\001\002\000\004\032\155\001\002\000\032\004\074" +
    "\005\070\006\061\007\063\010\071\011\072\012\066\014" +
    "\064\031\076\032\065\035\062\055\016\001\002\000\006" +
    "\033\157\040\142\001\002\000\050\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\034" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002\000\032\004\074" +
    "\005\070\006\061\007\063\010\071\011\072\012\066\014" +
    "\064\031\076\032\065\035\062\055\016\001\002\000\006" +
    "\033\163\040\162\001\002\000\034\004\074\005\070\006" +
    "\061\007\063\010\071\011\072\012\066\014\064\031\076" +
    "\032\065\035\062\055\016\062\164\001\002\000\050\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\033\uffe7\034\uffe7\037\uffe7\040\uffe7\041\uffe7\001\002" +
    "\000\004\032\165\001\002\000\004\033\166\001\002\000" +
    "\004\035\167\001\002\000\032\003\024\004\015\042\031" +
    "\043\014\044\023\046\011\047\032\050\021\051\030\052" +
    "\034\055\016\061\035\001\002\000\034\003\024\004\015" +
    "\034\171\042\031\043\014\044\023\046\011\047\032\050" +
    "\021\051\030\052\034\055\016\061\035\001\002\000\004" +
    "\033\172\001\002\000\050\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\033\uffe8\034\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\001\002\000\004\033\174\001\002" +
    "\000\050\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\033\uffec\034\uffec\037\uffec\040\uffec\041" +
    "\uffec\001\002\000\040\013\107\014\101\015\102\016\111" +
    "\017\113\020\114\021\112\022\115\023\106\024\104\025" +
    "\103\026\110\027\100\030\116\033\176\001\002\000\050" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\033\uffad\034\uffad\037\uffad\040\uffad\041\uffad\001" +
    "\002\000\050\013\uffb8\014\uffb8\015\102\016\111\017\113" +
    "\020\114\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\033\uffb8\034\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\001\002\000\006\034\201\040\142\001\002\000" +
    "\050\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\033\uffc9\034\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\001\002\000\032\004\074\005\070\006\061\007\063\010" +
    "\071\011\072\012\066\014\064\031\076\032\065\035\062" +
    "\055\016\001\002\000\040\013\107\014\101\015\102\016" +
    "\111\017\113\020\114\021\112\022\115\023\106\024\104" +
    "\025\103\026\110\027\100\030\116\033\204\001\002\000" +
    "\004\035\205\001\002\000\006\053\211\054\207\001\002" +
    "\000\010\034\217\053\211\054\207\001\002\000\004\041" +
    "\215\001\002\000\010\034\uffd2\053\uffd2\054\uffd2\001\002" +
    "\000\032\004\074\005\070\006\061\007\063\010\071\011" +
    "\072\012\066\014\064\031\076\032\065\035\062\055\016" +
    "\001\002\000\040\013\107\014\101\015\102\016\111\017" +
    "\113\020\114\021\112\022\115\023\106\024\104\025\103" +
    "\026\110\027\100\030\116\041\213\001\002\000\032\003" +
    "\024\004\015\042\031\043\014\044\023\046\011\047\032" +
    "\050\021\051\030\052\034\055\016\061\035\001\002\000" +
    "\040\003\024\004\015\034\uffd1\042\031\043\014\044\023" +
    "\046\011\047\032\050\021\051\030\052\034\053\uffd1\054" +
    "\uffd1\055\016\061\035\001\002\000\032\003\024\004\015" +
    "\042\031\043\014\044\023\046\011\047\032\050\021\051" +
    "\030\052\034\055\016\061\035\001\002\000\040\003\024" +
    "\004\015\034\uffd0\042\031\043\014\044\023\046\011\047" +
    "\032\050\021\051\030\052\034\053\uffd0\054\uffd0\055\016" +
    "\061\035\001\002\000\044\002\uffd4\003\uffd4\004\uffd4\034" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\061\uffd4\062" +
    "\uffd4\001\002\000\010\034\uffd3\053\uffd3\054\uffd3\001\002" +
    "\000\044\002\uffdf\003\uffdf\004\uffdf\034\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\061\uffdf\062\uffdf\001\002\000" +
    "\012\035\225\037\ufff3\040\ufff3\041\226\001\002\000\006" +
    "\037\ufffb\040\052\001\002\000\004\037\ufff9\001\002\000" +
    "\032\004\074\005\070\006\061\007\063\010\071\011\072" +
    "\012\066\014\064\031\076\032\065\035\062\055\016\001" +
    "\002\000\032\004\074\005\070\006\061\007\063\010\071" +
    "\011\072\012\066\014\064\031\076\032\065\035\062\055" +
    "\016\001\002\000\040\013\107\014\101\015\102\016\111" +
    "\017\113\020\114\021\112\022\115\023\106\024\104\025" +
    "\103\026\110\027\100\030\116\037\ufff8\001\002\000\040" +
    "\013\107\014\101\015\102\016\111\017\113\020\114\021" +
    "\112\022\115\023\106\024\104\025\103\026\110\027\100" +
    "\030\116\034\231\001\002\000\006\037\ufffa\041\232\001" +
    "\002\000\032\004\074\005\070\006\061\007\063\010\071" +
    "\011\072\012\066\014\064\031\076\032\065\035\062\055" +
    "\016\001\002\000\040\013\107\014\101\015\102\016\111" +
    "\017\113\020\114\021\112\022\115\023\106\024\104\025" +
    "\103\026\110\027\100\030\116\037\ufff7\001\002\000\032" +
    "\004\074\005\070\006\061\007\063\010\071\011\072\012" +
    "\066\014\064\031\076\032\065\035\062\055\016\001\002" +
    "\000\040\013\107\014\101\015\102\016\111\017\113\020" +
    "\114\021\112\022\115\023\106\024\104\025\103\026\110" +
    "\027\100\030\116\033\236\001\002\000\004\035\237\001" +
    "\002\000\032\003\024\004\015\042\031\043\014\044\023" +
    "\046\011\047\032\050\021\051\030\052\034\055\016\061" +
    "\035\001\002\000\034\003\024\004\015\034\241\042\031" +
    "\043\014\044\023\046\011\047\032\050\021\051\030\052" +
    "\034\055\016\061\035\001\002\000\044\002\uffcd\003\uffcd" +
    "\004\uffcd\034\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\061\uffcd\062\uffcd\001\002\000\044\002\uffdc\003\uffdc\004" +
    "\uffdc\034\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\061" +
    "\uffdc\062\uffdc\001\002\000\044\002\uffd7\003\uffd7\004\uffd7" +
    "\034\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\061\uffd7" +
    "\062\uffd7\001\002\000\032\004\074\005\070\006\061\007" +
    "\063\010\071\011\072\012\066\014\064\031\076\032\065" +
    "\035\062\055\016\001\002\000\040\013\107\014\101\015" +
    "\102\016\111\017\113\020\114\021\112\022\115\023\106" +
    "\024\104\025\103\026\110\027\100\030\116\033\246\001" +
    "\002\000\004\035\247\001\002\000\032\003\024\004\015" +
    "\042\031\043\014\044\023\046\011\047\032\050\021\051" +
    "\030\052\034\055\016\061\035\001\002\000\034\003\024" +
    "\004\015\034\251\042\031\043\014\044\023\046\011\047" +
    "\032\050\021\051\030\052\034\055\016\061\035\001\002" +
    "\000\046\002\uffd6\003\uffd6\004\uffd6\034\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\252\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\004\035\253\001\002\000\032\003\024\004\015" +
    "\042\031\043\014\044\023\046\011\047\032\050\021\051" +
    "\030\052\034\055\016\061\035\001\002\000\034\003\024" +
    "\004\015\034\255\042\031\043\014\044\023\046\011\047" +
    "\032\050\021\051\030\052\034\055\016\061\035\001\002" +
    "\000\044\002\uffd5\003\uffd5\004\uffd5\034\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\061\uffd5\062\uffd5\001\002\000" +
    "\044\002\uffe0\003\uffe0\004\uffe0\034\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\061\uffe0\062\uffe0\001\002\000\040" +
    "\013\107\014\101\015\102\016\111\017\113\020\114\021" +
    "\112\022\115\023\106\024\104\025\103\026\110\027\100" +
    "\030\116\037\260\001\002\000\044\002\uffce\003\uffce\004" +
    "\uffce\034\uffce\042\uffce\043\uffce\044\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\061" +
    "\uffce\062\uffce\001\002\000\036\002\uffff\003\uffff\004\uffff" +
    "\042\uffff\043\uffff\044\uffff\046\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\055\uffff\061\uffff\062\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\063\264\001\002\000\004\032" +
    "\265\001\002\000\032\004\074\005\070\006\061\007\063" +
    "\010\071\011\072\012\066\014\064\031\076\032\065\035" +
    "\062\055\016\001\002\000\040\013\107\014\101\015\102" +
    "\016\111\017\113\020\114\021\112\022\115\023\106\024" +
    "\104\025\103\026\110\027\100\030\116\033\267\001\002" +
    "\000\052\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\033\ufff0\034\ufff0\036\270\037\ufff0\040" +
    "\ufff0\041\ufff0\001\002\000\006\056\153\060\154\001\002" +
    "\000\050\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\033\ufff2\034\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\001\002\000\050\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\033\ufff1\034\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\001\002\000\032\004\074\005\070\006" +
    "\061\007\063\010\071\011\072\012\066\014\064\031\076" +
    "\032\065\035\062\055\016\001\002\000\040\013\107\014" +
    "\101\015\102\016\111\017\113\020\114\021\112\022\115" +
    "\023\106\024\104\025\103\026\110\027\100\030\116\034" +
    "\275\001\002\000\004\041\232\001\002\000\004\004\277" +
    "\001\002\000\004\041\300\001\002\000\032\004\074\005" +
    "\070\006\061\007\063\010\071\011\072\012\066\014\064" +
    "\031\076\032\065\035\062\055\016\001\002\000\040\013" +
    "\107\014\101\015\102\016\111\017\113\020\114\021\112" +
    "\022\115\023\106\024\104\025\103\026\110\027\100\030" +
    "\116\037\302\001\002\000\032\004\074\005\070\006\061" +
    "\007\063\010\071\011\072\012\066\014\064\031\076\032" +
    "\065\035\062\055\016\001\002\000\040\013\107\014\101" +
    "\015\102\016\111\017\113\020\114\021\112\022\115\023" +
    "\106\024\104\025\103\026\110\027\100\030\116\037\304" +
    "\001\002\000\006\017\307\020\306\001\002\000\004\033" +
    "\310\001\002\000\004\033\uffca\001\002\000\004\033\uffcb" +
    "\001\002\000\004\035\311\001\002\000\032\003\024\004" +
    "\015\042\031\043\014\044\023\046\011\047\032\050\021" +
    "\051\030\052\034\055\016\061\035\001\002\000\034\003" +
    "\024\004\015\034\313\042\031\043\014\044\023\046\011" +
    "\047\032\050\021\051\030\052\034\055\016\061\035\001" +
    "\002\000\044\002\uffcc\003\uffcc\004\uffcc\034\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\061\uffcc\062\uffcc\001\002" +
    "\000\032\004\074\005\070\006\061\007\063\010\071\011" +
    "\072\012\066\014\064\031\076\032\065\035\062\055\016" +
    "\001\002\000\040\013\107\014\101\015\102\016\111\017" +
    "\113\020\114\021\112\022\115\023\106\024\104\025\103" +
    "\026\110\027\100\030\116\033\316\001\002\000\004\037" +
    "\uffcf\001\002\000\044\002\uffdb\003\uffdb\004\uffdb\034\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\061\uffdb\062\uffdb" +
    "\001\002\000\044\002\uffd8\003\uffd8\004\uffd8\034\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\061\uffd8\062\uffd8\001" +
    "\002\000\044\002\uffde\003\uffde\004\uffde\034\uffde\042\uffde" +
    "\043\uffde\044\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\061\uffde\062\uffde\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\040\002\016\003\017\004\025\005\021\006" +
    "\036\007\012\010\003\011\032\013\024\014\011\015\026" +
    "\017\005\020\007\026\004\027\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\260\005\021\006" +
    "\036\007\012\010\003\011\032\013\024\014\011\015\026" +
    "\017\005\020\007\026\004\027\006\001\001\000\012\010" +
    "\066\022\256\025\072\033\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\223\016\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\021\007\012\010\003\011\032\012\046\013" +
    "\045\014\011\015\026\017\005\020\007\026\004\027\006" +
    "\001\001\000\002\001\001\000\030\005\021\007\012\010" +
    "\003\011\032\013\050\014\011\015\026\017\005\020\007" +
    "\026\004\027\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\021" +
    "\007\012\010\003\011\032\012\054\013\045\014\011\015" +
    "\026\017\005\020\007\026\004\027\006\001\001\000\030" +
    "\005\021\007\012\010\003\011\032\013\050\014\011\015" +
    "\026\017\005\020\007\026\004\027\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\066\022\076\025" +
    "\072\033\074\001\001\000\002\001\001\000\014\010\066" +
    "\021\177\022\137\025\072\033\074\001\001\000\002\001" +
    "\001\000\012\010\066\022\176\025\072\033\074\001\001" +
    "\000\012\010\066\022\174\025\072\033\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\066\022\132\025\072" +
    "\033\074\001\001\000\002\001\001\000\012\010\066\022" +
    "\131\025\072\033\074\001\001\000\012\010\066\022\130" +
    "\025\072\033\074\001\001\000\012\010\066\022\127\025" +
    "\072\033\074\001\001\000\012\010\066\022\126\025\072" +
    "\033\074\001\001\000\012\010\066\022\125\025\072\033" +
    "\074\001\001\000\002\001\001\000\012\010\066\022\124" +
    "\025\072\033\074\001\001\000\012\010\066\022\123\025" +
    "\072\033\074\001\001\000\012\010\066\022\122\025\072" +
    "\033\074\001\001\000\012\010\066\022\121\025\072\033" +
    "\074\001\001\000\012\010\066\022\120\025\072\033\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\066\022\117\025\072\033\074\001\001\000\012\010\066" +
    "\022\116\025\072\033\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\150\032" +
    "\151\001\001\000\012\010\066\022\144\025\072\033\074" +
    "\001\001\000\014\010\066\021\136\022\137\025\072\033" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\066\022\143\025\072\033\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\066\021\155\022\137\025\072\033" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\066\021\160\022\137\025\072\033\074\001\001\000" +
    "\002\001\001\000\012\010\066\022\143\025\072\033\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\021\007\012\010\003" +
    "\011\032\012\167\013\045\014\011\015\026\017\005\020" +
    "\007\026\004\027\006\001\001\000\030\005\021\007\012" +
    "\010\003\011\032\013\050\014\011\015\026\017\005\020" +
    "\007\026\004\027\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\066\022\202\025\072\033" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\205\024\207\001\001\000\004\024\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\066\022\211" +
    "\025\072\033\074\001\001\000\002\001\001\000\032\005" +
    "\021\007\012\010\003\011\032\012\213\013\045\014\011" +
    "\015\026\017\005\020\007\026\004\027\006\001\001\000" +
    "\030\005\021\007\012\010\003\011\032\013\050\014\011" +
    "\015\026\017\005\020\007\026\004\027\006\001\001\000" +
    "\032\005\021\007\012\010\003\011\032\012\215\013\045" +
    "\014\011\015\026\017\005\020\007\026\004\027\006\001" +
    "\001\000\030\005\021\007\012\010\003\011\032\013\050" +
    "\014\011\015\026\017\005\020\007\026\004\027\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\066\022\227\025\072\033\074\001\001\000\012" +
    "\010\066\022\226\025\072\033\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\066" +
    "\022\232\025\072\033\074\001\001\000\002\001\001\000" +
    "\012\010\066\022\234\025\072\033\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\021\007\012\010" +
    "\003\011\032\012\237\013\045\014\011\015\026\017\005" +
    "\020\007\026\004\027\006\001\001\000\030\005\021\007" +
    "\012\010\003\011\032\013\050\014\011\015\026\017\005" +
    "\020\007\026\004\027\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\066\022\244" +
    "\025\072\033\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\021\007\012\010\003\011\032\012\247" +
    "\013\045\014\011\015\026\017\005\020\007\026\004\027" +
    "\006\001\001\000\030\005\021\007\012\010\003\011\032" +
    "\013\050\014\011\015\026\017\005\020\007\026\004\027" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\021\007\012\010\003\011\032\012\253\013\045\014" +
    "\011\015\026\017\005\020\007\026\004\027\006\001\001" +
    "\000\030\005\021\007\012\010\003\011\032\013\050\014" +
    "\011\015\026\017\005\020\007\026\004\027\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\066\022\265\025" +
    "\072\033\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\270\032\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\066\022\273\025\072\033\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\066\022\300\025\072" +
    "\033\074\001\001\000\002\001\001\000\012\010\066\022" +
    "\302\025\072\033\074\001\001\000\002\001\001\000\004" +
    "\030\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\021\007\012" +
    "\010\003\011\032\012\311\013\045\014\011\015\026\017" +
    "\005\020\007\026\004\027\006\001\001\000\030\005\021" +
    "\007\012\010\003\011\032\013\050\014\011\015\026\017" +
    "\005\020\007\026\004\027\006\001\001\000\002\001\001" +
    "\000\012\010\066\022\314\025\072\033\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.err.println("Error " + s.value + " " + s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Hubo un error en análisis irrecuperable :(");
        //System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCJS$actions {

//Codigo de acciones
      

  private final parserCJS parser;

  /** Constructor */
  CUP$parserCJS$actions(parserCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCJS$do_action(
    int                        CUP$parserCJS$act_num,
    java_cup.runtime.lr_parser CUP$parserCJS$parser,
    java.util.Stack            CUP$parserCJS$stack,
    int                        CUP$parserCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCJS$result;

      /* select the action based on the action number */
      switch (CUP$parserCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= ARREGLO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(a);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = e;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= ID LLA_IZQ E LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo h = new Nodo(ConsCJS.POS_ARRE);
                    h.addHijo(new Nodo(ConsCJS.ID,id),e);
                    RESULT.addHijo(h);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= LLAMADA 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(llamada);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= TRUE 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.booleano,"true");
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= FALSE 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.booleano,"false");
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= DATE_T 
            {
              Nodo RESULT =null;
		int date_tleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int date_tright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String date_t = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.fecha_hora,date_t);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= DATE 
            {
              Nodo RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.fecha,date);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= CADENA 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    cad = cad.substring(1,cad.length()-1);
                    RESULT.addHijo(ConsCJS.cadena,cad);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= NUMERICO 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.numero,num);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= N 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= MENOS E 
            {
              Nodo RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENOS);
                    RESULT.addHijo(n,ea);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E DECREMENTO 
            {
              Nodo RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo ea = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.DECREMENTO);
                    RESULT.addHijo(ea,n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E INCREMENTO 
            {
              Nodo RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo ea = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.INCREMENTO);
                    RESULT.addHijo(ea,n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E DIV E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.DIV);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E MULT E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MULT);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E MENOS E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENOS);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E MAS E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MAS);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E MENORIGUALQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENORIGUALQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E MAYORIGUALQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MAYORIGUALQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E MENORQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENORQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E MAYORQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MAYORQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E DIFERENTE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.DIFERENTE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E IGUAL E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.IGUAL);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= NOT E 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.NOT);
                    n.addHijo(e);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E OR E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.OR);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E AND E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.AND);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MESSAGE ::= MENSAJE PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.MSG);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("MESSAGE",13, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARREGLO ::= LLA_IZQ LE LLA_DER 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.ARR);
                    RESULT.addHijo(le);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("ARREGLO",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= DECREMENTO 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.OP,dec);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OP",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP ::= INCREMENTO 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.OP,in);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OP",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= PARA PAR_IZQ ID DOS_PUNTOS E PUNTO_COMA E PUNTO_COMA OP PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.FOR);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                    RESULT.addHijo(op);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-12)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WHILE ::= MIENTRAS PAR_IZQ E PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.WHILE);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RET ::= RETORNAR E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.RET);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("RET",20, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SOUT ::= IMPRIMIR PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.SOUT);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SOUT",14, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CAS ::= DEFECTO DOS_PUNTOS L_SEN 
            {
              Nodo RESULT =null;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DEF);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("CAS",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CAS ::= CASO E DOS_PUNTOS L_SEN 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.CASO);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("CAS",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCASO ::= CAS 
            {
              Nodo RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.LCASO);
                    RESULT.addHijo(cas);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LCASO",17, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LCASO ::= LCASO CAS 
            {
              Nodo RESULT =null;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = lcaso;
                    RESULT.addHijo(cas);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LCASO",17, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWITCH ::= SELECCIONAR PAR_IZQ E PAR_DER LLA_IZQ LCASO LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.SWT);
                    RESULT.addHijo(e);
                    RESULT.addHijo(lcaso);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= SI PAR_IZQ E PAR_DER LLA_IZQ L_SEN LLA_DER SINO LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int l_sen2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_sen2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.IF_ELSE);
                    RESULT.addHijo(l_sen);
                    RESULT.addHijo(l_sen2);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= SI PAR_IZQ E PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.IF);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SEN ::= error PUNTO_COMA 
            {
              Nodo RESULT =null;
		int errorleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int errorright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Object error = (Object)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SEN ::= MESSAGE PUNTO_COMA 
            {
              Nodo RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo ms = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = ms;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SEN ::= WHILE 
            {
              Nodo RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo wh = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = wh;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SEN ::= RET 
            {
              Nodo RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ret = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = ret;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SEN ::= SOUT PUNTO_COMA 
            {
              Nodo RESULT =null;
		int soutleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int soutright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo sout = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = sout;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SEN ::= DETENER PUNTO_COMA 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCJS.DET);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SEN ::= FOR 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = para;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SEN ::= LLAMADA PUNTO_COMA 
            {
              Nodo RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = llam;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SEN ::= ASIG PUNTO_COMA 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = asig;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SEN ::= DEC PUNTO_COMA 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = dec;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SEN ::= SWITCH 
            {
              Nodo RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sw = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = sw;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SEN ::= IF 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo si = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = si;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // L_SEN ::= SEN 
            {
              Nodo RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.L_SEN);
                    RESULT.addHijo(sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L_SEN",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_SEN ::= L_SEN SEN 
            {
              Nodo RESULT =null;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = l_sen;
                    RESULT.addHijo(sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L_SEN",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUN ::= FUNCION ID PAR_IZQ PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FUN",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUN ::= FUNCION ID PAR_IZQ LID PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(lid);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FUN",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OBS ::= OBSERVADOR PAR_IZQ LE PAR_DER 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.OBS);
                    RESULT.addHijo(le);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OBS",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OBS ::= OBSERVADOR PAR_IZQ LE COMA FUNCION PAR_IZQ PAR_DER LLA_IZQ L_SEN LLA_DER PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    RESULT = new Nodo(ConsCJS.OBS);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OBS",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SET ::= SETELEMENTO PAR_IZQ LE PAR_DER 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.SET);
                    RESULT.addHijo(le);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SET",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LLAMADA ::= ID PAR_IZQ LE PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.LLAM_P);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id),le);
                    
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA ::= ID PAR_IZQ PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    RESULT = new Nodo(ConsCJS.LLAM);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA ::= ID PUNTO ATEXTO PAR_IZQ PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		
                    RESULT = new Nodo(ConsCJS.ATEXTO);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(new Nodo(ConsCJS.ATEXTO));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= ID PUNTO OBS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo obs = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ID_OBS);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(obs);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LLAMADA ::= ID PUNTO SET 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo set = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ID_SET);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(set);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA ::= ID PUNTO CONTEO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    RESULT = new Nodo(ConsCJS.ID_CONT);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(new Nodo(ConsCJS.CONTEO));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LLAMADA ::= DOCUMENTO PUNTO OBTENER PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.DOC_OBT);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LLAMADA ::= DOCUMENTO PUNTO OBTENER PAR_IZQ E PAR_DER PUNTO OBS 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo obs = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DOC_OBT_OBS);
                    RESULT.addHijo(e);
                    RESULT.addHijo(obs);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LLAMADA ::= DOCUMENTO PUNTO OBTENER PAR_IZQ E PAR_DER PUNTO SET 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo set = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DOC_OBT_SET);
                    RESULT.addHijo(e);
                    RESULT.addHijo(set);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LID ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.LID);
                    RESULT.addHijo(ConsCJS.ID,id);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LID ::= LID COMA ID 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = lid;
                    RESULT.addHijo(ConsCJS.ID,id);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LE ::= E 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.LE);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LE",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LE ::= LE COMA E 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = le;
                    RESULT.addHijo(e);

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LE",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIG ::= ID LLA_IZQ E LLA_DER DOS_PUNTOS E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ASIG);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("ASIG",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIG ::= ID DOS_PUNTOS E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ASIG);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("ASIG",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC ::= DIMV ASIG 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DEC);
                    RESULT.addHijo(asig);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("DEC",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC ::= DIMV ID LLA_IZQ E LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		

                    RESULT = new Nodo(ConsCJS.DEC);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(exp);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("DEC",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= DIMV LID 
            {
              Nodo RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("DEC",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L1 ::= FUN 
            {
              Nodo RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo fun = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = fun;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L1",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L1 ::= SEN 
            {
              Nodo RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = sen;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L1",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= L1 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            RESULT = new Nodo(ConsCJS.L1);
            RESULT.addHijo(n1);

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= A L1 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            RESULT = a;
            RESULT.addHijo(n1);

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= A 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		

            RESULT = new Nodo(ConsCJS.INICIO);
            RESULT.addHijo(n1);

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT = start_val;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCJS$parser.done_parsing();
          return CUP$parserCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

