
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 05 09:52:53 CST 2018
//----------------------------------------------------

package GeneradorCJS;

import java_cup.runtime.Symbol;
import AST.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 05 09:52:53 CST 2018
  */
public class parserCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCJS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\034\005\000\002\034\003\000\002\035\006\000\002" +
    "\011\005\000\002\011\010\000\002\021\005\000\002\021" +
    "\003\000\002\016\005\000\002\016\003\000\002\010\012" +
    "\000\002\010\012\000\002\010\010\000\002\010\005\000" +
    "\002\010\005\000\002\010\007\000\002\010\010\000\002" +
    "\010\007\000\002\010\007\000\002\010\010\000\002\010" +
    "\010\000\002\010\005\000\002\010\005\000\002\010\007" +
    "\000\002\010\012\000\002\010\011\000\002\010\005\000" +
    "\002\010\006\000\002\031\006\000\002\032\015\000\002" +
    "\032\006\000\002\006\012\000\002\006\011\000\002\006" +
    "\011\000\002\006\010\000\002\012\004\000\002\012\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\004\000\002\007\011" +
    "\000\002\007\015\000\002\014\011\000\002\023\004\000" +
    "\002\023\003\000\002\024\006\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\020\006\000\002\026" +
    "\005\000\002\027\011\000\002\027\010\000\002\015\017" +
    "\000\002\015\016\000\002\030\003\000\002\030\003\000" +
    "\002\033\005\000\002\017\006\000\002\022\005\000\002" +
    "\022\005\000\002\022\004\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\006\000\002\022\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\034\003\024\004\015\044\031\045\014\046" +
    "\023\050\011\051\032\052\021\053\027\054\034\057\016" +
    "\063\036\064\035\001\002\000\004\041\360\001\002\000" +
    "\044\002\uffcc\003\uffcc\004\uffcc\036\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\063\uffcc\064\uffcc\001\002\000\004" +
    "\041\357\001\002\000\044\002\uffcb\003\uffcb\004\uffcb\036" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\063\uffcb\064" +
    "\uffcb\001\002\000\004\041\356\001\002\000\004\034\353" +
    "\001\002\000\044\002\uffd3\003\uffd3\004\uffd3\036\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\063\uffd3\064\uffd3\001" +
    "\002\000\044\002\uffd4\003\uffd4\004\uffd4\036\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\063\uffd4\064\uffd4\001\002" +
    "\000\004\034\334\001\002\000\012\034\122\037\331\040" +
    "\120\043\263\001\002\000\004\040\321\001\002\000\004" +
    "\002\320\001\002\000\036\002\000\003\024\004\015\044" +
    "\031\045\014\046\023\050\011\051\032\052\021\053\027" +
    "\054\034\057\016\063\036\064\035\001\002\000\032\004" +
    "\054\005\047\006\041\007\044\010\050\011\052\012\046" +
    "\014\043\033\056\034\045\037\042\057\016\001\002\000" +
    "\004\041\314\001\002\000\004\034\302\001\002\000\004" +
    "\041\301\001\002\000\036\002\ufffd\003\ufffd\004\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\057\ufffd\063\ufffd\064\ufffd\001\002\000\036\002" +
    "\ufffe\003\ufffe\004\ufffe\044\ufffe\045\ufffe\046\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\063\ufffe\064" +
    "\ufffe\001\002\000\004\041\300\001\002\000\044\002\uffcf" +
    "\003\uffcf\004\uffcf\036\uffcf\044\uffcf\045\uffcf\046\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\063\uffcf\064\uffcf\001\002\000\004\034\271\001" +
    "\002\000\004\004\247\001\002\000\004\041\246\001\002" +
    "\000\004\034\227\001\002\000\004\004\207\001\002\000" +
    "\004\034\040\001\002\000\036\002\ufffc\003\ufffc\004\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\057\ufffc\063\ufffc\064\ufffc\001\002\000\032" +
    "\004\054\005\047\006\041\007\044\010\050\011\052\012" +
    "\046\014\043\033\056\034\045\037\042\057\016\001\002" +
    "\000\054\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\035\uffa1\036\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\001\002\000\032\004\054\005\047" +
    "\006\041\007\044\010\050\011\052\012\046\014\043\033" +
    "\056\034\045\037\042\057\016\001\002\000\032\004\054" +
    "\005\047\006\041\007\044\010\050\011\052\012\046\014" +
    "\043\033\056\034\045\037\042\057\016\001\002\000\054" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\001\002\000\032\004\054\005\047\006\041" +
    "\007\044\010\050\011\052\012\046\014\043\033\056\034" +
    "\045\037\042\057\016\001\002\000\054\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\035\uff9d\036\uff9d\041\uff9d\042\uff9d\043\uff9d\001" +
    "\002\000\054\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\035\uffa2\036\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\001\002\000\054\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\035\uff9f\036\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\001\002\000\054\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\035\uff9c\036" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\001\002\000\054\013\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\035\uff9e\036\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\001\002\000\054\013\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\035\uffa3" +
    "\036\uffa3\041\uffa3\042\uffa3\043\uffa3\001\002\000\062\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\034\122\035\uff9b\036\uff9b\037\121" +
    "\040\120\041\uff9b\042\uff9b\043\uff9b\001\002\000\054\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\035\uff9a\036\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\001\002\000\032\004\054\005\047\006\041\007" +
    "\044\010\050\011\052\012\046\014\043\033\056\034\045" +
    "\037\042\057\016\001\002\000\044\013\071\014\061\015" +
    "\063\016\073\017\062\020\064\021\075\022\076\023\074" +
    "\024\077\025\070\026\066\027\065\030\072\031\060\032" +
    "\100\035\067\001\002\000\032\004\054\005\047\006\041" +
    "\007\044\010\050\011\052\012\046\014\043\033\056\034" +
    "\045\037\042\057\016\001\002\000\032\004\054\005\047" +
    "\006\041\007\044\010\050\011\052\012\046\014\043\033" +
    "\056\034\045\037\042\057\016\001\002\000\032\004\054" +
    "\005\047\006\041\007\044\010\050\011\052\012\046\014" +
    "\043\033\056\034\045\037\042\057\016\001\002\000\032" +
    "\004\054\005\047\006\041\007\044\010\050\011\052\012" +
    "\046\014\043\033\056\034\045\037\042\057\016\001\002" +
    "\000\032\004\054\005\047\006\041\007\044\010\050\011" +
    "\052\012\046\014\043\033\056\034\045\037\042\057\016" +
    "\001\002\000\032\004\054\005\047\006\041\007\044\010" +
    "\050\011\052\012\046\014\043\033\056\034\045\037\042" +
    "\057\016\001\002\000\032\004\054\005\047\006\041\007" +
    "\044\010\050\011\052\012\046\014\043\033\056\034\045" +
    "\037\042\057\016\001\002\000\004\041\uffb6\001\002\000" +
    "\032\004\054\005\047\006\041\007\044\010\050\011\052" +
    "\012\046\014\043\033\056\034\045\037\042\057\016\001" +
    "\002\000\032\004\054\005\047\006\041\007\044\010\050" +
    "\011\052\012\046\014\043\033\056\034\045\037\042\057" +
    "\016\001\002\000\032\004\054\005\047\006\041\007\044" +
    "\010\050\011\052\012\046\014\043\033\056\034\045\037" +
    "\042\057\016\001\002\000\032\004\054\005\047\006\041" +
    "\007\044\010\050\011\052\012\046\014\043\033\056\034" +
    "\045\037\042\057\016\001\002\000\032\004\054\005\047" +
    "\006\041\007\044\010\050\011\052\012\046\014\043\033" +
    "\056\034\045\037\042\057\016\001\002\000\054\013\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\035\uffa6\036\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\001\002\000\054\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\035\uffa5" +
    "\036\uffa5\041\uffa5\042\uffa5\043\uffa5\001\002\000\032\004" +
    "\054\005\047\006\041\007\044\010\050\011\052\012\046" +
    "\014\043\033\056\034\045\037\042\057\016\001\002\000" +
    "\032\004\054\005\047\006\041\007\044\010\050\011\052" +
    "\012\046\014\043\033\056\034\045\037\042\057\016\001" +
    "\002\000\054\013\071\014\061\015\063\016\073\017\062" +
    "\020\064\021\075\022\076\023\074\024\077\025\070\026" +
    "\066\027\065\030\072\031\uffb4\032\uffb4\035\uffb4\036\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\001\002\000\054\013\071\014" +
    "\061\015\063\016\073\017\062\020\064\021\075\022\076" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\035\uffb1\036\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\001\002\000\054\013\071\014\061\015\063\016\073\017" +
    "\062\020\064\021\075\022\076\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\035\uffb2\036" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\001\002\000\054\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\062\020\064\021\075\022" +
    "\076\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\001\002\000\054\013\071\014\061\015\063\016\073" +
    "\017\062\020\064\021\075\022\076\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\035\uffad" +
    "\036\uffad\041\uffad\042\uffad\043\uffad\001\002\000\054\013" +
    "\uffac\014\uffac\015\063\016\073\017\062\020\064\021\075" +
    "\022\076\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\035\uffac\036\uffac\041\uffac\042\uffac" +
    "\043\uffac\001\002\000\054\013\071\014\061\015\063\016" +
    "\073\017\062\020\064\021\075\022\076\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\035" +
    "\uffb0\036\uffb0\041\uffb0\042\uffb0\043\uffb0\001\002\000\054" +
    "\013\071\014\061\015\063\016\073\017\062\020\064\021" +
    "\075\022\076\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\035\uffaf\036\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\001\002\000\054\013\071\014\061\015\063" +
    "\016\073\017\062\020\064\021\075\022\076\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\035\uffae\036\uffae\041\uffae\042\uffae\043\uffae\001\002\000" +
    "\054\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\021\075\022\076\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\035\uffa7\036\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\001\002\000\054\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\062\020\064\021\075\022\076\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\035\uffaa\036\uffaa\041\uffaa\042\uffaa\043\uffaa\001\002" +
    "\000\054\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\062\020" +
    "\064\021\075\022\076\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\001\002\000\054\013\uffab\014\uffab" +
    "\015\063\016\073\017\062\020\064\021\075\022\076\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\035\uffab\036\uffab\041\uffab\042\uffab\043\uffab\001" +
    "\002\000\054\013\071\014\061\015\063\016\073\017\062" +
    "\020\064\021\075\022\076\023\074\024\077\025\070\026" +
    "\066\027\065\030\072\031\uffb5\032\100\035\uffb5\036\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\001\002\000\054\013\071\014" +
    "\061\015\063\016\073\017\062\020\064\021\075\022\076" +
    "\023\074\024\077\025\070\026\066\027\065\030\072\031" +
    "\uffb3\032\uffb3\035\uffb3\036\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\001\002\000\014\004\173\060\133\061\174\062\134\066" +
    "\175\001\002\000\032\004\054\005\047\006\041\007\044" +
    "\010\050\011\052\012\046\014\043\033\056\034\045\037" +
    "\042\057\016\001\002\000\034\004\054\005\047\006\041" +
    "\007\044\010\050\011\052\012\046\014\043\033\056\034" +
    "\045\035\125\037\042\057\016\001\002\000\006\035\161" +
    "\042\137\001\002\000\050\013\071\014\061\015\063\016" +
    "\073\017\062\020\064\021\075\022\076\023\074\024\077" +
    "\025\070\026\066\027\065\030\072\031\060\032\100\035" +
    "\ufff2\036\ufff2\042\ufff2\001\002\000\056\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\035\uffdf\036\uffdf\040\126\041\uffdf\042\uffdf\043" +
    "\uffdf\001\002\000\012\004\127\060\133\061\130\062\134" +
    "\001\002\000\054\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\035\uffea\036" +
    "\uffea\041\uffea\042\uffea\043\uffea\001\002\000\004\034\157" +
    "\001\002\000\054\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8\036" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\001\002\000\054\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\035\uffe7\036\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\001\002\000\004\034\142\001\002\000\004\034\135" +
    "\001\002\000\032\004\054\005\047\006\041\007\044\010" +
    "\050\011\052\012\046\014\043\033\056\034\045\037\042" +
    "\057\016\001\002\000\006\035\140\042\137\001\002\000" +
    "\032\004\054\005\047\006\041\007\044\010\050\011\052" +
    "\012\046\014\043\033\056\034\045\037\042\057\016\001" +
    "\002\000\054\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035\uffdd\036\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\001\002\000\050\013\071\014" +
    "\061\015\063\016\073\017\062\020\064\021\075\022\076" +
    "\023\074\024\077\025\070\026\066\027\065\030\072\031" +
    "\060\032\100\035\ufff3\036\ufff3\042\ufff3\001\002\000\032" +
    "\004\054\005\047\006\041\007\044\010\050\011\052\012" +
    "\046\014\043\033\056\034\045\037\042\057\016\001\002" +
    "\000\006\035\145\042\144\001\002\000\034\004\054\005" +
    "\047\006\041\007\044\010\050\011\052\012\046\014\043" +
    "\033\056\034\045\037\042\057\016\064\146\001\002\000" +
    "\054\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\001\002\000\004\034\147\001\002\000" +
    "\004\035\150\001\002\000\004\037\151\001\002\000\032" +
    "\003\024\004\015\044\031\045\014\046\023\050\011\051" +
    "\032\052\021\053\027\054\034\057\016\063\036\001\002" +
    "\000\040\003\uffd5\004\uffd5\036\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\063\uffd5\001\002\000\034\003\024\004" +
    "\015\036\154\044\031\045\014\046\023\050\011\051\032" +
    "\052\021\053\027\054\034\057\016\063\036\001\002\000" +
    "\004\035\156\001\002\000\040\003\uffd6\004\uffd6\036\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\063\uffd6\001\002" +
    "\000\054\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\035\uffdc\036\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\001\002\000\004\035\160\001\002" +
    "\000\054\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\035\uffe0\036\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\001\002\000\056\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\035\uffde\036\uffde\040\162\041\uffde\042\uffde\043" +
    "\uffde\001\002\000\012\004\163\060\133\061\164\062\134" +
    "\001\002\000\054\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\035\uffe9\036" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\001\002\000\004\034\167" +
    "\001\002\000\054\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\035\uffe6\036" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\001\002\000\054\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\001\002\000\004\035\170\001\002\000\054\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\035\uffe1\036\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\001\002\000\044\013\071\014\061\015\063\016\073" +
    "\017\062\020\064\021\075\022\076\023\074\024\077\025" +
    "\070\026\066\027\065\030\072\031\060\032\100\036\172" +
    "\001\002\000\054\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\035\uff99\036" +
    "\uff99\041\uff99\042\uff99\043\uff99\001\002\000\054\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\035\uffeb\036\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\001\002\000\004\034\200\001\002\000\054\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\035\uffec\036\uffec\041\uffec\042\uffec\043" +
    "\uffec\001\002\000\054\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\035\uffe3" +
    "\036\uffe3\041\uffe3\042\uffe3\043\uffe3\001\002\000\054\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\035\uffe4\036\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\001\002\000\004\035\201\001\002\000\054\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\035\uffe2\036\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\001\002\000\044\013\071\014\061\015\063\016" +
    "\073\017\062\020\064\021\075\022\076\023\074\024\077" +
    "\025\070\026\066\027\065\030\072\031\060\032\100\035" +
    "\203\001\002\000\054\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\035\uff98" +
    "\036\uff98\041\uff98\042\uff98\043\uff98\001\002\000\054\013" +
    "\uffa4\014\uffa4\015\063\016\073\017\062\020\064\021\075" +
    "\022\076\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\035\uffa4\036\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\001\002\000\006\036\206\042\137\001\002\000" +
    "\054\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\035\uffb7\036\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\001\002\000\004\034\210\001\002\000" +
    "\006\004\211\035\213\001\002\000\006\035\ufff0\042\ufff0" +
    "\001\002\000\006\035\221\042\220\001\002\000\004\037" +
    "\214\001\002\000\034\003\024\004\015\036\215\044\031" +
    "\045\014\046\023\050\011\051\032\052\021\053\027\054" +
    "\034\057\016\063\036\001\002\000\036\002\uffd7\003\uffd7" +
    "\004\uffd7\044\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\057\uffd7\063\uffd7\064\uffd7\001\002" +
    "\000\034\003\024\004\015\036\217\044\031\045\014\046" +
    "\023\050\011\051\032\052\021\053\027\054\034\057\016" +
    "\063\036\001\002\000\036\002\uffd8\003\uffd8\004\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\057\uffd8\063\uffd8\064\uffd8\001\002\000\004\004" +
    "\226\001\002\000\004\037\222\001\002\000\034\003\024" +
    "\004\015\036\223\044\031\045\014\046\023\050\011\051" +
    "\032\052\021\053\027\054\034\057\016\063\036\001\002" +
    "\000\036\002\uffd9\003\uffd9\004\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\057\uffd9" +
    "\063\uffd9\064\uffd9\001\002\000\034\003\024\004\015\036" +
    "\225\044\031\045\014\046\023\050\011\051\032\052\021" +
    "\053\027\054\034\057\016\063\036\001\002\000\036\002" +
    "\uffda\003\uffda\004\uffda\044\uffda\045\uffda\046\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\057\uffda\063\uffda\064" +
    "\uffda\001\002\000\010\035\ufff1\041\ufff1\042\ufff1\001\002" +
    "\000\032\004\054\005\047\006\041\007\044\010\050\011" +
    "\052\012\046\014\043\033\056\034\045\037\042\057\016" +
    "\001\002\000\044\013\071\014\061\015\063\016\073\017" +
    "\062\020\064\021\075\022\076\023\074\024\077\025\070" +
    "\026\066\027\065\030\072\031\060\032\100\035\231\001" +
    "\002\000\004\037\232\001\002\000\006\055\236\056\234" +
    "\001\002\000\010\036\244\055\236\056\234\001\002\000" +
    "\004\043\242\001\002\000\010\036\uffc4\055\uffc4\056\uffc4" +
    "\001\002\000\032\004\054\005\047\006\041\007\044\010" +
    "\050\011\052\012\046\014\043\033\056\034\045\037\042" +
    "\057\016\001\002\000\044\013\071\014\061\015\063\016" +
    "\073\017\062\020\064\021\075\022\076\023\074\024\077" +
    "\025\070\026\066\027\065\030\072\031\060\032\100\043" +
    "\240\001\002\000\040\003\024\004\015\036\uffc1\044\031" +
    "\045\014\046\023\050\011\051\032\052\021\053\027\054" +
    "\034\055\uffc1\056\uffc1\057\016\063\036\001\002\000\040" +
    "\003\024\004\015\036\uffc3\044\031\045\014\046\023\050" +
    "\011\051\032\052\021\053\027\054\034\055\uffc3\056\uffc3" +
    "\057\016\063\036\001\002\000\040\003\024\004\015\036" +
    "\uffc0\044\031\045\014\046\023\050\011\051\032\052\021" +
    "\053\027\054\034\055\uffc0\056\uffc0\057\016\063\036\001" +
    "\002\000\040\003\024\004\015\036\uffc2\044\031\045\014" +
    "\046\023\050\011\051\032\052\021\053\027\054\034\055" +
    "\uffc2\056\uffc2\057\016\063\036\001\002\000\044\002\uffc6" +
    "\003\uffc6\004\uffc6\036\uffc6\044\uffc6\045\uffc6\046\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\063\uffc6\064\uffc6\001\002\000\010\036\uffc5\055" +
    "\uffc5\056\uffc5\001\002\000\044\002\uffd1\003\uffd1\004\uffd1" +
    "\036\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\063\uffd1" +
    "\064\uffd1\001\002\000\012\037\262\041\ufff0\042\ufff0\043" +
    "\263\001\002\000\006\041\ufff7\042\ufff7\001\002\000\006" +
    "\041\ufffb\042\220\001\002\000\006\041\ufffa\042\254\001" +
    "\002\000\004\041\ufff9\001\002\000\004\004\255\001\002" +
    "\000\004\037\257\001\002\000\006\041\ufff8\042\ufff8\001" +
    "\002\000\032\004\054\005\047\006\041\007\044\010\050" +
    "\011\052\012\046\014\043\033\056\034\045\037\042\057" +
    "\016\001\002\000\044\013\071\014\061\015\063\016\073" +
    "\017\062\020\064\021\075\022\076\023\074\024\077\025" +
    "\070\026\066\027\065\030\072\031\060\032\100\036\261" +
    "\001\002\000\006\041\ufff6\042\ufff6\001\002\000\032\004" +
    "\054\005\047\006\041\007\044\010\050\011\052\012\046" +
    "\014\043\033\056\034\045\037\042\057\016\001\002\000" +
    "\032\004\054\005\047\006\041\007\044\010\050\011\052" +
    "\012\046\014\043\033\056\034\045\037\042\057\016\001" +
    "\002\000\044\013\071\014\061\015\063\016\073\017\062" +
    "\020\064\021\075\022\076\023\074\024\077\025\070\026" +
    "\066\027\065\030\072\031\060\032\100\041\ufff5\001\002" +
    "\000\044\013\071\014\061\015\063\016\073\017\062\020" +
    "\064\021\075\022\076\023\074\024\077\025\070\026\066" +
    "\027\065\030\072\031\060\032\100\036\266\001\002\000" +
    "\010\041\ufff6\042\ufff6\043\267\001\002\000\032\004\054" +
    "\005\047\006\041\007\044\010\050\011\052\012\046\014" +
    "\043\033\056\034\045\037\042\057\016\001\002\000\044" +
    "\013\071\014\061\015\063\016\073\017\062\020\064\021" +
    "\075\022\076\023\074\024\077\025\070\026\066\027\065" +
    "\030\072\031\060\032\100\041\ufff4\001\002\000\032\004" +
    "\054\005\047\006\041\007\044\010\050\011\052\012\046" +
    "\014\043\033\056\034\045\037\042\057\016\001\002\000" +
    "\044\013\071\014\061\015\063\016\073\017\062\020\064" +
    "\021\075\022\076\023\074\024\077\025\070\026\066\027" +
    "\065\030\072\031\060\032\100\035\273\001\002\000\004" +
    "\037\274\001\002\000\034\003\024\004\015\036\275\044" +
    "\031\045\014\046\023\050\011\051\032\052\021\053\027" +
    "\054\034\057\016\063\036\001\002\000\044\002\uffbc\003" +
    "\uffbc\004\uffbc\036\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\063\uffbc\064\uffbc\001\002\000\034\003\024\004\015" +
    "\036\277\044\031\045\014\046\023\050\011\051\032\052" +
    "\021\053\027\054\034\057\016\063\036\001\002\000\044" +
    "\002\uffbd\003\uffbd\004\uffbd\036\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\063\uffbd\064\uffbd\001\002\000\044\002" +
    "\uffce\003\uffce\004\uffce\036\uffce\044\uffce\045\uffce\046\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\063\uffce\064\uffce\001\002\000\044\002\uffc9" +
    "\003\uffc9\004\uffc9\036\uffc9\044\uffc9\045\uffc9\046\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\063\uffc9\064\uffc9\001\002\000\032\004\054\005" +
    "\047\006\041\007\044\010\050\011\052\012\046\014\043" +
    "\033\056\034\045\037\042\057\016\001\002\000\044\013" +
    "\071\014\061\015\063\016\073\017\062\020\064\021\075" +
    "\022\076\023\074\024\077\025\070\026\066\027\065\030" +
    "\072\031\060\032\100\035\304\001\002\000\004\037\305" +
    "\001\002\000\032\003\024\004\015\044\031\045\014\046" +
    "\023\050\011\051\032\052\021\053\027\054\034\057\016" +
    "\063\036\001\002\000\034\003\024\004\015\036\307\044" +
    "\031\045\014\046\023\050\011\051\032\052\021\053\027" +
    "\054\034\057\016\063\036\001\002\000\046\002\uffc8\003" +
    "\uffc8\004\uffc8\036\uffc8\044\uffc8\045\uffc8\046\uffc8\047\310" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\063\uffc8\064\uffc8\001\002\000\004\037\311" +
    "\001\002\000\032\003\024\004\015\044\031\045\014\046" +
    "\023\050\011\051\032\052\021\053\027\054\034\057\016" +
    "\063\036\001\002\000\034\003\024\004\015\036\313\044" +
    "\031\045\014\046\023\050\011\051\032\052\021\053\027" +
    "\054\034\057\016\063\036\001\002\000\044\002\uffc7\003" +
    "\uffc7\004\uffc7\036\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\063\uffc7\064\uffc7\001\002\000\044\002\uffd2\003\uffd2" +
    "\004\uffd2\036\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\063\uffd2\064\uffd2\001\002\000\044\013\071\014\061\015" +
    "\063\016\073\017\062\020\064\021\075\022\076\023\074" +
    "\024\077\025\070\026\066\027\065\030\072\031\060\032" +
    "\100\041\316\001\002\000\044\002\uffbe\003\uffbe\004\uffbe" +
    "\036\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\063\uffbe" +
    "\064\uffbe\001\002\000\036\002\uffff\003\uffff\004\uffff\044" +
    "\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\057\uffff\063\uffff\064\uffff\001\002\000\004\002" +
    "\001\001\002\000\004\065\322\001\002\000\004\034\323" +
    "\001\002\000\032\004\054\005\047\006\041\007\044\010" +
    "\050\011\052\012\046\014\043\033\056\034\045\037\042" +
    "\057\016\001\002\000\044\013\071\014\061\015\063\016" +
    "\073\017\062\020\064\021\075\022\076\023\074\024\077" +
    "\025\070\026\066\027\065\030\072\031\060\032\100\035" +
    "\325\001\002\000\056\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\035\uffed" +
    "\036\uffed\040\326\041\uffed\042\uffed\043\uffed\001\002\000" +
    "\006\060\133\062\134\001\002\000\054\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\035\uffef\036\uffef\041\uffef\042\uffef\043\uffef\001" +
    "\002\000\054\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee" +
    "\041\uffee\042\uffee\043\uffee\001\002\000\032\004\054\005" +
    "\047\006\041\007\044\010\050\011\052\012\046\014\043" +
    "\033\056\034\045\037\042\057\016\001\002\000\044\013" +
    "\071\014\061\015\063\016\073\017\062\020\064\021\075" +
    "\022\076\023\074\024\077\025\070\026\066\027\065\030" +
    "\072\031\060\032\100\036\333\001\002\000\004\043\267" +
    "\001\002\000\004\004\335\001\002\000\004\043\336\001" +
    "\002\000\032\004\054\005\047\006\041\007\044\010\050" +
    "\011\052\012\046\014\043\033\056\034\045\037\042\057" +
    "\016\001\002\000\044\013\071\014\061\015\063\016\073" +
    "\017\062\020\064\021\075\022\076\023\074\024\077\025" +
    "\070\026\066\027\065\030\072\031\060\032\100\041\340" +
    "\001\002\000\032\004\054\005\047\006\041\007\044\010" +
    "\050\011\052\012\046\014\043\033\056\034\045\037\042" +
    "\057\016\001\002\000\044\013\071\014\061\015\063\016" +
    "\073\017\062\020\064\021\075\022\076\023\074\024\077" +
    "\025\070\026\066\027\065\030\072\031\060\032\100\041" +
    "\342\001\002\000\006\021\345\022\344\001\002\000\004" +
    "\035\346\001\002\000\004\035\uffb8\001\002\000\004\035" +
    "\uffb9\001\002\000\004\037\347\001\002\000\034\003\024" +
    "\004\015\036\350\044\031\045\014\046\023\050\011\051" +
    "\032\052\021\053\027\054\034\057\016\063\036\001\002" +
    "\000\044\002\uffba\003\uffba\004\uffba\036\uffba\044\uffba\045" +
    "\uffba\046\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\063\uffba\064\uffba\001\002\000" +
    "\034\003\024\004\015\036\352\044\031\045\014\046\023" +
    "\050\011\051\032\052\021\053\027\054\034\057\016\063" +
    "\036\001\002\000\044\002\uffbb\003\uffbb\004\uffbb\036\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\063\uffbb\064\uffbb" +
    "\001\002\000\032\004\054\005\047\006\041\007\044\010" +
    "\050\011\052\012\046\014\043\033\056\034\045\037\042" +
    "\057\016\001\002\000\044\013\071\014\061\015\063\016" +
    "\073\017\062\020\064\021\075\022\076\023\074\024\077" +
    "\025\070\026\066\027\065\030\072\031\060\032\100\035" +
    "\355\001\002\000\004\041\uffbf\001\002\000\044\002\uffcd" +
    "\003\uffcd\004\uffcd\036\uffcd\044\uffcd\045\uffcd\046\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\063\uffcd\064\uffcd\001\002\000\044\002\uffca\003" +
    "\uffca\004\uffca\036\uffca\044\uffca\045\uffca\046\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\063\uffca\064\uffca\001\002\000\044\002\uffd0\003\uffd0" +
    "\004\uffd0\036\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\063\uffd0\064\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\040\002\016\003\017\004\025\005\021\006" +
    "\036\007\012\010\003\011\032\013\024\014\011\015\027" +
    "\017\005\020\007\026\004\027\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\316\005\021\006" +
    "\036\007\012\010\003\011\032\013\024\014\011\015\027" +
    "\017\005\020\007\026\004\027\006\001\001\000\012\010" +
    "\050\022\314\025\052\033\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\252\016\250\034\251\035\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\050\022" +
    "\056\025\052\033\054\001\001\000\002\001\001\000\014" +
    "\010\050\021\204\022\123\025\052\033\054\001\001\000" +
    "\012\010\050\022\203\025\052\033\054\001\001\000\002" +
    "\001\001\000\012\010\050\022\201\025\052\033\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\050\022\116" +
    "\025\052\033\054\001\001\000\002\001\001\000\012\010" +
    "\050\022\115\025\052\033\054\001\001\000\012\010\050" +
    "\022\114\025\052\033\054\001\001\000\012\010\050\022" +
    "\113\025\052\033\054\001\001\000\012\010\050\022\112" +
    "\025\052\033\054\001\001\000\012\010\050\022\111\025" +
    "\052\033\054\001\001\000\012\010\050\022\110\025\052" +
    "\033\054\001\001\000\012\010\050\022\107\025\052\033" +
    "\054\001\001\000\002\001\001\000\012\010\050\022\106" +
    "\025\052\033\054\001\001\000\012\010\050\022\105\025" +
    "\052\033\054\001\001\000\012\010\050\022\104\025\052" +
    "\033\054\001\001\000\012\010\050\022\103\025\052\033" +
    "\054\001\001\000\012\010\050\022\102\025\052\033\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\050\022\101\025\052\033\054\001\001\000\012\010\050" +
    "\022\100\025\052\033\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\176\032\175\001\001\000\012" +
    "\010\050\022\170\025\052\033\054\001\001\000\014\010" +
    "\050\021\122\022\123\025\052\033\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\130\032\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\050\021\135\022\123\025\052" +
    "\033\054\001\001\000\002\001\001\000\012\010\050\022" +
    "\140\025\052\033\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\050\021\142\022\123\025\052\033" +
    "\054\001\001\000\002\001\001\000\012\010\050\022\140" +
    "\025\052\033\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\021" +
    "\007\012\010\003\011\032\012\152\013\151\014\011\015" +
    "\027\017\005\020\007\026\004\027\006\001\001\000\002" +
    "\001\001\000\030\005\021\007\012\010\003\011\032\013" +
    "\154\014\011\015\027\017\005\020\007\026\004\027\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\164\032\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\021\007\012\010" +
    "\003\011\032\012\215\013\151\014\011\015\027\017\005" +
    "\020\007\026\004\027\006\001\001\000\002\001\001\000" +
    "\030\005\021\007\012\010\003\011\032\013\154\014\011" +
    "\015\027\017\005\020\007\026\004\027\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\021\007\012\010\003\011\032\012\223\013\151\014" +
    "\011\015\027\017\005\020\007\026\004\027\006\001\001" +
    "\000\002\001\001\000\030\005\021\007\012\010\003\011" +
    "\032\013\154\014\011\015\027\017\005\020\007\026\004" +
    "\027\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\050\022\227\025\052\033\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\232\024\234\001" +
    "\001\000\004\024\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\050\022\236\025\052\033\054\001" +
    "\001\000\002\001\001\000\032\005\021\007\012\010\003" +
    "\011\032\012\240\013\151\014\011\015\027\017\005\020" +
    "\007\026\004\027\006\001\001\000\030\005\021\007\012" +
    "\010\003\011\032\013\154\014\011\015\027\017\005\020" +
    "\007\026\004\027\006\001\001\000\032\005\021\007\012" +
    "\010\003\011\032\012\242\013\151\014\011\015\027\017" +
    "\005\020\007\026\004\027\006\001\001\000\030\005\021" +
    "\007\012\010\003\011\032\013\154\014\011\015\027\017" +
    "\005\020\007\026\004\027\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\050\022\257\025\052\033\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\050\022\264\025\052\033\054\001\001\000\012\010\050" +
    "\022\263\025\052\033\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\050\022\267" +
    "\025\052\033\054\001\001\000\002\001\001\000\012\010" +
    "\050\022\271\025\052\033\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\021\007\012\010\003\011" +
    "\032\012\275\013\151\014\011\015\027\017\005\020\007" +
    "\026\004\027\006\001\001\000\002\001\001\000\030\005" +
    "\021\007\012\010\003\011\032\013\154\014\011\015\027" +
    "\017\005\020\007\026\004\027\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\050" +
    "\022\302\025\052\033\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\021\007\012\010\003\011\032" +
    "\012\305\013\151\014\011\015\027\017\005\020\007\026" +
    "\004\027\006\001\001\000\030\005\021\007\012\010\003" +
    "\011\032\013\154\014\011\015\027\017\005\020\007\026" +
    "\004\027\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\021\007\012\010\003\011\032\012\311\013" +
    "\151\014\011\015\027\017\005\020\007\026\004\027\006" +
    "\001\001\000\030\005\021\007\012\010\003\011\032\013" +
    "\154\014\011\015\027\017\005\020\007\026\004\027\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\050\022" +
    "\323\025\052\033\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\326\032\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\050\022\331\025\052" +
    "\033\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\050\022\336" +
    "\025\052\033\054\001\001\000\002\001\001\000\012\010" +
    "\050\022\340\025\052\033\054\001\001\000\002\001\001" +
    "\000\004\030\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\021" +
    "\007\012\010\003\011\032\012\350\013\151\014\011\015" +
    "\027\017\005\020\007\026\004\027\006\001\001\000\002" +
    "\001\001\000\030\005\021\007\012\010\003\011\032\013" +
    "\154\014\011\015\027\017\005\020\007\026\004\027\006" +
    "\001\001\000\002\001\001\000\012\010\050\022\353\025" +
    "\052\033\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.err.println("Error " + s.value + " " + s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Hubo un error en análisis irrecuperable :(");
        //System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCJS$actions {

//Codigo de acciones
      

  private final parserCJS parser;

  /** Constructor */
  CUP$parserCJS$actions(parserCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCJS$do_action(
    int                        CUP$parserCJS$act_num,
    java_cup.runtime.lr_parser CUP$parserCJS$parser,
    java.util.Stack            CUP$parserCJS$stack,
    int                        CUP$parserCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCJS$result;

      /* select the action based on the action number */
      switch (CUP$parserCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = e;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= ID LLA_IZQ E LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo h = new Nodo(ConsCJS.POS_ARRE);
                    h.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright),e);
                    RESULT.addHijo(h);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= ARREGLO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(a);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= LLAMADA 
            {
              Nodo RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo llamada = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(llamada);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= TRUE 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.booleano,"1",vleft,vright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= FALSE 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.booleano,"0",fleft,fright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= DATE_T 
            {
              Nodo RESULT =null;
		int date_tleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int date_tright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String date_t = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.fecha_hora,date_t,date_tleft,date_tright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= DATE 
            {
              Nodo RESULT =null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String date = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.fecha,date,dateleft,dateright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= CADENA 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.cadena,cad,cadleft,cadright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= NUMERICO 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.numero,num,numleft,numright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= N 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = n;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= MENOS E 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.MENOS,"",ileft,iright);
                    n.addHijo(ea);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E DECREMENTO 
            {
              Nodo RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo ea = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.DECREMENTO,"",ileft,iright);
                    n.addHijo(ea);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= E INCREMENTO 
            {
              Nodo RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo ea = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.INCREMENTO,"",ileft,iright);
                    n.addHijo(ea);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E MOD E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.MOD,"",ileft,iright);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E POT E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.POT,"",ileft,iright);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E DIV E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.DIV,"",ileft,iright);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E MULT E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.MULT,"",ileft,iright);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E MENOS E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.MENOS,"",ileft,iright);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E MAS E 
            {
              Nodo RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo ea1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ea2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EA);
                    Nodo n = new Nodo(ConsCJS.MAS,"",ileft,iright);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E MENORIGUALQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ER);
                    Nodo n = new Nodo(ConsCJS.MENORIGUALQUE,"",ileft,iright);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E MAYORIGUALQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ER);
                    Nodo n = new Nodo(ConsCJS.MAYORIGUALQUE,"",ileft,iright);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E MENORQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ER);
                    Nodo n = new Nodo(ConsCJS.MENORQUE,"",ileft,iright);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E MAYORQUE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ER);
                    Nodo n = new Nodo(ConsCJS.MAYORQUE,"",ileft,iright);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E DIFERENTE E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ER);
                    Nodo n = new Nodo(ConsCJS.DIFERENTE,"",ileft,iright);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E IGUAL E 
            {
              Nodo RESULT =null;
		int er1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int er1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo er1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int er2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int er2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo er2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ER);
                    Nodo n = new Nodo(ConsCJS.IGUAL,"",ileft,iright);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= NOT E 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EL);
                    Nodo n = new Nodo(ConsCJS.NOT,"",ileft,iright);
                    n.addHijo(e);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E OR E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EL);
                    Nodo n = new Nodo(ConsCJS.OR,"",ileft,iright);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E AND E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.EL);
                    Nodo n = new Nodo(ConsCJS.AND,"",ileft,iright);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("E",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MESSAGE ::= MENSAJE PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.MSG);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("MESSAGE",13, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARREGLO ::= LLA_IZQ LE LLA_DER 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.ARR);
                    RESULT.addHijo(le);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("ARREGLO",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= DECREMENTO 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.OP,dec,decleft,decright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OP",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= INCREMENTO 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.OP,in,inleft,inright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OP",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= PARA PAR_IZQ ID DOS_PUNTOS E PUNTO_COMA E PUNTO_COMA OP PAR_DER LLA_IZQ LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		
                    RESULT = new Nodo(ConsCJS.FOR);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                    RESULT.addHijo(op);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-11)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= PARA PAR_IZQ ID DOS_PUNTOS E PUNTO_COMA E PUNTO_COMA OP PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.FOR);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                    RESULT.addHijo(op);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-12)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WHILE ::= MIENTRAS PAR_IZQ E PAR_DER LLA_IZQ LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		
                    RESULT = new Nodo(ConsCJS.WHILE);
                    RESULT.addHijo(e);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE ::= MIENTRAS PAR_IZQ E PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.WHILE);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RET ::= RETORNAR E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.RET);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("RET",20, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SOUT ::= IMPRIMIR PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.SOUT);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SOUT",14, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CAS ::= DEFECTO DOS_PUNTOS 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCJS.DEF);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("CAS",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CAS ::= CASO E DOS_PUNTOS 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.DEF);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("CAS",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CAS ::= DEFECTO DOS_PUNTOS L_SEN 
            {
              Nodo RESULT =null;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DEF);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("CAS",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CAS ::= CASO E DOS_PUNTOS L_SEN 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.CASO);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("CAS",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LCASO ::= CAS 
            {
              Nodo RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.LCASO);
                    RESULT.addHijo(cas);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LCASO",17, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LCASO ::= LCASO CAS 
            {
              Nodo RESULT =null;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = lcaso;
                    RESULT.addHijo(cas);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LCASO",17, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCH ::= SELECCIONAR PAR_IZQ E PAR_DER LLA_IZQ LCASO LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int lcasoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lcasoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo lcaso = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.SWT);
                    RESULT.addHijo(e);
                    RESULT.addHijo(lcaso);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= SI PAR_IZQ E PAR_DER LLA_IZQ L_SEN LLA_DER SINO LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int l_sen2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_sen2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.IF_ELSE);
                    RESULT.addHijo(e,l_sen,l_sen2);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= SI PAR_IZQ E PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.IF);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SEN ::= error PUNTO_COMA 
            {
              Nodo RESULT =null;
		int errorleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int errorright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Object error = (Object)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SEN ::= MESSAGE PUNTO_COMA 
            {
              Nodo RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo ms = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = ms;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SEN ::= WHILE 
            {
              Nodo RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo wh = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = wh;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SEN ::= RET 
            {
              Nodo RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ret = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = ret;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SEN ::= SOUT PUNTO_COMA 
            {
              Nodo RESULT =null;
		int soutleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int soutright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo sout = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = sout;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SEN ::= DETENER PUNTO_COMA 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCJS.DET);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SEN ::= FOR 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = para;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SEN ::= LLAMADA PUNTO_COMA 
            {
              Nodo RESULT =null;
		int llamleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int llamright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo llam = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = llam;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SEN ::= ASIG PUNTO_COMA 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = asig;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SEN ::= DEC PUNTO_COMA 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = dec;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SEN ::= SWITCH 
            {
              Nodo RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sw = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = sw;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SEN ::= IF 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo si = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = si;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SEN",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_SEN ::= SEN 
            {
              Nodo RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.L_SEN);
                    RESULT.addHijo(sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L_SEN",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_SEN ::= L_SEN SEN 
            {
              Nodo RESULT =null;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = l_sen;
                    RESULT.addHijo(sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L_SEN",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUN ::= FUNCION ID PAR_IZQ PAR_DER LLA_IZQ LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(new Nodo(ConsCJS.LID),new Nodo(ConsCJS.L_SEN));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FUN",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUN ::= FUNCION ID PAR_IZQ PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(new Nodo(ConsCJS.LID),l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FUN",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUN ::= FUNCION ID PAR_IZQ LID PAR_DER LLA_IZQ LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(lid);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FUN",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUN ::= FUNCION ID PAR_IZQ LID PAR_DER LLA_IZQ L_SEN LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(lid);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("FUN",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OBS ::= OBSERVADOR PAR_IZQ LE PAR_DER 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.OBS);
                    RESULT.addHijo(le);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OBS",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OBS ::= OBSERVADOR PAR_IZQ LE COMA FUNCION PAR_IZQ PAR_DER LLA_IZQ L_SEN LLA_DER PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    RESULT = new Nodo(ConsCJS.OBS);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("OBS",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SET ::= SETELEMENTO PAR_IZQ LE PAR_DER 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.SET);
                    RESULT.addHijo(le);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("SET",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LLAMADA ::= ID PAR_IZQ LE PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.LLAM_P);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright),le);
                    
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LLAMADA ::= ID PAR_IZQ PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    RESULT = new Nodo(ConsCJS.LLAM);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LLAMADA ::= ID PAR_IZQ PAR_DER PUNTO ATEXTO PAR_IZQ PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		
                    RESULT = new Nodo(ConsCJS.ATEXTO2);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LLAMADA ::= ID PAR_IZQ LE PAR_DER PUNTO ATEXTO PAR_IZQ PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		
                    RESULT = new Nodo(ConsCJS.ATEXTO2);
                    Nodo llam = new Nodo(ConsCJS.LLAM_P);
                    llam.addHijo(ConsCJS.ID,id,idleft,idright);
                    llam.addHijo(le);
                    RESULT.addHijo(llam);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LLAMADA ::= ID PUNTO ATEXTO PAR_IZQ PAR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		
                    RESULT = new Nodo(ConsCJS.ATEXTO);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LLAMADA ::= ID PUNTO OBS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo obs = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ID_OBS);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(obs);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LLAMADA ::= ID PUNTO SET 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo set = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ID_SET);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(set);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LLAMADA ::= ID PAR_IZQ LE PAR_DER PUNTO OBS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo obs = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.FUN_ID2);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright),obs);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LLAMADA ::= ID PAR_IZQ LE PAR_DER PUNTO SET 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo set = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.FUN_SET2);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright),set);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LLAMADA ::= ID PAR_IZQ PAR_DER PUNTO OBS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo obs = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.FUN_OBS);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright),obs);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LLAMADA ::= ID PAR_IZQ PAR_DER PUNTO SET 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo set = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.FUN_SET);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright),set);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LLAMADA ::= ID PAR_IZQ LE PAR_DER PUNTO ID 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.FUN_ID2);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id1,id1left,id1right),new Nodo(ConsCJS.ID,id2,id2left,id2right),le);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LLAMADA ::= ID PAR_IZQ PAR_DER PUNTO ID 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.FUN_ID);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id1,id1left,id1right),new Nodo(ConsCJS.ID,id2,id2left,id2right));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADA ::= ID PUNTO ID 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ID_ID);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id1,id1left,id1right),new Nodo(ConsCJS.ID,id2,id2left,id2right));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LLAMADA ::= ID PUNTO CONTEO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    RESULT = new Nodo(ConsCJS.ID_CONT);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(new Nodo(ConsCJS.CONTEO));
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA ::= DOCUMENTO PUNTO OBTENER PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.DOC_OBT);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LLAMADA ::= DOCUMENTO PUNTO OBTENER PAR_IZQ E PAR_DER PUNTO OBS 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int obsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int obsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo obs = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DOC_OBT_OBS);
                    RESULT.addHijo(e);
                    RESULT.addHijo(obs);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA ::= DOCUMENTO PUNTO OBTENER PAR_IZQ E PAR_DER PUNTO SET 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int setleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int setright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo set = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DOC_OBT_SET);
                    RESULT.addHijo(e);
                    RESULT.addHijo(set);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LID ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.LID);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LID ::= LID COMA ID 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = lid;
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LID",12, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LE ::= E 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.LE);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LE",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LE ::= LE COMA E 
            {
              Nodo RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo le = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = le;
                    RESULT.addHijo(e);

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LE",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIG ::= ID LLA_IZQ E LLA_DER DOS_PUNTOS E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ASIG);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("ASIG",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIG ::= ID DOS_PUNTOS E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.ASIG);
                    RESULT.addHijo(ConsCJS.ID,id,idleft,idright);
                    RESULT.addHijo(e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("ASIG",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AR ::= ID LLA_IZQ E LLA_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    RESULT = new Nodo(ConsCJS.AR);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id,idleft,idright),e);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("AR",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_AR ::= AR 
            {
              Nodo RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.LISTA_AR);
                    RESULT.addHijo(ar);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LISTA_AR",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_AR ::= LISTA_AR COMA AR 
            {
              Nodo RESULT =null;
		int larleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int larright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		Nodo lar = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = lar;
                    RESULT.addHijo(ar);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("LISTA_AR",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC ::= DIMV ASIG 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DEC_ASIG);
                    RESULT.addHijo(asig);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("DEC",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC ::= DIMV LISTA_AR 
            {
              Nodo RESULT =null;
		int larleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int larright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo lar = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		

                    RESULT = new Nodo(ConsCJS.DEC);
                    RESULT.addHijo(lar);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("DEC",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= DIMV LID 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.DEC);
                    RESULT.addHijo(lid);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("DEC",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L1 ::= FUN 
            {
              Nodo RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo fun = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = fun;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L1",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L1 ::= SEN 
            {
              Nodo RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = sen;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("L1",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= L1 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCJS.L1);
                    RESULT.addHijo(n1);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= A L1 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                    RESULT = a;
                    RESULT.addHijo(n1);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= A 
            {
              Nodo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		

                    RESULT = new Nodo(ConsCJS.INICIO);
                    RESULT.addHijo(n1);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT = start_val;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCJS$parser.done_parsing();
          return CUP$parserCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

