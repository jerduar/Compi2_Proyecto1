package GeneradorCJS;

import java_cup.runtime.Symbol;
import AST.Nodo;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println("Error " + s.value + " " + s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Hubo un error en an√°lisis irrecuperable :(");
        //System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, NUMERICO, CADENA, DATE, DATE_T, FALSE, TRUE;
terminal String MAS, MENOS, MULT, DIV, INCREMENTO, DECREMENTO, IGUAL, DIFERENTE, MAYORQUE, MENORQUE, MAYORIGUALQUE, MENORIGUALQUE, AND, OR, NOT, PAR_IZQ, PAR_DER, LLA_DER, LLA_IZQ, PUNTO, PUNTO_COMA, COMA, DOS_PUNTOS;
terminal String MIENTRAS, PARA, SI, SINO, IMPRIMIR, DIMV, RETORNAR, DETENER, SELECCIONAR, CASO, DEFECTO, DOCUMENTO, OBSERVADOR, ATEXTO, SETELEMENTO, MENSAJE, FUNCION, OBTENER, CONTEO;
nonterminal Nodo INICIAL, A, L1, DEC, FUN, IF, LLAMADA, ASIG, L_SEN, SEN, SWITCH, FOR, LID, MESSAGE, SOUT, LE, E, LCASO, CAS, N, RET, WHILE, OP, SET, OBS, ARREGLO;

precedence left AND;
precedence left OR;
precedence left NOT;
precedence left IGUAL, DIFERENTE, MAYORQUE, MENORQUE, MAYORIGUALQUE, MENORIGUALQUE;
precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence left INCREMENTO;
precedence left DECREMENTO;




start with INICIAL;

INICIAL     ::=   A:n1 {:

                    RESULT = new Nodo(ConsCJS.INICIO);
                    RESULT.addHijo(n1);
                :}
;

A           ::=   A:a L1:n1 {:
                    RESULT = a;
                    RESULT.addHijo(n1);
                :}

                | L1:n1 {:
                    RESULT = new Nodo(ConsCJS.L1);
                    RESULT.addHijo(n1);
                :}
;

L1          ::=   SEN:sen {:
                    RESULT = sen;
                :}
                | FUN:fun{:
                    RESULT = fun;
                :}
;

DEC         ::=   DIMV LID
                | DIMV ID:id LLA_IZQ E:exp LLA_DER{:

                    RESULT = new Nodo(ConsCJS.DEC);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(exp);
                :}
                | DIMV ASIG:asig {:
                    RESULT = new Nodo(ConsCJS.DEC);
                    RESULT.addHijo(asig);
                :}
;

ASIG        ::=   ID:id DOS_PUNTOS E:e{:
                    RESULT = new Nodo(ConsCJS.ASIG);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(e);
                :}
                | ID:id LLA_IZQ E:e1 LLA_DER DOS_PUNTOS E:e2{:
                    RESULT = new Nodo(ConsCJS.ASIG);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                :}
;

LE          ::=   LE:le COMA E:e{:
                    RESULT = le;
                    RESULT.addHijo(e);
:}
                | E:e {:
                    RESULT = new Nodo(ConsCJS.LE);
                    RESULT.addHijo(e);
                :}
;

LID         ::=   LID:lid COMA ID:id{:
                    RESULT = lid;
                    RESULT.addHijo(ConsCJS.ID,id);
                :}
                | ID:id {:
                    RESULT = new Nodo(ConsCJS.LID);
                    RESULT.addHijo(ConsCJS.ID,id);
                :}
;


LLAMADA     ::=   DOCUMENTO PUNTO OBTENER PAR_IZQ E:e PAR_DER PUNTO SET:set {:
                    RESULT = new Nodo(ConsCJS.DOC_OBT_SET);
                    RESULT.addHijo(e);
                    RESULT.addHijo(set);
                :}
                | DOCUMENTO PUNTO OBTENER PAR_IZQ E:e PAR_DER PUNTO OBS:obs{:
                    RESULT = new Nodo(ConsCJS.DOC_OBT_OBS);
                    RESULT.addHijo(e);
                    RESULT.addHijo(obs);
                :}
                | DOCUMENTO PUNTO OBTENER PAR_IZQ E:e PAR_DER{:
                    RESULT = new Nodo(ConsCJS.DOC_OBT);
                    RESULT.addHijo(e);
                :}
                | ID:id PUNTO CONTEO {:
                    RESULT = new Nodo(ConsCJS.ID_CONT);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(new Nodo(ConsCJS.CONTEO));
                :}
                | ID:id1 PUNTO ID:id2{:
                    RESULT = new Nodo(ConsCJS.ID_ID);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id1),new Nodo(ConsCJS.ID,id2));
                :}
                | ID:id1 PAR_IZQ PAR_DER PUNTO ID:id2{:
                    RESULT = new Nodo(ConsCJS.FUN_ID);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id1),new Nodo(ConsCJS.ID,id2));
                :}
                | ID:id1 PAR_IZQ LE:le PAR_DER PUNTO ID:id2{:
                    RESULT = new Nodo(ConsCJS.FUN_ID2);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id1),new Nodo(ConsCJS.ID,id2),le);
                :}
                | ID:id PAR_IZQ PAR_DER PUNTO SET:set{:
                    RESULT = new Nodo(ConsCJS.FUN_SET);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id),set);
                :}
                | ID:id PAR_IZQ PAR_DER PUNTO OBS:obs{:
                    RESULT = new Nodo(ConsCJS.FUN_OBS);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id),obs);
                :}
                | ID:id PAR_IZQ LE:le PAR_DER PUNTO SET:set{:
                    RESULT = new Nodo(ConsCJS.FUN_SET2);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id),set);
                :}
                | ID:id PAR_IZQ LE:le PAR_DER PUNTO OBS:obs{:
                    RESULT = new Nodo(ConsCJS.FUN_ID2);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id),obs);
                :}
                | ID:id PUNTO SET:set{:
                    RESULT = new Nodo(ConsCJS.ID_SET);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(set);
                :}
                | ID:id PUNTO OBS:obs{:
                    RESULT = new Nodo(ConsCJS.ID_OBS);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(obs);
                :}
                | ID:id PUNTO ATEXTO PAR_IZQ PAR_DER{:
                    RESULT = new Nodo(ConsCJS.ATEXTO);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(new Nodo(ConsCJS.ATEXTO));
                :}
                | ID:id PAR_IZQ PAR_DER{:
                    RESULT = new Nodo(ConsCJS.LLAM);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id));
                :}
                | ID:id PAR_IZQ LE:le PAR_DER{:
                    RESULT = new Nodo(ConsCJS.LLAM_P);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id),le);
                    
                :}
;

SET         ::=   SETELEMENTO PAR_IZQ LE:le PAR_DER{:
                    RESULT = new Nodo(ConsCJS.SET);
                    RESULT.addHijo(le);
                :}
;
                
OBS         ::=   OBSERVADOR PAR_IZQ LE:e COMA FUNCION PAR_IZQ PAR_DER LLA_IZQ L_SEN:l_sen LLA_DER PAR_DER{:
                    RESULT = new Nodo(ConsCJS.OBS);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                :}
                | OBSERVADOR PAR_IZQ LE:le PAR_DER{:
                    RESULT = new Nodo(ConsCJS.OBS);
                    RESULT.addHijo(le);
                :}
;

FUN         ::=   FUNCION ID:id PAR_IZQ LID:lid PAR_DER LLA_IZQ L_SEN:l_sen LLA_DER{:
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(lid);
                    RESULT.addHijo(l_sen);
                :}
                |FUNCION ID:id PAR_IZQ LID:lid PAR_DER LLA_IZQ LLA_DER{:
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(lid);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                :}
                | FUNCION ID:id PAR_IZQ PAR_DER LLA_IZQ L_SEN:l_sen LLA_DER{:
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(l_sen);
                :}
                | FUNCION ID:id PAR_IZQ PAR_DER LLA_IZQ LLA_DER{:
                    RESULT = new Nodo(ConsCJS.FUN);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                :}
;

L_SEN       ::=   L_SEN:l_sen SEN:sen{:
                    RESULT = l_sen;
                    RESULT.addHijo(sen);
                :}
                | SEN:sen{:
                    RESULT = new Nodo(ConsCJS.L_SEN);
                    RESULT.addHijo(sen);
                :}
;

SEN         ::=   IF:si {:
                    RESULT = si;
                :}
                | SWITCH:sw{:
                    RESULT = sw;
                :}
                | DEC:dec PUNTO_COMA{:
                    RESULT = dec;
                :}
                | ASIG:asig PUNTO_COMA{:
                    RESULT = asig;
                :}
                | LLAMADA:llam PUNTO_COMA{:
                    RESULT = llam;
                :}
                | FOR:para{:
                    RESULT = para;
                :}
                | DETENER PUNTO_COMA{:
                    RESULT = new Nodo(ConsCJS.DET);
                :}
                | SOUT:sout PUNTO_COMA{:
                    RESULT = sout;
                :}
                | RET:ret{:
                    RESULT = ret;
                :}
                | WHILE:wh{:
                    RESULT = wh;
                :}
                | MESSAGE:ms PUNTO_COMA{:
                    RESULT = ms;
                :}
                |error:error PUNTO_COMA {::}
;

IF          ::=   SI PAR_IZQ E:e PAR_DER LLA_IZQ L_SEN:l_sen LLA_DER{:
                    RESULT = new Nodo(ConsCJS.IF);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                :}
                | SI PAR_IZQ E:e PAR_DER LLA_IZQ L_SEN:l_sen LLA_DER SINO LLA_IZQ L_SEN:l_sen2 LLA_DER{:
                    RESULT = new Nodo(ConsCJS.IF_ELSE);
                    RESULT.addHijo(l_sen);
                    RESULT.addHijo(l_sen2);
                :}
;

SWITCH      ::= SELECCIONAR PAR_IZQ E:e PAR_DER LLA_IZQ LCASO:lcaso LLA_DER{:
                    RESULT = new Nodo(ConsCJS.SWT);
                    RESULT.addHijo(e);
                    RESULT.addHijo(lcaso);
                :}
;

LCASO       ::=   LCASO:lcaso CAS:cas{:
                    RESULT = lcaso;
                    RESULT.addHijo(cas);
                :}
                | CAS:cas{:
                    RESULT = new Nodo(ConsCJS.LCASO);
                    RESULT.addHijo(cas);
                :}
;

CAS         ::=   CASO E:e DOS_PUNTOS L_SEN:l_sen{:
                    RESULT = new Nodo(ConsCJS.CASO);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                :}
                | DEFECTO DOS_PUNTOS L_SEN:l_sen{:
                    RESULT = new Nodo(ConsCJS.DEF);
                    RESULT.addHijo(l_sen);
                :}
                | CASO E:e DOS_PUNTOS {:
                    RESULT = new Nodo(ConsCJS.DEF);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                :}
                | DEFECTO DOS_PUNTOS{:
                    RESULT = new Nodo(ConsCJS.DEF);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                :}
;

SOUT        ::= IMPRIMIR PAR_IZQ E:e PAR_DER{:
                    RESULT = new Nodo(ConsCJS.SOUT);
                    RESULT.addHijo(e);
                :}
;

RET         ::= RETORNAR E:e PUNTO_COMA{:
                    RESULT = new Nodo(ConsCJS.RET);
                    RESULT.addHijo(e);
                :}
;

WHILE       ::= MIENTRAS PAR_IZQ E:e PAR_DER LLA_IZQ L_SEN:l_sen LLA_DER{:
                    RESULT = new Nodo(ConsCJS.WHILE);
                    RESULT.addHijo(e);
                    RESULT.addHijo(l_sen);
                :}
                |MIENTRAS PAR_IZQ E:e PAR_DER LLA_IZQ LLA_DER{:
                    RESULT = new Nodo(ConsCJS.WHILE);
                    RESULT.addHijo(e);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                :}
;

FOR        ::= PARA PAR_IZQ ID:id DOS_PUNTOS E:e1 PUNTO_COMA E:e2 PUNTO_COMA OP:op PAR_DER LLA_IZQ L_SEN:l_sen LLA_DER{:
                    RESULT = new Nodo(ConsCJS.FOR);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                    RESULT.addHijo(op);
                    RESULT.addHijo(l_sen);
                :}
                |PARA PAR_IZQ ID:id DOS_PUNTOS E:e1 PUNTO_COMA E:e2 PUNTO_COMA OP:op PAR_DER LLA_IZQ LLA_DER{:
                    RESULT = new Nodo(ConsCJS.FOR);
                    RESULT.addHijo(ConsCJS.ID,id);
                    RESULT.addHijo(e1);
                    RESULT.addHijo(e2);
                    RESULT.addHijo(op);
                    RESULT.addHijo(new Nodo(ConsCJS.L_SEN));
                :}
;

OP         ::=    INCREMENTO:in {:
                    RESULT = new Nodo(ConsCJS.OP,in);
                :}
                | DECREMENTO:dec{:
                    RESULT = new Nodo(ConsCJS.OP,dec);
                :}
;

ARREGLO     ::= LLA_IZQ LE:le LLA_DER{:
                    RESULT = new Nodo(ConsCJS.ARR);
                    RESULT.addHijo(le);
                :}
;

MESSAGE     ::=   MENSAJE PAR_IZQ E:e PAR_DER{:
                    RESULT = new Nodo(ConsCJS.MSG);
                    RESULT.addHijo(e);
                :}
;

E           ::=   E:e1 AND E:e2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.AND);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                :}
                | E:e1 OR E:e2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.OR);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                :}
                | NOT E:e{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.NOT);
                    n.addHijo(e);
                    RESULT.addHijo(n);
                :}
                |   E:er1 IGUAL E:er2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.IGUAL);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                :}
                | E:er1 DIFERENTE E:er2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.DIFERENTE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                :}
                | E:er1 MAYORQUE E:er2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MAYORQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                :}
                | E:er1 MENORQUE E:er2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENORQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                :}
                | E:er1 MAYORIGUALQUE E:er2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MAYORIGUALQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                :}
                | E:er1 MENORIGUALQUE E:er2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENORIGUALQUE);
                    n.addHijo(er1,er2);
                    RESULT.addHijo(n);
                :}
                | E:ea1 MAS E:ea2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MAS);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                :}
                | E:ea1 MENOS E:ea2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENOS);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                :}
                | E:ea1 MULT E:ea2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MULT);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                :}
                | E:ea1 DIV E:ea2{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.DIV);
                    n.addHijo(ea1,ea2);
                    RESULT.addHijo(n);
                :}
                | E:ea INCREMENTO{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.INCREMENTO);
                    RESULT.addHijo(ea,n);
                :}
                | E:ea DECREMENTO{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.DECREMENTO);
                    RESULT.addHijo(ea,n);
                :}
                | MENOS E:ea{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo n = new Nodo(ConsCJS.MENOS);
                    RESULT.addHijo(n,ea);
                :}
                | N:n {:
                    RESULT = n;
                :}
                |  NUMERICO:num {:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.numero,num);
                :}
                | CADENA:cad {:
                    RESULT = new Nodo(ConsCJS.E);
                    cad = cad.substring(1,cad.length()-1);
                    RESULT.addHijo(ConsCJS.cadena,cad);
                :}
                | DATE:date{:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.fecha,date);
                :}
                | DATE_T:date_t{:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.fecha_hora,date_t);
                :}
                | FALSE {:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.booleano,"false");
                :}
                | TRUE{:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(ConsCJS.booleano,"true");
                :}
                | LLAMADA:llamada {:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(llamada);
                :}
                | ID:id {:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(new Nodo(ConsCJS.ID,id));
                :}
                | ID:id LLA_IZQ E:e LLA_DER{:
                    RESULT = new Nodo(ConsCJS.E);
                    Nodo h = new Nodo(ConsCJS.POS_ARRE);
                    h.addHijo(new Nodo(ConsCJS.ID,id),e);
                    RESULT.addHijo(h);
                :}
                | PAR_IZQ E:e PAR_DER{:
                    RESULT = e;
                :}
                | ARREGLO:a{:
                    RESULT = new Nodo(ConsCJS.E);
                    RESULT.addHijo(a);
                :}
;