/* The following code was generated by JFlex 1.6.1 */
package GeneradorCJS;

import java_cup.runtime.Symbol;
import InterpreteCSJ.Expresiones.Auxiliar;

//Scanner para generar C3D
/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>src/GeneradorCJS/LexicoCJS.flex</tt>
 */
public class scannerCJS implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\3\1\2\1\61\1\3\1\1\22\0\1\3\1\14\1\33"
            + "\2\0\1\12\1\17\1\4\1\21\1\22\1\6\1\7\1\27\1\10"
            + "\1\25\1\5\2\32\2\32\6\32\1\30\1\26\1\16\1\13\1\15"
            + "\2\0\1\43\1\56\1\51\1\54\1\37\1\47\2\31\1\36\1\60"
            + "\1\31\1\50\1\34\1\40\1\52\1\53\1\31\1\42\1\45\1\41"
            + "\1\46\1\55\1\31\1\57\2\31\3\0\1\11\1\31\1\0\1\43"
            + "\1\56\1\51\1\54\1\37\1\47\2\31\1\36\1\60\1\31\1\50"
            + "\1\34\1\40\1\52\1\53\1\31\1\42\1\45\1\41\1\46\1\55"
            + "\1\31\1\57\2\31\1\23\1\20\1\24\7\0\1\61\252\0\2\35"
            + "\115\0\1\44\u1ea8\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"
            + "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\2\1"
            + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"
            + "\1\25\1\26\1\1\1\25\1\1\3\25\1\1\6\25"
            + "\1\0\2\27\2\0\1\30\1\31\1\32\1\33\1\34"
            + "\1\35\1\36\1\37\2\0\1\40\3\0\2\25\1\0"
            + "\3\25\1\41\1\0\1\41\6\25\1\0\3\25\1\0"
            + "\2\27\2\0\1\26\3\0\2\25\1\0\3\25\3\0"
            + "\4\25\1\0\3\25\1\0\2\25\1\0\4\25\3\0"
            + "\1\27\4\0\1\25\1\0\1\25\1\0\3\25\1\42"
            + "\2\0\1\42\3\25\2\43\2\25\1\0\1\25\1\44"
            + "\2\45\3\25\3\0\1\25\1\0\1\25\1\0\3\25"
            + "\2\0\2\25\1\0\3\25\1\0\4\25\1\46\2\0"
            + "\1\25\1\0\1\25\1\0\2\25\1\47\2\0\2\25"
            + "\1\0\1\25\1\50\1\25\1\0\4\25\1\51\1\0"
            + "\1\25\2\52\1\0\2\25\2\0\2\25\2\53\1\54"
            + "\1\0\1\25\1\55\1\56\1\25\2\57\2\60\1\61"
            + "\2\0\2\25\1\0\2\25\2\0\2\25\1\0\1\25"
            + "\1\62\1\0\1\63\1\25\1\63\2\64\2\65";

    private static int[] zzUnpackAction() {
        int[] result = new int[239];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\62\0\62\0\62\0\144\0\226\0\62\0\310"
            + "\0\372\0\62\0\62\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4"
            + "\0\u0226\0\62\0\62\0\62\0\62\0\62\0\62\0\62"
            + "\0\62\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384"
            + "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514"
            + "\0\u0546\0\u0578\0\62\0\u05aa\0\u05dc\0\62\0\62\0\62"
            + "\0\62\0\62\0\62\0\62\0\62\0\u060e\0\u0640\0\62"
            + "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"
            + "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"
            + "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"
            + "\0\u0b22\0\u0b54\0\u0b86\0\u060e\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"
            + "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"
            + "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"
            + "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe"
            + "\0\u1130\0\u0b22\0\u1162\0\u0546\0\u1194\0\u11c6\0\u11f8\0\u122a"
            + "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\62"
            + "\0\u13ba\0\u13ec\0\u0258\0\u141e\0\u1450\0\u1482\0\62\0\u0258"
            + "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u0258\0\62\0\u0258\0\u157c"
            + "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"
            + "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"
            + "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"
            + "\0\u1a5e\0\62\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a"
            + "\0\u1bbc\0\u1bee\0\u0258\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"
            + "\0\u1d1a\0\u0258\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46"
            + "\0\62\0\u1e78\0\u1eaa\0\62\0\u0258\0\u1edc\0\u1f0e\0\u1f40"
            + "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\62\0\u0258\0\u0258\0\u203a"
            + "\0\u206c\0\u0258\0\u0258\0\u209e\0\62\0\u0258\0\62\0\u0258"
            + "\0\u0258\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc"
            + "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u0258\0\u235a"
            + "\0\62\0\u238c\0\u0258\0\62\0\u0258\0\62\0\u0258";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[239];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"
            + "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"
            + "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"
            + "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\3\32"
            + "\1\40\1\41\1\42\1\43\1\32\1\44\1\32\1\45"
            + "\1\46\1\47\1\50\4\32\63\0\1\51\1\52\1\53"
            + "\2\51\1\54\54\51\6\0\1\55\62\0\1\56\62\0"
            + "\1\57\64\0\1\60\61\0\1\61\61\0\1\62\61\0"
            + "\1\63\65\0\1\64\62\0\1\65\72\0\2\32\1\0"
            + "\1\32\1\0\6\32\1\0\14\32\26\0\1\66\4\0"
            + "\1\33\27\0\33\67\1\70\5\67\1\71\5\67\1\72"
            + "\12\67\31\0\2\32\1\0\1\32\1\73\1\74\1\75"
            + "\4\32\1\0\14\32\35\0\1\76\56\0\2\32\1\0"
            + "\1\77\1\0\6\32\1\0\14\32\32\0\2\32\1\0"
            + "\1\32\1\0\1\32\1\100\4\32\1\0\14\32\32\0"
            + "\2\32\1\0\1\32\1\0\3\32\1\101\2\32\1\0"
            + "\14\32\36\0\2\102\1\103\53\0\2\32\1\0\1\32"
            + "\1\102\1\104\1\105\4\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\6\32\1\0\1\32\1\106\12\32"
            + "\32\0\2\32\1\0\1\32\1\0\5\32\1\107\1\0"
            + "\5\32\1\110\6\32\32\0\2\32\1\0\1\32\1\0"
            + "\6\32\1\0\11\32\1\111\2\32\32\0\2\32\1\0"
            + "\1\32\1\0\5\32\1\112\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\113\1\114\1\115\4\32\1\0\5\32"
            + "\1\116\6\32\1\0\1\51\1\52\1\53\57\51\2\0"
            + "\1\53\57\0\1\117\1\120\1\121\2\117\1\122\54\117"
            + "\6\0\1\123\105\0\1\124\27\0\33\67\1\70\61\67"
            + "\1\70\6\67\1\125\52\67\1\70\7\67\1\126\16\67"
            + "\37\0\1\127\53\0\2\32\1\0\1\32\1\0\1\32"
            + "\1\130\4\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\2\32\1\131\3\32\1\0\14\32\54\0\1\132"
            + "\37\0\2\32\1\0\1\32\1\0\6\32\1\0\6\32"
            + "\1\133\5\32\32\0\2\32\1\0\1\32\1\0\3\32"
            + "\1\134\2\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\1\32\1\135\4\32\1\0\14\32\41\0\1\136"
            + "\62\0\1\137\6\0\1\140\42\0\2\32\1\0\1\32"
            + "\1\0\2\32\1\141\3\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\3\32\1\142\2\32\1\0\3\32"
            + "\1\143\10\32\32\0\2\32\1\0\1\32\1\0\2\32"
            + "\1\144\3\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\6\32\1\145\1\146\13\32\32\0\2\32\1\0"
            + "\1\32\1\0\2\32\1\147\3\32\1\0\14\32\32\0"
            + "\2\32\1\0\1\32\1\0\3\32\1\150\2\32\1\151"
            + "\1\152\13\32\32\0\2\32\1\0\1\32\1\0\4\32"
            + "\1\153\1\32\1\0\14\32\35\0\1\154\56\0\2\32"
            + "\1\0\1\155\1\0\6\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\3\32\1\156\2\32\1\0\2\32"
            + "\1\157\11\32\32\0\2\32\1\0\1\32\1\0\6\32"
            + "\1\0\4\32\1\160\7\32\1\0\1\117\1\120\1\121"
            + "\2\117\1\161\54\117\2\162\1\121\2\162\1\163\61\162"
            + "\1\163\54\162\1\51\1\52\1\53\1\51\1\164\1\122"
            + "\54\51\6\123\1\165\53\123\33\67\1\70\12\67\1\166"
            + "\46\67\1\70\14\67\1\167\11\67\40\0\1\170\52\0"
            + "\2\32\1\0\1\32\1\0\2\32\1\171\3\32\1\0"
            + "\14\32\32\0\2\32\1\0\1\32\1\0\6\32\1\172"
            + "\1\173\13\32\43\0\1\174\50\0\2\32\1\0\1\32"
            + "\1\0\4\32\1\175\1\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\6\32\1\0\5\32\1\176\6\32"
            + "\32\0\2\32\1\0\1\32\1\0\6\32\1\0\12\32"
            + "\1\177\1\32\53\0\1\200\46\0\1\201\61\0\1\202"
            + "\53\0\2\32\1\0\1\32\1\0\6\32\1\0\5\32"
            + "\1\203\6\32\32\0\2\32\1\0\1\32\1\0\1\32"
            + "\1\204\4\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\1\32\1\205\4\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\6\32\1\0\4\32\1\206\7\32"
            + "\53\0\1\207\40\0\2\32\1\0\1\32\1\0\6\32"
            + "\1\0\5\32\1\210\6\32\32\0\2\32\1\0\1\32"
            + "\1\0\3\32\1\211\2\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\1\32\1\212\4\32\1\0\14\32"
            + "\40\0\1\213\53\0\2\32\1\0\1\32\1\0\1\32"
            + "\1\214\4\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\5\32\1\215\1\0\14\32\56\0\1\216\35\0"
            + "\2\32\1\0\1\32\1\0\6\32\1\0\10\32\1\217"
            + "\3\32\32\0\2\32\1\0\1\32\1\0\1\32\1\220"
            + "\4\32\1\0\14\32\32\0\2\32\1\0\1\32\1\0"
            + "\1\32\1\221\4\32\1\0\14\32\32\0\2\32\1\0"
            + "\1\32\1\0\6\32\1\0\1\32\1\222\12\32\1\0"
            + "\1\117\1\120\1\121\1\117\1\164\1\161\54\117\4\162"
            + "\1\53\1\163\54\162\5\123\1\53\1\165\53\123\33\67"
            + "\1\70\3\67\1\223\55\67\1\70\10\67\2\224\14\67"
            + "\41\0\1\225\51\0\2\32\1\0\1\32\1\0\3\32"
            + "\1\226\2\32\1\0\14\32\44\0\1\227\47\0\2\32"
            + "\1\0\1\32\1\0\5\32\1\230\1\0\14\32\36\0"
            + "\2\231\54\0\2\32\1\0\1\32\1\231\1\232\5\32"
            + "\1\0\14\32\32\0\2\32\1\0\1\32\1\0\4\32"
            + "\1\233\1\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\3\32\1\234\2\32\1\0\14\32\51\0\1\235"
            + "\62\0\1\236\41\0\2\32\1\0\1\32\1\0\6\32"
            + "\1\0\3\32\1\237\10\32\32\0\2\32\1\0\1\32"
            + "\1\0\6\32\1\0\4\32\1\240\7\32\32\0\2\32"
            + "\1\0\1\32\1\241\1\242\5\32\1\0\14\32\32\0"
            + "\2\32\1\0\1\32\1\0\1\32\1\243\4\32\1\0"
            + "\14\32\32\0\2\32\1\0\1\32\1\0\2\32\1\244"
            + "\3\32\1\0\14\32\43\0\1\245\50\0\2\32\1\0"
            + "\1\32\1\0\4\32\1\246\1\32\1\0\14\32\32\0"
            + "\2\32\1\0\1\32\1\0\2\32\1\247\3\32\1\0"
            + "\14\32\32\0\2\32\1\0\1\32\1\0\6\32\1\0"
            + "\4\32\1\250\7\32\32\0\2\32\1\0\1\251\1\0"
            + "\6\32\1\0\14\32\1\0\33\67\1\252\61\67\1\70"
            + "\3\67\1\253\22\67\42\0\1\254\50\0\2\32\1\0"
            + "\1\32\1\0\4\32\1\255\1\32\1\0\14\32\61\0"
            + "\1\256\32\0\2\32\1\0\1\32\1\0\6\32\1\0"
            + "\13\32\1\257\35\0\1\260\56\0\2\32\1\0\1\261"
            + "\1\0\6\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\2\32\1\262\3\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\6\32\1\0\5\32\1\263\6\32"
            + "\40\0\1\264\73\0\1\265\41\0\2\32\1\0\1\32"
            + "\1\0\1\32\1\266\4\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\6\32\1\0\4\32\1\267\7\32"
            + "\53\0\1\270\40\0\2\32\1\0\1\32\1\0\6\32"
            + "\1\0\5\32\1\271\6\32\32\0\2\32\1\0\1\32"
            + "\1\0\6\32\1\0\5\32\1\272\6\32\32\0\2\32"
            + "\1\0\1\32\1\0\1\32\1\273\4\32\1\0\14\32"
            + "\56\0\1\274\35\0\2\32\1\0\1\32\1\0\6\32"
            + "\1\0\10\32\1\275\3\32\32\0\2\32\1\0\1\32"
            + "\1\0\1\32\1\276\4\32\1\0\14\32\32\0\2\32"
            + "\1\0\1\32\1\0\3\32\1\277\2\32\1\0\14\32"
            + "\32\0\2\32\1\0\1\32\1\0\1\32\1\300\4\32"
            + "\1\0\14\32\1\0\33\67\1\301\26\67\43\0\1\302"
            + "\47\0\2\32\1\0\1\32\1\0\5\32\1\303\1\0"
            + "\14\32\40\0\1\304\53\0\2\32\1\0\1\32\1\0"
            + "\1\32\1\305\4\32\1\0\14\32\36\0\2\306\54\0"
            + "\2\32\1\0\1\32\1\306\1\307\5\32\1\0\14\32"
            + "\32\0\2\32\1\0\1\32\1\0\5\32\1\310\1\0"
            + "\14\32\35\0\1\311\62\0\2\312\54\0\2\32\1\0"
            + "\1\313\1\0\6\32\1\0\14\32\32\0\2\32\1\0"
            + "\1\32\1\312\1\314\5\32\1\0\14\32\41\0\1\315"
            + "\52\0\2\32\1\0\1\32\1\0\2\32\1\316\3\32"
            + "\1\0\14\32\32\0\2\32\1\0\1\32\1\0\4\32"
            + "\1\317\1\32\1\0\14\32\44\0\1\320\47\0\2\32"
            + "\1\0\1\32\1\0\5\32\1\321\1\0\14\32\32\0"
            + "\2\32\1\0\1\32\1\0\4\32\1\322\1\32\1\0"
            + "\14\32\32\0\2\32\1\0\1\32\1\0\6\32\1\0"
            + "\5\32\1\323\6\32\32\0\2\32\1\0\1\32\1\0"
            + "\2\32\1\324\3\32\1\0\14\32\45\0\2\325\45\0"
            + "\2\32\1\0\1\32\1\0\6\32\1\325\1\326\13\32"
            + "\43\0\1\327\50\0\2\32\1\0\1\32\1\0\4\32"
            + "\1\330\1\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\4\32\1\331\1\32\1\0\14\32\40\0\1\332"
            + "\74\0\1\333\40\0\2\32\1\0\1\32\1\0\1\32"
            + "\1\334\4\32\1\0\14\32\32\0\2\32\1\0\1\32"
            + "\1\0\6\32\1\0\5\32\1\335\6\32\55\0\1\336"
            + "\36\0\2\32\1\0\1\32\1\0\6\32\1\0\7\32"
            + "\1\337\4\32\32\0\2\32\1\0\1\32\1\0\3\32"
            + "\1\340\2\32\1\0\14\32\41\0\1\341\61\0\1\342"
            + "\52\0\2\32\1\0\1\32\1\0\2\32\1\343\3\32"
            + "\1\0\14\32\32\0\2\32\1\0\1\32\1\0\2\32"
            + "\1\344\3\32\1\0\14\32\53\0\1\345\40\0\2\32"
            + "\1\0\1\32\1\0\6\32\1\0\5\32\1\346\6\32"
            + "\32\0\2\32\1\0\1\32\1\0\6\32\1\0\5\32"
            + "\1\347\6\32\42\0\1\350\63\0\1\351\47\0\2\32"
            + "\1\0\1\32\1\0\3\32\1\352\2\32\1\0\14\32"
            + "\32\0\2\32\1\0\1\32\1\0\5\32\1\353\1\0"
            + "\14\32\43\0\1\354\50\0\2\32\1\0\1\32\1\0"
            + "\4\32\1\355\1\32\1\0\14\32\53\0\1\356\40\0"
            + "\2\32\1\0\1\32\1\0\6\32\1\0\5\32\1\357"
            + "\6\32\1\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[9150];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\1\0\3\11\2\1\1\11\2\1\2\11\6\1\10\11"
            + "\17\1\1\0\1\1\1\11\2\0\10\11\2\0\1\11"
            + "\3\0\2\1\1\0\4\1\1\0\7\1\1\0\3\1"
            + "\1\0\2\1\2\0\1\1\3\0\2\1\1\0\3\1"
            + "\3\0\4\1\1\0\3\1\1\0\2\1\1\0\4\1"
            + "\3\0\1\1\4\0\1\1\1\0\1\1\1\0\3\1"
            + "\1\11\2\0\4\1\1\11\3\1\1\0\2\1\1\11"
            + "\4\1\3\0\1\1\1\0\1\1\1\0\3\1\2\0"
            + "\2\1\1\0\3\1\1\0\4\1\1\11\2\0\1\1"
            + "\1\0\1\1\1\0\3\1\2\0\2\1\1\0\3\1"
            + "\1\0\4\1\1\11\1\0\1\1\1\11\1\1\1\0"
            + "\2\1\2\0\2\1\1\11\2\1\1\0\4\1\1\11"
            + "\1\1\1\11\2\1\2\0\2\1\1\0\2\1\2\0"
            + "\2\1\1\0\2\1\1\0\1\11\2\1\1\11\1\1"
            + "\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[239];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    //Código de usuario
    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public scannerCJS(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 224) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return new java_cup.runtime.Symbol(symCJS.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        String errLex = "Error léxico, caracter irreconocible: '" + yytext() + "' en la línea: " + (yyline + 1) + " y columna: " + yycolumn;
                        System.err.println(errLex);
                    }
                    case 54:
                        break;
                    case 2: {
                        /*Espacios en blanco, ignorados*/
                    }
                    case 55:
                        break;
                    case 3: {
                        /*Saltos de linea, ignorados*/
                    }
                    case 56:
                        break;
                    case 4: {
                        return new Symbol(symCJS.DIV, yyline, yycolumn, yytext());
                    }
                    case 57:
                        break;
                    case 5: {
                        return new Symbol(symCJS.MULT, yyline, yycolumn, yytext());
                    }
                    case 58:
                        break;
                    case 6: {
                        return new Symbol(symCJS.MAS, yyline, yycolumn, yytext());
                    }
                    case 59:
                        break;
                    case 7: {
                        return new Symbol(symCJS.MENOS, yyline, yycolumn, yytext());
                    }
                    case 60:
                        break;
                    case 8: {
                        return new Symbol(symCJS.POT, yyline, yycolumn, yytext());
                    }
                    case 61:
                        break;
                    case 9: {
                        return new Symbol(symCJS.MOD, yyline, yycolumn, yytext());
                    }
                    case 62:
                        break;
                    case 10: {
                        return new Symbol(symCJS.NOT, yyline, yycolumn, yytext());
                    }
                    case 63:
                        break;
                    case 11: {
                        return new Symbol(symCJS.MAYORQUE, yyline, yycolumn, yytext());
                    }
                    case 64:
                        break;
                    case 12: {
                        return new Symbol(symCJS.MENORQUE, yyline, yycolumn, yytext());
                    }
                    case 65:
                        break;
                    case 13: {
                        return new Symbol(symCJS.PAR_IZQ, yyline, yycolumn, yytext());
                    }
                    case 66:
                        break;
                    case 14: {
                        return new Symbol(symCJS.PAR_DER, yyline, yycolumn, yytext());
                    }
                    case 67:
                        break;
                    case 15: {
                        return new Symbol(symCJS.LLA_IZQ, yyline, yycolumn, yytext());
                    }
                    case 68:
                        break;
                    case 16: {
                        return new Symbol(symCJS.LLA_DER, yyline, yycolumn, yytext());
                    }
                    case 69:
                        break;
                    case 17: {
                        return new Symbol(symCJS.PUNTO, yyline, yycolumn, yytext());
                    }
                    case 70:
                        break;
                    case 18: {
                        return new Symbol(symCJS.PUNTO_COMA, yyline, yycolumn, yytext());
                    }
                    case 71:
                        break;
                    case 19: {
                        return new Symbol(symCJS.COMA, yyline, yycolumn, yytext());
                    }
                    case 72:
                        break;
                    case 20: {
                        return new Symbol(symCJS.DOS_PUNTOS, yyline, yycolumn, yytext());
                    }
                    case 73:
                        break;
                    case 21: {
                        return new Symbol(symCJS.ID, yyline, yycolumn, yytext());
                    }
                    case 74:
                        break;
                    case 22: {
                        return new Symbol(symCJS.NUMERICO, yyline, yycolumn, yytext());
                    }
                    case 75:
                        break;
                    case 23: {
                        /*Comentarios Ignorados*/
                    }
                    case 76:
                        break;
                    case 24: {
                        return new Symbol(symCJS.INCREMENTO, yyline, yycolumn, yytext());
                    }
                    case 77:
                        break;
                    case 25: {
                        return new Symbol(symCJS.DECREMENTO, yyline, yycolumn, yytext());
                    }
                    case 78:
                        break;
                    case 26: {
                        return new Symbol(symCJS.IGUAL, yyline, yycolumn, yytext());
                    }
                    case 79:
                        break;
                    case 27: {
                        return new Symbol(symCJS.DIFERENTE, yyline, yycolumn, yytext());
                    }
                    case 80:
                        break;
                    case 28: {
                        return new Symbol(symCJS.MAYORIGUALQUE, yyline, yycolumn, yytext());
                    }
                    case 81:
                        break;
                    case 29: {
                        return new Symbol(symCJS.MENORIGUALQUE, yyline, yycolumn, yytext());
                    }
                    case 82:
                        break;
                    case 30: {
                        return new Symbol(symCJS.AND, yyline, yycolumn, yytext());
                    }
                    case 83:
                        break;
                    case 31: {
                        return new Symbol(symCJS.OR, yyline, yycolumn, yytext());
                    }
                    case 84:
                        break;
                    case 32: {
                        String cad = yytext().substring(1, yytext().length() - 1);

                        if (Auxiliar.esDateT(cad)) {
                            return new Symbol(symCJS.DATE_T, yyline, yycolumn, cad);
                        }
                        if (Auxiliar.esDate(cad)) {
                            return new Symbol(symCJS.DATE, yyline, yycolumn, cad);
                        }
                        return new Symbol(symCJS.CADENA, yyline, yycolumn, cad);
                    }
                    case 85:
                        break;
                    case 33: {
                        return new Symbol(symCJS.SI, yyline, yycolumn, yytext());
                    }
                    case 86:
                        break;
                    case 34: {
                        return new Symbol(symCJS.SINO, yyline, yycolumn, yytext());
                    }
                    case 87:
                        break;
                    case 35: {
                        return new Symbol(symCJS.CASO, yyline, yycolumn, yytext());
                    }
                    case 88:
                        break;
                    case 36: {
                        return new Symbol(symCJS.PARA, yyline, yycolumn, yytext());
                    }
                    case 89:
                        break;
                    case 37: {
                        return new Symbol(symCJS.DIMV, yyline, yycolumn, yytext());
                    }
                    case 90:
                        break;
                    case 38: {
                        return new Symbol(symCJS.TRUE, yyline, yycolumn, yytext().substring(1, yytext().length() - 1));
                    }
                    case 91:
                        break;
                    case 39: {
                        return new Symbol(symCJS.ATEXTO, yyline, yycolumn, yytext());
                    }
                    case 92:
                        break;
                    case 40: {
                        return new Symbol(symCJS.CONTEO, yyline, yycolumn, yytext());
                    }
                    case 93:
                        break;
                    case 41: {
                        return new Symbol(symCJS.FALSE, yyline, yycolumn, yytext().substring(1, yytext().length() - 1));
                    }
                    case 94:
                        break;
                    case 42: {
                        return new Symbol(symCJS.MENSAJE, yyline, yycolumn, yytext());
                    }
                    case 95:
                        break;
                    case 43: {
                        return new Symbol(symCJS.FUNCION, yyline, yycolumn, yytext());
                    }
                    case 96:
                        break;
                    case 44: {
                        return new Symbol(symCJS.OBTENER, yyline, yycolumn, yytext());
                    }
                    case 97:
                        break;
                    case 45: {
                        return new Symbol(symCJS.DETENER, yyline, yycolumn, yytext());
                    }
                    case 98:
                        break;
                    case 46: {
                        return new Symbol(symCJS.DEFECTO, yyline, yycolumn, yytext());
                    }
                    case 99:
                        break;
                    case 47: {
                        return new Symbol(symCJS.MIENTRAS, yyline, yycolumn, yytext());
                    }
                    case 100:
                        break;
                    case 48: {
                        return new Symbol(symCJS.IMPRIMIR, yyline, yycolumn, yytext());
                    }
                    case 101:
                        break;
                    case 49: {
                        return new Symbol(symCJS.RETORNAR, yyline, yycolumn, yytext());
                    }
                    case 102:
                        break;
                    case 50: {
                        return new Symbol(symCJS.DOCUMENTO, yyline, yycolumn, yytext());
                    }
                    case 103:
                        break;
                    case 51: {
                        return new Symbol(symCJS.SELECCIONAR, yyline, yycolumn, yytext());
                    }
                    case 104:
                        break;
                    case 52: {
                        return new Symbol(symCJS.OBSERVADOR, yyline, yycolumn, yytext());
                    }
                    case 105:
                        break;
                    case 53: {
                        return new Symbol(symCJS.SETELEMENTO, yyline, yycolumn, yytext());
                    }
                    case 106:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
