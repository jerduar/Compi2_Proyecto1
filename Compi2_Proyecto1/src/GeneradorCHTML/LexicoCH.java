/* The following code was generated by JFlex 1.6.1 */

package GeneradorCHTML;
import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/GeneradorCHTML/LexicoCHTML.flex</tt>
 */
public class LexicoCH implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int MULTI = 4;
  public static final int CADENA_MEDIO = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  8, 45,  7,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6,  9, 10,  9,  9,  9,  9,  0, 14, 15,  9,  9, 16, 13,  2, 11, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 17, 12, 18,  5,  9, 
     0, 29, 30, 19, 32, 28, 24, 41, 20, 26, 34, 43, 23, 22, 27, 33, 
    39,  3, 38, 36, 21, 37, 44,  3, 40,  3, 31,  0,  0,  0,  9,  4, 
     0, 29, 30, 19, 32, 28, 24, 41, 20, 26, 34, 43, 23, 22, 27, 33, 
    39,  3, 38, 36, 21, 37, 44,  3, 40,  3, 31,  9,  9,  9,  0,  0, 
     0,  0,  0,  0,  0, 45,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\0\1\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\3\3\1\0"+
    "\5\3\1\0\5\3\1\14\1\15\2\16\1\17\1\20"+
    "\1\0\1\3\3\21\1\0\1\22\1\23\1\0\2\3"+
    "\1\24\2\3\1\25\2\3\1\0\3\3\1\0\2\3"+
    "\1\0\1\26\1\3\1\26\5\3\2\0\6\3\1\0"+
    "\1\1\4\0\2\3\1\0\2\3\2\27\1\3\1\0"+
    "\3\3\2\0\3\3\1\0\4\3\1\0\4\3\2\0"+
    "\6\3\1\0\1\21\1\30\2\31\1\3\1\0\1\3"+
    "\1\32\1\3\1\0\3\3\2\0\2\3\1\0\3\3"+
    "\1\33\1\0\3\3\1\0\1\3\2\0\2\3\1\34"+
    "\3\3\1\35\1\36\2\37\2\3\1\0\1\3\1\40"+
    "\1\41\1\42\11\0\1\42\1\43\1\0\3\3\1\0"+
    "\1\3\1\44\1\45\1\0\1\3\2\0\2\3\1\46"+
    "\1\47\1\50\1\3\1\51\2\52\1\3\2\0\1\53"+
    "\1\0\1\54\14\0\2\55\1\3\1\56\1\0\1\3"+
    "\2\57\2\0\2\3\1\60\3\0\1\61\14\0\1\3"+
    "\1\0\1\3\1\0\2\62\1\3\1\63\1\0\1\64"+
    "\14\0\1\3\2\65\1\0\1\3\1\66\3\0\1\67"+
    "\1\70\1\71\3\0\1\72\2\0\1\73\1\3\1\74"+
    "\1\75\1\0\1\76\1\77\1\0\1\100\1\0\1\101"+
    "\1\102\1\0\1\103\1\0\1\104\1\0\1\105\4\0"+
    "\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\346\0\346\0\346\0\346"+
    "\0\346\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c"+
    "\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac"+
    "\0\u0170\0\u0170\0\u0170\0\u04da\0\u0170\0\u0170\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\u0170\0\u0142\0\u0170\0\346\0\u05c0\0\u05ee"+
    "\0\u061c\0\u0114\0\u064a\0\u0678\0\u0114\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0170"+
    "\0\u0872\0\u0114\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0508\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0170\0\u0114\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc"+
    "\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c"+
    "\0\u11ca\0\u0b52\0\u0170\0\u0170\0\u0114\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u0114\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u0114\0\u16d2\0\u1700\0\u172e\0\u0170\0\u0114\0\u0170"+
    "\0\u0114\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u0114\0\u0170"+
    "\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984"+
    "\0\u19b2\0\u0114\0\u0114\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98"+
    "\0\u1ac6\0\u0114\0\u0114\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac"+
    "\0\u1bda\0\u0114\0\u0114\0\u0114\0\u1c08\0\u0114\0\u0170\0\u0114"+
    "\0\u1c36\0\u1c64\0\u1c92\0\u0170\0\u1cc0\0\u0170\0\u1cee\0\u1d1c"+
    "\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c"+
    "\0\u1eba\0\u1ee8\0\u0170\0\u0114\0\u1f16\0\u0114\0\u1f44\0\u1f72"+
    "\0\u0170\0\u0114\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u0114\0\u2058"+
    "\0\u2086\0\u20b4\0\u0170\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a"+
    "\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a"+
    "\0\u2338\0\u2366\0\u2394\0\u0170\0\u0114\0\u23c2\0\u0170\0\u23f0"+
    "\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560"+
    "\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u0170\0\u0114"+
    "\0\u26a2\0\u26d0\0\u0170\0\u26fe\0\u272c\0\u275a\0\u2788\0\u0170"+
    "\0\u0170\0\u27b6\0\u27e4\0\u2812\0\u0170\0\u2840\0\u286e\0\u0170"+
    "\0\u289c\0\u0170\0\u0114\0\u28ca\0\u0170\0\u0170\0\u28f8\0\u0170"+
    "\0\u2926\0\u0170\0\u0170\0\u2954\0\u0114\0\u2982\0\u0170\0\u29b0"+
    "\0\u0170\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u0170\0\u0170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\5\1\6\1\7\1\6\1\10\3\11\1\6"+
    "\1\12\1\13\1\14\1\6\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\7\1\23\2\7\1\24\1\25\1\26"+
    "\1\7\1\27\1\30\1\31\2\7\1\32\1\7\1\33"+
    "\1\34\1\7\1\35\1\36\1\7\1\37\1\0\1\7"+
    "\1\40\1\0\10\41\1\42\45\41\7\43\2\11\4\43"+
    "\1\44\37\43\1\0\7\45\2\11\3\45\1\46\40\45"+
    "\2\0\1\5\1\47\55\0\1\6\1\0\1\6\4\0"+
    "\1\6\1\0\1\6\1\0\6\6\34\0\1\50\1\0"+
    "\2\7\16\0\6\7\1\0\11\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\51\1\52\1\53\1\52\1\0\3\54"+
    "\1\52\1\0\1\52\1\0\6\52\6\53\1\0\11\53"+
    "\1\0\6\53\1\0\2\53\57\0\12\12\1\55\43\12"+
    "\2\0\1\6\1\0\1\6\4\0\1\6\1\0\1\56"+
    "\1\0\6\6\46\0\1\57\43\0\1\50\1\0\2\7"+
    "\16\0\1\60\1\61\1\62\1\7\1\63\1\7\1\0"+
    "\3\7\1\64\1\65\3\7\1\66\1\0\1\7\1\67"+
    "\4\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\70\1\71\1\7\1\72\1\73\5\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\74\1\75\6\7\1\76\1\7\1\0\6\7"+
    "\1\0\2\7\27\0\1\77\11\0\1\100\16\0\1\50"+
    "\1\0\2\7\16\0\3\7\1\101\2\7\1\0\6\7"+
    "\1\102\2\7\1\0\6\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\1\7\1\103\7\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\4\7\1\104\1\7\1\0\1\7\1\105\7\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\7\7\1\106\1\7\1\0\6\7"+
    "\1\0\2\7\2\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\11\7\1\0\3\7\1\107\2\7\1\0\2\7"+
    "\36\0\1\110\11\0\1\111\7\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\3\7\1\112\5\7\1\0\3\7"+
    "\1\113\2\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\11\7\1\0\1\7\1\114\4\7"+
    "\1\0\2\7\2\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\3\7\1\115\5\7\1\0\6\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\6\7\1\0\11\7"+
    "\1\0\2\7\1\116\3\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\3\7\1\117\5\7"+
    "\1\0\6\7\1\0\2\7\14\0\1\120\43\0\1\121"+
    "\55\0\1\50\1\122\2\7\16\0\6\7\1\0\11\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\51\1\123\55\0"+
    "\1\52\1\0\1\52\4\0\1\52\1\0\1\52\1\0"+
    "\6\52\46\0\1\124\43\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\11\7\1\125\1\126\5\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\2\7\1\127\3\7"+
    "\1\0\11\7\1\0\6\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\130\1\131\10\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\10\7\1\132\1\0\6\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\6\7\1\0\11\7"+
    "\1\133\1\134\5\7\1\0\2\7\2\0\1\50\1\0"+
    "\2\7\16\0\6\7\1\0\2\7\1\135\6\7\1\0"+
    "\6\7\1\0\2\7\26\0\1\136\31\0\1\50\1\0"+
    "\2\7\16\0\2\7\1\137\3\7\1\0\11\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\11\7\1\0\4\7\1\140\1\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\4\7\1\141\4\7\1\0\6\7\1\0\2\7\30\0"+
    "\1\142\3\0\1\143\23\0\1\50\1\0\2\7\16\0"+
    "\4\7\1\144\1\7\1\0\1\7\1\145\7\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\1\7\1\146\7\7\1\0\6\7\1\0"+
    "\2\7\36\0\1\147\21\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\3\7\1\150\5\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\1\151\3\7"+
    "\1\152\1\7\1\0\11\7\1\0\6\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\2\7\1\153\3\7"+
    "\1\154\1\155\10\7\1\0\6\7\1\0\2\7\2\0"+
    "\1\50\1\0\2\7\16\0\1\156\5\7\1\0\11\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\2\7\1\157\3\7\1\0\11\7\1\0\6\7"+
    "\1\0\2\7\2\0\1\50\1\0\2\7\16\0\1\160"+
    "\5\7\1\0\11\7\1\0\6\7\1\0\2\7\30\0"+
    "\1\161\57\0\2\162\24\0\1\50\1\0\2\7\16\0"+
    "\4\7\1\163\1\7\1\0\11\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\6\7\1\162"+
    "\1\164\10\7\1\0\6\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\2\7\1\165\3\7\1\0\11\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\1\7\1\166\7\7\1\0\6\7"+
    "\1\0\2\7\2\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\11\7\1\0\1\7\1\167\4\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\4\7\1\170\1\7"+
    "\1\0\11\7\1\0\6\7\1\0\2\7\14\0\1\171"+
    "\43\0\1\7\55\0\1\172\71\0\1\173\103\0\2\174"+
    "\12\0\1\50\1\0\2\7\16\0\6\7\1\0\11\7"+
    "\1\174\1\175\5\7\1\0\2\7\2\0\1\50\1\0"+
    "\2\7\16\0\3\7\1\176\2\7\1\0\11\7\1\0"+
    "\6\7\1\0\2\7\24\0\1\177\33\0\1\50\1\0"+
    "\2\7\16\0\1\200\5\7\1\0\11\7\1\0\6\7"+
    "\1\0\2\7\2\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\3\7\1\201\5\7\1\0\6\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\6\7\1\0\11\7"+
    "\1\0\2\7\1\202\3\7\1\0\2\7\46\0\1\203"+
    "\11\0\1\50\1\0\2\7\16\0\6\7\1\0\11\7"+
    "\1\0\1\7\1\204\4\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\2\7\1\205\3\7\1\0\11\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\4\7\1\206\1\7\1\0\11\7\1\0\6\7"+
    "\1\0\2\7\5\0\1\207\66\0\1\210\41\0\1\50"+
    "\1\0\1\7\1\211\16\0\6\7\1\0\11\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\10\0"+
    "\1\210\5\0\6\7\1\0\11\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\6\7\1\212\2\7\1\0\6\7\1\0\2\7\52\0"+
    "\1\213\5\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\11\7\1\0\5\7\1\214\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\3\7\1\215\5\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\3\7\1\216\5\7\1\0\6\7"+
    "\1\0\2\7\2\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\7\7\1\217\1\7\1\0\6\7\1\0\2\7"+
    "\34\0\1\220\23\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\1\7\1\221\7\7\1\0\6\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\1\7\1\222\4\7"+
    "\1\0\11\7\1\0\6\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\7\7\1\223\1\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\224\1\225\10\7\1\0\6\7\1\0"+
    "\2\7\26\0\1\226\63\0\1\227\23\0\1\50\1\0"+
    "\2\7\16\0\2\7\1\230\3\7\1\0\11\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\1\7\1\231\7\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\3\7\1\232\5\7\1\0\6\7\1\0\2\7\2\0"+
    "\1\50\1\0\2\7\16\0\6\7\1\0\2\7\1\233"+
    "\6\7\1\0\6\7\1\0\2\7\2\0\1\50\1\0"+
    "\2\7\16\0\6\7\1\0\11\7\1\0\3\7\1\234"+
    "\2\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\7\7\1\235\1\7\1\0\6\7\1\0"+
    "\2\7\6\0\1\236\51\0\1\50\1\0\2\7\16\0"+
    "\4\7\1\237\1\7\1\0\11\7\1\0\6\7\1\0"+
    "\2\7\53\0\2\240\3\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\11\7\1\0\6\7\1\240\1\241\1\7"+
    "\2\0\1\50\1\0\1\7\1\242\16\0\6\7\1\0"+
    "\11\7\1\0\6\7\1\0\2\7\2\0\1\50\1\0"+
    "\2\7\16\0\6\7\1\0\11\7\1\0\3\7\1\243"+
    "\2\7\1\0\2\7\30\0\1\244\27\0\1\50\1\0"+
    "\2\7\16\0\4\7\1\245\1\7\1\0\11\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\7\7\1\246\1\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\3\7\1\247\5\7\1\0\6\7\1\0\2\7\26\0"+
    "\1\250\53\0\1\251\1\0\1\252\2\0\1\253\2\254"+
    "\1\0\1\255\1\0\1\256\2\0\1\257\1\0\2\260"+
    "\2\0\1\261\7\0\1\50\1\0\2\7\16\0\2\7"+
    "\1\262\3\7\1\0\11\7\1\0\6\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\6\7\1\0\7\7"+
    "\1\263\1\7\1\0\6\7\1\0\2\7\35\0\1\264"+
    "\22\0\1\50\1\0\2\7\16\0\6\7\1\0\2\7"+
    "\1\265\6\7\1\0\6\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\4\7\1\266\4\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\1\267\5\7\1\0\11\7\1\0\6\7\1\0"+
    "\2\7\35\0\1\270\22\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\2\7\1\271\6\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\7\7\1\272\1\7\1\0\6\7\1\0\2\7\2\0"+
    "\1\50\1\0\2\7\16\0\6\7\1\0\1\7\1\273"+
    "\7\7\1\0\6\7\1\0\2\7\42\0\1\274\15\0"+
    "\1\50\1\0\2\7\16\0\6\7\1\0\7\7\1\275"+
    "\1\7\1\0\6\7\1\0\2\7\42\0\1\276\47\0"+
    "\1\277\23\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\7\7\1\300\1\7\1\0\6\7\1\0\2\7\2\0"+
    "\1\50\1\0\2\7\16\0\6\7\1\0\1\7\1\301"+
    "\7\7\1\0\6\7\1\0\2\7\2\0\1\50\1\0"+
    "\2\7\16\0\4\7\1\302\1\7\1\0\11\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\2\7\16\0"+
    "\6\7\1\0\7\7\1\303\1\7\1\0\6\7\1\0"+
    "\2\7\2\0\1\50\1\0\2\7\16\0\6\7\1\0"+
    "\11\7\1\0\2\7\1\304\3\7\1\0\2\7\2\0"+
    "\1\50\1\0\2\7\16\0\2\7\1\305\3\7\1\0"+
    "\11\7\1\0\6\7\1\0\2\7\2\0\1\50\1\0"+
    "\2\7\16\0\6\7\1\0\7\7\1\306\1\7\1\0"+
    "\6\7\1\0\2\7\42\0\1\307\15\0\1\50\1\0"+
    "\2\7\16\0\6\7\1\0\7\7\1\310\1\7\1\0"+
    "\6\7\1\0\2\7\2\0\1\50\1\0\1\7\1\311"+
    "\16\0\6\7\1\0\11\7\1\0\6\7\1\0\2\7"+
    "\24\0\1\312\1\313\1\314\7\0\1\315\1\316\3\0"+
    "\1\317\2\0\1\320\41\0\2\321\1\0\1\322\1\323"+
    "\51\0\2\324\51\0\1\325\62\0\1\326\63\0\1\327"+
    "\63\0\1\330\55\0\1\331\43\0\1\332\53\0\1\333"+
    "\23\0\1\50\1\0\2\7\16\0\6\7\1\0\1\7"+
    "\1\334\7\7\1\0\6\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\2\7\1\335\6\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\2\7\1\336\6\7\1\0\6\7"+
    "\1\0\2\7\36\0\1\337\21\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\3\7\1\340\5\7\1\0\6\7"+
    "\1\0\2\7\34\0\1\341\23\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\1\7\1\342\7\7\1\0\6\7"+
    "\1\0\2\7\16\0\1\343\74\0\1\344\22\0\1\50"+
    "\1\0\2\7\10\0\1\343\5\0\6\7\1\0\11\7"+
    "\1\0\6\7\1\0\2\7\2\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\2\7\1\345\6\7\1\0\6\7"+
    "\1\0\2\7\2\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\2\7\1\346\6\7\1\0\6\7\1\0\2\7"+
    "\2\0\1\50\1\0\2\7\16\0\6\7\1\0\3\7"+
    "\1\347\5\7\1\0\6\7\1\0\2\7\44\0\2\350"+
    "\36\0\1\351\72\0\1\352\56\0\2\353\45\0\1\354"+
    "\46\0\1\355\100\0\1\356\43\0\1\357\46\0\1\360"+
    "\63\0\1\361\43\0\1\362\3\0\1\363\53\0\1\364"+
    "\53\0\1\365\63\0\2\366\56\0\1\367\23\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\5\7\1\370\3\7"+
    "\1\0\6\7\1\0\2\7\41\0\1\371\16\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\6\7\1\372\2\7"+
    "\1\0\6\7\1\0\2\7\31\0\1\373\73\0\1\374"+
    "\10\0\1\50\1\0\2\7\16\0\6\7\1\0\11\7"+
    "\1\0\2\7\1\375\3\7\1\0\2\7\2\0\1\50"+
    "\1\0\2\7\16\0\6\7\1\0\11\7\1\0\4\7"+
    "\1\376\1\7\1\0\2\7\44\0\2\377\37\0\1\u0100"+
    "\64\0\1\u0101\66\0\1\u0102\54\0\1\u0103\35\0\1\u0104"+
    "\57\0\1\u0105\32\0\1\u0106\122\0\1\u0107\41\0\1\u0108"+
    "\55\0\1\u0109\61\0\1\u010a\45\0\2\u010b\56\0\1\u010c"+
    "\56\0\1\u010d\22\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\3\7\1\u010e\5\7\1\0\6\7\1\0\2\7"+
    "\42\0\1\u010f\15\0\1\50\1\0\2\7\16\0\6\7"+
    "\1\0\7\7\1\u0110\1\7\1\0\6\7\1\0\2\7"+
    "\32\0\2\u0111\24\0\1\50\1\0\2\7\16\0\2\7"+
    "\1\u0112\3\7\1\0\11\7\1\0\6\7\1\0\2\7"+
    "\30\0\1\u0113\32\0\1\u0114\120\0\1\u0115\35\0\1\u0116"+
    "\67\0\1\u0117\51\0\1\u0118\45\0\1\u0119\64\0\1\u011a"+
    "\57\0\1\u011b\42\0\1\u011c\65\0\1\u011d\63\0\1\u011e"+
    "\47\0\1\u011f\51\0\1\u0120\27\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\6\7\1\u0121\2\7\1\0\6\7"+
    "\1\0\2\7\34\0\1\u0122\23\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\7\7\1\u0123\1\7\1\0\6\7"+
    "\1\0\2\7\26\0\1\u0124\71\0\1\u0125\55\0\1\u0126"+
    "\20\0\1\u0127\104\0\1\u0128\56\0\1\u0129\55\0\1\u012a"+
    "\54\0\1\u012b\56\0\1\u012c\22\0\1\50\1\0\2\7"+
    "\16\0\6\7\1\0\7\7\1\u012d\1\7\1\0\6\7"+
    "\1\0\2\7\35\0\1\u012e\56\0\1\u012f\57\0\1\u0130"+
    "\64\0\1\u0131\57\0\1\u0132\42\0\1\u0133\45\0\1\u0134"+
    "\70\0\1\u0135\56\0\1\u0136\55\0\1\u0137\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10902];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\4\1\1\11\1\0\12\1\1\0\5\1\1\0"+
    "\5\1\3\11\1\1\2\11\1\0\3\1\1\11\1\0"+
    "\1\11\1\1\1\0\10\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\11\7\1\2\0\6\1\1\0\1\1\4\0"+
    "\2\1\1\0\2\1\1\11\2\1\1\0\3\1\2\0"+
    "\3\1\1\0\4\1\1\0\4\1\2\0\6\1\1\0"+
    "\1\1\2\11\2\1\1\0\3\1\1\0\3\1\2\0"+
    "\2\1\1\0\4\1\1\0\3\1\1\0\1\1\2\0"+
    "\6\1\1\11\1\1\1\11\3\1\1\0\3\1\1\11"+
    "\11\0\2\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\2\0\7\1\1\11\2\1\2\0\1\11\1\0\1\11"+
    "\14\0\1\11\3\1\1\0\1\1\1\11\1\1\2\0"+
    "\3\1\3\0\1\11\14\0\1\1\1\0\1\1\1\0"+
    "\1\11\2\1\1\11\1\0\1\1\14\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\3\0\1\1\2\11\3\0"+
    "\1\11\2\0\1\11\1\1\1\11\1\1\1\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\1\1\0\1\11"+
    "\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String buffer_cadena = "";
public String comentario = "";
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoCH(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symCH.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(symCH.numero, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 2: 
            { return new Symbol(symCH.otro_simb, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 3: 
            { return new Symbol(symCH.identificador, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 4: 
            { return new Symbol(symCH.mayor, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 5: 
            { /*Se ignora*/
            }
          case 76: break;
          case 6: 
            { return new Symbol(symCH.menor, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 7: 
            { return new Symbol(symCH.pr_parA, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 8: 
            { return new Symbol(symCH.pr_parC, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 9: 
            { return new Symbol(symCH.coma, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 10: 
            { return new Symbol(symCH.p_coma, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 11: 
            { return new Symbol(symCH.igual, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 12: 
            { comentario += yytext();
            }
          case 83: break;
          case 13: 
            { comentario = "";yybegin(YYINITIAL);
            }
          case 84: break;
          case 14: 
            { comentario+= yytext();
            }
          case 85: break;
          case 15: 
            { buffer_cadena += yytext();
            }
          case 86: break;
          case 16: 
            { String cadena = buffer_cadena; 
                                buffer_cadena = ""; 
                                yybegin(YYINITIAL);
                                return new Symbol(symCH.cadena2, yycolumn, yyline, cadena);
            }
          case 87: break;
          case 17: 
            { buffer_cadena = yytext();yybegin(CADENA_MEDIO);
            }
          case 88: break;
          case 18: 
            { return new Symbol(symCH.cadena, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 19: 
            { yybegin(COMENTARIO);
            }
          case 90: break;
          case 20: 
            { return new Symbol(symCH.pr_ct, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 21: 
            { return new Symbol(symCH.pr_cb, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 22: 
            { return new Symbol(symCH.pr_id, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 23: 
            { return new Symbol(symCH.pr_cjs, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 24: 
            { yybegin(MULTI);
            }
          case 95: break;
          case 25: 
            { return new Symbol(symCH.pr_ccss, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 26: 
            { return new Symbol(symCH.pr_caja, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 27: 
            { return new Symbol(symCH.pr_alto, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 28: 
            { return new Symbol(symCH.pr_ruta, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 29: 
            { comentario ="";
                                yybegin(YYINITIAL);
            }
          case 100: break;
          case 30: 
            { return new Symbol(symCH.pr_chtml, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 31: 
            { return new Symbol(symCH.pr_click, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 32: 
            { return new Symbol(symCH.pr_texto, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 33: 
            { return new Symbol(symCH.pr_tabla, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 34: 
            { return new Symbol(symCH.pr_fil_t, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 35: 
            { return new Symbol(symCH.pr_fondo, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 36: 
            { return new Symbol(symCH.pr_ancho, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 37: 
            { return new Symbol(symCH.pr_boton, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 38: 
            { return new Symbol(symCH.pr_panel, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 39: 
            { return new Symbol(symCH.pr_grupo, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 40: 
            { return new Symbol(symCH.pr_valor, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 41: 
            { return new Symbol(symCH.pr_cuerpo, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 42: 
            { return new Symbol(symCH.pr_titulo, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 43: 
            { return new Symbol(symCH.pr_finct, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 44: 
            { return new Symbol(symCH.pr_fincb, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 45: 
            { return new Symbol(symCH.pr_imagen, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 46: 
            { return new Symbol(symCH.pr_enlace, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 47: 
            { return new Symbol(symCH.pr_opcion, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 48: 
            { return new Symbol(symCH.pr_texto_a, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 49: 
            { return new Symbol(symCH.pr_fincjs, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 50: 
            { return new Symbol(symCH.pr_spinner, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 51: 
            { return new Symbol(symCH.pr_finccss, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 52: 
            { return new Symbol(symCH.pr_fincaja, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 53: 
            { return new Symbol(symCH.pr_alineado, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 54: 
            { return new Symbol(symCH.pr_finchtml, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 55: 
            { return new Symbol(symCH.pr_fintexto, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 56: 
            { return new Symbol(symCH.pr_fintabla, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 57: 
            { return new Symbol(symCH.pr_finfil_t, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 58: 
            { return new Symbol(symCH.pr_finboton, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 59: 
            { return new Symbol(symCH.pr_finpanel, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 60: 
            { return new Symbol(symCH.pr_salto, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 61: 
            { return new Symbol(symCH.pr_caja_texto, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 62: 
            { return new Symbol(symCH.pr_fincuerpo, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 63: 
            { return new Symbol(symCH.pr_fintitulo, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 64: 
            { return new Symbol(symCH.pr_finimagen, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 65: 
            { return new Symbol(symCH.pr_finenlace, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 66: 
            { return new Symbol(symCH.pr_finopcion, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 67: 
            { return new Symbol(symCH.pr_encabezado, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 68: 
            { return new Symbol(symCH.pr_fintexto_a, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 69: 
            { return new Symbol(symCH.pr_finspinner, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 70: 
            { return new Symbol(symCH.pr_fincaja_texto, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 71: 
            { return new Symbol(symCH.pr_finencabezado, yycolumn, yyline, yytext());
            }
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
