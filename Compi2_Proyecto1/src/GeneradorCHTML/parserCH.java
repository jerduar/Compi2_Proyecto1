
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 22 16:33:31 CST 2018
//----------------------------------------------------

package GeneradorCHTML;

import AST.Nodo;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 22 16:33:31 CST 2018
  */
public class parserCH extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCH() {super();}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\020\004\000\002\021\011\000\002\017\011" +
    "\000\002\017\015\000\002\004\004\000\002\004\003\000" +
    "\002\006\007\000\002\006\013\000\002\006\013\000\002" +
    "\006\014\000\002\006\010\000\002\006\014\000\002\005" +
    "\004\000\002\005\003\000\002\007\013\000\002\007\011" +
    "\000\002\007\012\000\002\007\010\000\002\007\011\000" +
    "\002\007\012\000\002\007\010\000\002\007\007\000\002" +
    "\007\011\000\002\007\012\000\002\007\007\000\002\007" +
    "\010\000\002\007\011\000\002\007\012\000\002\007\007" +
    "\000\002\007\010\000\002\007\011\000\002\007\012\000" +
    "\002\007\007\000\002\007\010\000\002\007\013\000\002" +
    "\007\013\000\002\007\014\000\002\007\011\000\002\007" +
    "\010\000\002\007\007\000\002\007\011\000\002\007\012" +
    "\000\002\007\007\000\002\007\010\000\002\007\013\000" +
    "\002\007\011\000\002\007\011\000\002\007\012\000\002" +
    "\007\007\000\002\007\010\000\002\007\005\000\002\023" +
    "\004\000\002\023\003\000\002\022\014\000\002\022\013" +
    "\000\002\010\005\000\002\010\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\015\004\000\002\015\003\000\002" +
    "\026\013\000\002\026\011\000\002\026\010\000\002\014" +
    "\004\000\002\014\003\000\002\016\013\000\002\016\011" +
    "\000\002\016\012\000\002\016\011\000\002\016\007\000" +
    "\002\016\010\000\002\016\011\000\002\016\010\000\002" +
    "\016\007\000\002\016\011\000\002\016\012\000\002\016" +
    "\013\000\002\024\011\000\002\024\012\000\002\024\007" +
    "\000\002\024\010\000\002\024\011\000\002\024\012\000" +
    "\002\024\007\000\002\024\010\000\002\025\003\000\002" +
    "\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\004\005\005\001\002\000\004\002\000\001" +
    "\002\000\004\010\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\005\014\001\002\000\004\005\071\001\002\000\004" +
    "\005\066\001\002\000\004\011\015\001\002\000\004\006" +
    "\016\001\002\000\004\005\021\001\002\000\004\005\ufff9" +
    "\001\002\000\004\005\063\001\002\000\010\012\024\013" +
    "\023\014\022\001\002\000\006\006\053\075\054\001\002" +
    "\000\004\040\040\001\002\000\004\040\025\001\002\000" +
    "\004\007\026\001\002\000\004\074\027\001\002\000\004" +
    "\004\030\001\002\000\006\006\031\075\032\001\002\000" +
    "\004\005\035\001\002\000\004\050\033\001\002\000\004" +
    "\006\034\001\002\000\004\005\ufff6\001\002\000\004\050" +
    "\036\001\002\000\004\006\037\001\002\000\004\005\ufff3" +
    "\001\002\000\004\007\041\001\002\000\004\074\042\001" +
    "\002\000\004\004\043\001\002\000\006\006\044\075\045" +
    "\001\002\000\004\005\050\001\002\000\004\051\046\001" +
    "\002\000\004\006\047\001\002\000\004\005\ufff7\001\002" +
    "\000\004\051\051\001\002\000\004\006\052\001\002\000" +
    "\004\005\ufff5\001\002\000\004\005\057\001\002\000\004" +
    "\052\055\001\002\000\004\006\056\001\002\000\004\005" +
    "\ufff8\001\002\000\004\052\060\001\002\000\004\006\061" +
    "\001\002\000\004\005\ufff4\001\002\000\004\005\ufffa\001" +
    "\002\000\012\012\024\013\023\014\022\047\064\001\002" +
    "\000\004\006\065\001\002\000\004\005\ufffd\001\002\000" +
    "\004\046\067\001\002\000\004\006\070\001\002\000\004" +
    "\002\uffff\001\002\000\004\015\073\001\002\000\004\005" +
    "\ufffe\001\002\000\006\006\075\020\074\001\002\000\004" +
    "\007\u0193\001\002\000\004\005\100\001\002\000\004\005" +
    "\u0190\001\002\000\004\005\ufff1\001\002\000\030\016\101" +
    "\017\105\021\110\022\112\023\106\024\107\025\102\032" +
    "\103\033\104\035\111\036\113\001\002\000\020\006\u017e" +
    "\037\177\041\167\042\176\043\200\044\171\045\175\001" +
    "\002\000\022\006\u0102\037\177\041\167\042\176\043\200" +
    "\044\171\045\175\075\u0103\001\002\000\022\006\362\037" +
    "\177\041\167\042\176\043\200\044\171\045\175\075\363" +
    "\001\002\000\022\006\327\037\126\040\115\041\116\042" +
    "\125\043\127\044\120\045\124\001\002\000\022\006\307" +
    "\037\177\041\167\042\176\043\200\044\171\045\175\075" +
    "\310\001\002\000\024\006\267\037\126\040\115\041\116" +
    "\042\125\043\127\044\120\045\124\075\270\001\002\000" +
    "\004\040\253\001\002\000\022\006\234\037\177\041\167" +
    "\042\176\043\200\044\171\045\175\075\235\001\002\000" +
    "\022\006\173\037\177\041\167\042\176\043\200\044\171" +
    "\045\175\075\174\001\002\000\024\006\122\037\126\040" +
    "\115\041\116\042\125\043\127\044\120\045\124\075\123" +
    "\001\002\000\004\006\114\001\002\000\004\005\uffcc\001" +
    "\002\000\004\007\165\001\002\000\004\007\163\001\002" +
    "\000\004\004\152\001\002\000\004\007\150\001\002\000" +
    "\004\004\uffc4\001\002\000\004\005\145\001\002\000\004" +
    "\057\143\001\002\000\004\007\141\001\002\000\004\007" +
    "\137\001\002\000\004\007\135\001\002\000\004\007\130" +
    "\001\002\000\010\072\131\073\132\074\133\001\002\000" +
    "\004\004\uff9a\001\002\000\004\004\uff99\001\002\000\004" +
    "\004\uff9b\001\002\000\004\004\uffb9\001\002\000\010\072" +
    "\131\073\132\074\133\001\002\000\004\004\uffbd\001\002" +
    "\000\010\072\131\073\132\074\133\001\002\000\004\004" +
    "\uffba\001\002\000\010\072\131\073\132\074\133\001\002" +
    "\000\004\004\uffb7\001\002\000\004\006\144\001\002\000" +
    "\004\005\uffe2\001\002\000\004\057\146\001\002\000\004" +
    "\006\147\001\002\000\004\005\uffe1\001\002\000\010\072" +
    "\131\073\132\074\133\001\002\000\004\004\uffb8\001\002" +
    "\000\024\006\154\037\126\040\115\041\116\042\125\043" +
    "\127\044\120\045\124\075\155\001\002\000\004\004\uffc5" +
    "\001\002\000\004\005\160\001\002\000\004\057\156\001" +
    "\002\000\004\006\157\001\002\000\004\005\uffe4\001\002" +
    "\000\004\057\161\001\002\000\004\006\162\001\002\000" +
    "\004\005\uffe3\001\002\000\010\072\131\073\132\074\133" +
    "\001\002\000\004\004\uffbb\001\002\000\010\072\131\073" +
    "\132\074\133\001\002\000\004\004\uffbc\001\002\000\004" +
    "\007\231\001\002\000\004\004\uffc6\001\002\000\004\007" +
    "\227\001\002\000\004\004\216\001\002\000\004\005\213" +
    "\001\002\000\004\071\211\001\002\000\004\007\207\001" +
    "\002\000\004\007\205\001\002\000\004\007\203\001\002" +
    "\000\004\007\201\001\002\000\010\072\131\073\132\074" +
    "\133\001\002\000\004\004\uffc0\001\002\000\010\072\131" +
    "\073\132\074\133\001\002\000\004\004\uffc3\001\002\000" +
    "\010\072\131\073\132\074\133\001\002\000\004\004\uffc1" +
    "\001\002\000\010\072\131\073\132\074\133\001\002\000" +
    "\004\004\uffbe\001\002\000\004\006\212\001\002\000\004" +
    "\005\uffce\001\002\000\004\071\214\001\002\000\004\006" +
    "\215\001\002\000\004\005\uffcd\001\002\000\022\006\220" +
    "\037\177\041\167\042\176\043\200\044\171\045\175\075" +
    "\221\001\002\000\004\004\uffc7\001\002\000\004\005\224" +
    "\001\002\000\004\071\222\001\002\000\004\006\223\001" +
    "\002\000\004\005\uffd0\001\002\000\004\071\225\001\002" +
    "\000\004\006\226\001\002\000\004\005\uffcf\001\002\000" +
    "\010\072\131\073\132\074\133\001\002\000\004\004\uffbf" +
    "\001\002\000\010\072\131\073\132\074\133\001\002\000" +
    "\004\004\uffc2\001\002\000\004\004\243\001\002\000\004" +
    "\005\240\001\002\000\004\056\236\001\002\000\004\006" +
    "\237\001\002\000\004\005\uffe6\001\002\000\004\056\241" +
    "\001\002\000\004\006\242\001\002\000\004\005\uffe5\001" +
    "\002\000\022\006\244\037\177\041\167\042\176\043\200" +
    "\044\171\045\175\075\245\001\002\000\004\005\250\001" +
    "\002\000\004\056\246\001\002\000\004\006\247\001\002" +
    "\000\004\005\uffe8\001\002\000\004\056\251\001\002\000" +
    "\004\006\252\001\002\000\004\005\uffe7\001\002\000\004" +
    "\007\254\001\002\000\004\074\255\001\002\000\004\004" +
    "\256\001\002\000\006\006\257\075\260\001\002\000\004" +
    "\005\263\001\002\000\004\061\261\001\002\000\004\006" +
    "\262\001\002\000\004\005\uffdc\001\002\000\004\061\264" +
    "\001\002\000\004\006\265\001\002\000\004\005\uffda\001" +
    "\002\000\004\004\276\001\002\000\004\005\273\001\002" +
    "\000\004\060\271\001\002\000\004\006\272\001\002\000" +
    "\004\005\uffde\001\002\000\004\060\274\001\002\000\004" +
    "\006\275\001\002\000\004\005\uffdd\001\002\000\024\006" +
    "\277\037\126\040\115\041\116\042\125\043\127\044\120" +
    "\045\124\075\300\001\002\000\004\005\303\001\002\000" +
    "\004\060\301\001\002\000\004\006\302\001\002\000\004" +
    "\005\uffe0\001\002\000\004\060\304\001\002\000\004\006" +
    "\305\001\002\000\004\005\uffdf\001\002\000\004\004\316" +
    "\001\002\000\004\005\313\001\002\000\004\055\311\001" +
    "\002\000\004\006\312\001\002\000\004\005\uffe9\001\002" +
    "\000\004\055\314\001\002\000\004\006\315\001\002\000" +
    "\004\005\uffea\001\002\000\022\006\317\037\177\041\167" +
    "\042\176\043\200\044\171\045\175\075\320\001\002\000" +
    "\004\005\323\001\002\000\004\055\321\001\002\000\004" +
    "\006\322\001\002\000\004\005\uffec\001\002\000\004\055" +
    "\324\001\002\000\004\006\325\001\002\000\004\005\uffeb" +
    "\001\002\000\004\004\353\001\002\000\004\005\332\001" +
    "\002\000\004\005\350\001\002\000\004\005\uffca\001\002" +
    "\000\004\034\333\001\002\000\004\031\334\001\002\000" +
    "\004\007\335\001\002\000\010\072\131\073\132\074\133" +
    "\001\002\000\004\004\337\001\002\000\006\006\340\075" +
    "\341\001\002\000\004\005\344\001\002\000\004\070\342" +
    "\001\002\000\004\006\343\001\002\000\004\005\uffc8\001" +
    "\002\000\004\070\345\001\002\000\004\006\346\001\002" +
    "\000\004\005\uffc9\001\002\000\004\005\uffcb\001\002\000" +
    "\006\034\333\067\351\001\002\000\004\006\352\001\002" +
    "\000\004\005\uffd1\001\002\000\022\006\354\037\126\040" +
    "\115\041\116\042\125\043\127\044\120\045\124\001\002" +
    "\000\004\005\332\001\002\000\004\005\356\001\002\000" +
    "\006\034\333\067\357\001\002\000\004\006\360\001\002" +
    "\000\004\005\uffd2\001\002\000\004\004\371\001\002\000" +
    "\004\005\366\001\002\000\004\066\364\001\002\000\004" +
    "\006\365\001\002\000\004\005\uffd4\001\002\000\004\066" +
    "\367\001\002\000\004\006\370\001\002\000\004\005\uffd3" +
    "\001\002\000\022\006\372\037\177\041\167\042\176\043" +
    "\200\044\171\045\175\075\373\001\002\000\004\005\376" +
    "\001\002\000\004\066\374\001\002\000\004\006\375\001" +
    "\002\000\004\005\uffd6\001\002\000\004\066\377\001\002" +
    "\000\004\006\u0100\001\002\000\004\005\uffd5\001\002\000" +
    "\004\004\u0176\001\002\000\004\005\u0107\001\002\000\004" +
    "\062\u0104\001\002\000\004\006\u0105\001\002\000\004\005" +
    "\uffd7\001\002\000\004\005\u0172\001\002\000\006\026\u0109" +
    "\062\u010a\001\002\000\004\005\uffb5\001\002\000\020\006" +
    "\u010d\037\177\041\167\042\176\043\200\044\171\045\175" +
    "\001\002\000\004\006\u010b\001\002\000\004\005\uffd8\001" +
    "\002\000\004\004\u016b\001\002\000\004\005\u010f\001\002" +
    "\000\004\005\u0167\001\002\000\010\027\u0112\030\u0113\063" +
    "\u0111\001\002\000\004\005\uffb0\001\002\000\004\006\u0166" +
    "\001\002\000\022\006\u014f\037\177\041\167\042\176\043" +
    "\200\044\171\045\175\075\u0150\001\002\000\022\006\u0115" +
    "\037\177\041\167\042\176\043\200\044\171\045\175\075" +
    "\u0116\001\002\000\004\004\u0142\001\002\000\004\005\u011a" +
    "\001\002\000\004\065\u0117\001\002\000\004\006\u0118\001" +
    "\002\000\004\005\uffa7\001\002\000\004\005\u013f\001\002" +
    "\000\010\022\u011d\023\u011b\065\u011c\001\002\000\024\006" +
    "\u0130\037\126\040\115\041\116\042\125\043\127\044\120" +
    "\045\124\075\u0131\001\002\000\004\006\u012e\001\002\000" +
    "\024\006\u011f\037\126\040\115\041\116\042\125\043\127" +
    "\044\120\045\124\075\u0120\001\002\000\004\004\u0126\001" +
    "\002\000\004\005\u0123\001\002\000\004\057\u0121\001\002" +
    "\000\004\006\u0122\001\002\000\004\005\uffa1\001\002\000" +
    "\004\057\u0124\001\002\000\004\006\u0125\001\002\000\004" +
    "\005\uffa0\001\002\000\024\006\u0127\037\126\040\115\041" +
    "\116\042\125\043\127\044\120\045\124\075\u0128\001\002" +
    "\000\004\005\u012b\001\002\000\004\057\u0129\001\002\000" +
    "\004\006\u012a\001\002\000\004\005\uffa3\001\002\000\004" +
    "\057\u012c\001\002\000\004\006\u012d\001\002\000\004\005" +
    "\uffa2\001\002\000\004\005\uffa8\001\002\000\004\004\u0137" +
    "\001\002\000\004\005\u0134\001\002\000\004\060\u0132\001" +
    "\002\000\004\006\u0133\001\002\000\004\005\uff9d\001\002" +
    "\000\004\060\u0135\001\002\000\004\006\u0136\001\002\000" +
    "\004\005\uff9c\001\002\000\024\006\u0138\037\126\040\115" +
    "\041\116\042\125\043\127\044\120\045\124\075\u0139\001" +
    "\002\000\004\005\u013c\001\002\000\004\060\u013a\001\002" +
    "\000\004\006\u013b\001\002\000\004\005\uff9f\001\002\000" +
    "\004\060\u013d\001\002\000\004\006\u013e\001\002\000\004" +
    "\005\uff9e\001\002\000\004\065\u0140\001\002\000\004\006" +
    "\u0141\001\002\000\004\005\uffa9\001\002\000\022\006\u0143" +
    "\037\177\041\167\042\176\043\200\044\171\045\175\075" +
    "\u0144\001\002\000\004\005\u0148\001\002\000\004\065\u0145" +
    "\001\002\000\004\006\u0146\001\002\000\004\005\uffa6\001" +
    "\002\000\004\005\u014b\001\002\000\010\022\u011d\023\u011b" +
    "\065\u0149\001\002\000\004\006\u014a\001\002\000\004\005" +
    "\uffa5\001\002\000\004\065\u014c\001\002\000\004\006\u014d" +
    "\001\002\000\004\005\uffa4\001\002\000\004\004\u015a\001" +
    "\002\000\004\005\u0154\001\002\000\004\064\u0151\001\002" +
    "\000\004\006\u0152\001\002\000\004\005\uffab\001\002\000" +
    "\004\005\u0157\001\002\000\010\022\u011d\023\u011b\064\u0155" +
    "\001\002\000\004\006\u0156\001\002\000\004\005\uffaa\001" +
    "\002\000\004\064\u0158\001\002\000\004\006\u0159\001\002" +
    "\000\004\005\uffac\001\002\000\022\006\u015b\037\177\041" +
    "\167\042\176\043\200\044\171\045\175\075\u015c\001\002" +
    "\000\004\005\u0160\001\002\000\004\064\u015d\001\002\000" +
    "\004\006\u015e\001\002\000\004\005\uffae\001\002\000\004" +
    "\005\u0163\001\002\000\010\022\u011d\023\u011b\064\u0161\001" +
    "\002\000\004\006\u0162\001\002\000\004\005\uffad\001\002" +
    "\000\004\064\u0164\001\002\000\004\006\u0165\001\002\000" +
    "\004\005\uffaf\001\002\000\004\005\uffb2\001\002\000\010" +
    "\027\u0112\030\u0113\063\u0169\001\002\000\004\005\uffb1\001" +
    "\002\000\004\006\u016a\001\002\000\004\005\uffb3\001\002" +
    "\000\020\006\u016c\037\177\041\167\042\176\043\200\044" +
    "\171\045\175\001\002\000\004\005\u016e\001\002\000\004" +
    "\005\u016f\001\002\000\006\027\u0112\030\u0113\001\002\000" +
    "\010\027\u0112\030\u0113\063\u0170\001\002\000\004\006\u0171" +
    "\001\002\000\004\005\uffb4\001\002\000\006\026\u0109\062" +
    "\u0174\001\002\000\004\005\uffb6\001\002\000\004\006\u0175" +
    "\001\002\000\004\005\uffd9\001\002\000\020\006\u0177\037" +
    "\177\041\167\042\176\043\200\044\171\045\175\001\002" +
    "\000\004\005\u0179\001\002\000\004\005\u017a\001\002\000" +
    "\004\026\u0109\001\002\000\006\026\u0109\062\u017b\001\002" +
    "\000\004\006\u017c\001\002\000\004\005\uffdb\001\002\000" +
    "\004\004\u0187\001\002\000\004\005\u0180\001\002\000\004" +
    "\005\u0184\001\002\000\032\016\101\017\105\021\110\022" +
    "\112\023\106\024\107\025\102\032\103\033\104\035\111" +
    "\036\113\054\u0181\001\002\000\004\006\u0182\001\002\000" +
    "\004\005\uffed\001\002\000\004\005\ufff2\001\002\000\032" +
    "\016\101\017\105\021\110\022\112\023\106\024\107\025" +
    "\102\032\103\033\104\035\111\036\113\054\u0185\001\002" +
    "\000\004\006\u0186\001\002\000\004\005\uffef\001\002\000" +
    "\020\006\u0188\037\177\041\167\042\176\043\200\044\171" +
    "\045\175\001\002\000\004\005\u018a\001\002\000\004\005" +
    "\u018d\001\002\000\032\016\101\017\105\021\110\022\112" +
    "\023\106\024\107\025\102\032\103\033\104\035\111\036" +
    "\113\054\u018b\001\002\000\004\006\u018c\001\002\000\004" +
    "\005\uffee\001\002\000\032\016\101\017\105\021\110\022" +
    "\112\023\106\024\107\025\102\032\103\033\104\035\111" +
    "\036\113\054\u018e\001\002\000\004\006\u018f\001\002\000" +
    "\004\005\ufff0\001\002\000\032\016\101\017\105\021\110" +
    "\022\112\023\106\024\107\025\102\032\103\033\104\035" +
    "\111\036\113\053\u0191\001\002\000\004\006\u0192\001\002" +
    "\000\004\005\ufffc\001\002\000\010\072\131\073\132\074" +
    "\133\001\002\000\004\004\u0195\001\002\000\004\006\u0196" +
    "\001\002\000\004\005\100\001\002\000\004\005\u0198\001" +
    "\002\000\032\016\101\017\105\021\110\022\112\023\106" +
    "\024\107\025\102\032\103\033\104\035\111\036\113\053" +
    "\u0199\001\002\000\004\006\u019a\001\002\000\004\005\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\012\021\011\001\001\000" +
    "\004\017\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\017\006\016\001\001\000" +
    "\002\001\001\000\004\006\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\075\007\076\001\001\000\004" +
    "\007\u0182\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u017c\012\167\001\001\000\006\010\u0100\012\167" +
    "\001\001\000\006\010\360\012\167\001\001\000\006\011" +
    "\325\013\120\001\001\000\006\010\305\012\167\001\001" +
    "\000\006\011\265\013\120\001\001\000\002\001\001\000" +
    "\006\010\232\012\167\001\001\000\006\010\171\012\167" +
    "\001\001\000\006\011\116\013\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\135\001\001\000" +
    "\002\001\001\000\004\025\137\001\001\000\002\001\001" +
    "\000\004\025\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\150\001\001\000\002\001" +
    "\001\000\004\013\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\163\001\001\000\002\001\001\000\004\025" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\201\001" +
    "\001\000\002\001\001\000\004\025\203\001\001\000\002" +
    "\001\001\000\004\025\205\001\001\000\002\001\001\000" +
    "\004\025\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\227\001\001\000\002\001\001\000" +
    "\004\025\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\330\023" +
    "\327\001\001\000\004\022\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\152\001\001\000\006" +
    "\022\330\023\354\001\001\000\004\022\346\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u0105\026\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u0172\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u010b\012\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u010d\016\u010f\001\001" +
    "\000\004\016\u0167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u014d\012\167\001\001" +
    "\000\006\010\u0113\012\167\001\001\000\002\001\001\000" +
    "\004\024\u0118\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u012e\013\120\001\001\000\002\001\001\000\006" +
    "\011\u011d\013\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\216\001\001\000\004\024\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\216" +
    "\001\001\000\004\024\u015e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\216\001\001\000\006\014\u016c" +
    "\016\u010f\001\001\000\004\016\u0167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\216\001\001\000\006\015\u0177" +
    "\026\u0107\001\001\000\004\026\u0172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u017e\007\076\001\001\000" +
    "\004\007\u0182\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\216\001\001" +
    "\000\006\005\u0188\007\076\001\001\000\004\007\u0182\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0193\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0196\007\076\001\001\000\004\007\u0182\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public void syntax_error(Symbol s){
        System.err.println("Error " + s.value + " " + s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Hubo un error en análisis irrecuperable :(");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCH$actions {




  private final parserCH parser;

  /** Constructor */
  CUP$parserCH$actions(parserCH parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCH$do_action(
    int                        CUP$parserCH$act_num,
    java_cup.runtime.lr_parser CUP$parserCH$parser,
    java.util.Stack            CUP$parserCH$stack,
    int                        CUP$parserCH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCH$result;

      /* select the action based on the action number */
      switch (CUP$parserCH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		

            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= CAD 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		 
    
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONT_COL ::= MENOR boton MAYOR MENOR finboton MAYOR 
            {
              Nodo RESULT =null;
		
   
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONT_COL ::= MENOR boton CAD2 finboton MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONT_COL ::= MENOR boton L_AT2 PUNTO_COMA MAYOR MENOR finboton MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
                
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONT_COL ::= MENOR boton L_AT2 PUNTO_COMA CAD2 finboton MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
              
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONT_COL ::= MENOR imagen MAYOR MENOR finimagen MAYOR 
            {
              Nodo RESULT =null;
		
        
        //agregar la imagen de no se encontro imagen      
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONT_COL ::= MENOR imagen CAD2 finimagen MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
           
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONT_COL ::= MENOR imagen L_AT2 PUNTO_COMA MAYOR MENOR finimagen MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONT_COL ::= MENOR imagen L_AT2 PUNTO_COMA CAD2 finimagen MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONT_FIL ::= MENOR ct L_AT PUNTO_COMA MAYOR CONT_COL MENOR finct MAYOR 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONT_FIL ::= MENOR ct L_AT PUNTO_COMA MAYOR MENOR finct MAYOR 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONT_FIL ::= MENOR ct L_AT PUNTO_COMA CAD2 finct MAYOR 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONT_FIL ::= MENOR ct CAD2 finct MAYOR 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONT_FIL ::= MENOR ct MAYOR MENOR finct MAYOR 
            {
              Nodo RESULT =null;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONT_FIL ::= MENOR ct MAYOR CONT_COL MENOR finct MAYOR 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONT_FIL ::= MENOR cb MAYOR MENOR fincb MAYOR 
            {
              Nodo RESULT =null;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONT_FIL ::= MENOR cb CAD2 fincb MAYOR 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONT_FIL ::= MENOR cb MAYOR CONT_COL MENOR fincb MAYOR 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONT_FIL ::= MENOR cb L_AT PUNTO_COMA MAYOR MENOR fincb MAYOR 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONT_FIL ::= MENOR cb L_AT PUNTO_COMA CAD2 fincb MAYOR 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONT_FIL ::= MENOR cb L_AT PUNTO_COMA MAYOR CONT_COL MENOR fincb MAYOR 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CU_FIL ::= CONT_FIL 
            {
              Nodo RESULT =null;
		
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_FIL",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CU_FIL ::= CU_FIL CONT_FIL 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_FIL",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPO_TABLA ::= MENOR fil_t MAYOR MENOR finfil_t MAYOR 
            {
              Nodo RESULT =null;
		
            
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPO_TABLA ::= MENOR fil_t MAYOR CU_FIL MENOR finfil_t MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPO_TABLA ::= MENOR fil_t L_AT PUNTO_COMA MAYOR CU_FIL MENOR finfil_t MAYOR 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CU_T ::= CUERPO_TABLA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_T",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CU_T ::= CU_T CUERPO_TABLA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_T",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_ATRIBUTOS2 ::= alineado IGUAL E 
            {
              Nodo RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_ATRIBUTOS2 ::= ancho IGUAL E 
            {
              Nodo RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L_ATRIBUTOS2 ::= alto IGUAL E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L_ATRIBUTOS2 ::= grupo IGUAL E 
            {
              Nodo RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L_ATRIBUTOS2 ::= id IGUAL E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L_ATRIBUTOS2 ::= ruta IGUAL E 
            {
              Nodo RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ruta = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            

            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_ATRIBUTOS2 ::= click IGUAL E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_ATRIBUTOS ::= alineado IGUAL E 
            {
              Nodo RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_ATRIBUTOS ::= ancho IGUAL E 
            {
              Nodo RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_ATRIBUTOS ::= alto IGUAL E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_ATRIBUTOS ::= grupo IGUAL E 
            {
              Nodo RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_ATRIBUTOS ::= id IGUAL E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_ATRIBUTOS ::= click IGUAL E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_AT2 ::= L_ATRIBUTOS2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT2",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L_AT2 ::= L_AT2 PUNTO_COMA L_ATRIBUTOS2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT2",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_AT ::= L_ATRIBUTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_AT ::= L_AT PUNTO_COMA L_ATRIBUTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUEVO ::= MENOR opcion valor IGUAL E PUNTO_COMA CAD2 finopcion MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            

        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("NUEVO",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUEVO ::= MENOR opcion valor IGUAL E PUNTO_COMA MAYOR MENOR finopcion MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
            
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("NUEVO",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CAJA_OP ::= NUEVO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CAJA_OP",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CAJA_OP ::= CAJA_OP NUEVO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CAJA_OP",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CU ::= MENOR salto MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CU ::= MENOR spinner MAYOR MENOR finspinner MAYOR 
            {
              Nodo RESULT =null;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CU ::= MENOR spinner CAD2 finspinner MAYOR 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CU ::= MENOR spinner L_AT PUNTO_COMA MAYOR MENOR finspinner MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CU ::= MENOR spinner L_AT PUNTO_COMA CAD2 finspinner MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CU ::= MENOR caja MAYOR CAJA_OP MENOR fincaja MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CU ::= MENOR caja L_AT2 PUNTO_COMA MAYOR CAJA_OP MENOR fincaja MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CU ::= MENOR texto_a MAYOR MENOR fintexto_a MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CU ::= MENOR texto_a CAD2 fintexto_a MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CU ::= MENOR texto_a L_AT PUNTO_COMA MAYOR MENOR fintexto_a MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CU ::= MENOR texto_a L_AT PUNTO_COMA CAD2 fintexto_a MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		

                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CU ::= MENOR tabla CAD2 fintabla MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                

                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CU ::= MENOR tabla MAYOR MENOR fintabla MAYOR 
            {
              Nodo RESULT =null;
		        

                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CU ::= MENOR tabla MAYOR CU_T MENOR fintabla MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CU ::= MENOR enlace ruta IGUAL CAD PUNTO_COMA MAYOR MENOR finenlace MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
                    
                //agregar el nombre de la ruta ya que no tiene otro nombre
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CU ::= MENOR tabla L_AT PUNTO_COMA MAYOR CU_T MENOR fintabla MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CU ::= MENOR enlace ruta IGUAL CAD PUNTO_COMA CAD2 finenlace MAYOR 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CU ::= MENOR boton MAYOR MENOR finboton MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CU ::= MENOR boton CAD2 finboton MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CU ::= MENOR boton L_AT2 PUNTO_COMA MAYOR MENOR finboton MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                //agregar el nombre por defecto
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CU ::= MENOR boton L_AT2 PUNTO_COMA CAD2 finboton MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CU ::= MENOR imagen MAYOR MENOR finimagen MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CU ::= MENOR imagen CAD2 finimagen MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CU ::= MENOR imagen L_AT2 PUNTO_COMA MAYOR MENOR finimagen MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CU ::= MENOR imagen L_AT2 PUNTO_COMA CAD2 finimagen MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CU ::= MENOR caja_texto MAYOR MENOR fincaja_texto MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CU ::= MENOR caja_texto CAD2 fincaja_texto MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CU ::= MENOR caja_texto L_AT PUNTO_COMA MAYOR MENOR fincaja_texto MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CU ::= MENOR caja_texto L_AT PUNTO_COMA CAD2 fincaja_texto MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CU ::= MENOR texto_t CAD2 fintexto MAYOR 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CU ::= MENOR texto_t MAYOR MENOR fintexto MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CU ::= MENOR texto_t L_AT PUNTO_COMA MAYOR MENOR fintexto MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CU ::= MENOR texto_t L_AT PUNTO_COMA CAD2 fintexto MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CU ::= MENOR panel MAYOR MENOR finpanel MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CU ::= MENOR panel L_AT PUNTO_COMA MAYOR MENOR finpanel MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CU ::= MENOR panel MAYOR CONT_C MENOR finpanel MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CU ::= MENOR panel L_AT PUNTO_COMA MAYOR CONT_C MENOR finpanel MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONT_C ::= CU 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_C",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONT_C ::= CONT_C CU 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_C",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // REP ::= MENOR cjs ruta IGUAL CAD PUNTO_COMA MAYOR MENOR fincjs MAYOR 
            {
              Nodo RESULT =null;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REP ::= MENOR titulo MAYOR MENOR fintitulo MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REP ::= MENOR ccss ruta IGUAL CAD PUNTO_COMA MAYOR MENOR finccss MAYOR 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REP ::= MENOR cjs ruta IGUAL CAD PUNTO_COMA CAD2 fincjs MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REP ::= MENOR ccss ruta IGUAL CAD PUNTO_COMA CAD2 finccss MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REP ::= MENOR titulo CAD2 fintitulo MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		                
    
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONT_EN ::= REP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_EN",2, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONT_EN ::= CONT_EN REP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int nuevoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int nuevoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo nuevo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_EN",2, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= MENOR cuerpo fondo IGUAL E PUNTO_COMA MAYOR CONT_C MENOR fincuerpo MAYOR 
            {
              Nodo RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-10)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= MENOR cuerpo MAYOR CONT_C MENOR fincuerpo MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= MENOR encabezado MAYOR CONT_EN MENOR finencabezado MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",15, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONT ::= ENCABEZADO CUERPO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
         
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // H ::= MENOR chtml MAYOR CONT MENOR finchtml MAYOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("H",1, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= H 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		RESULT = start_val;
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCH$parser.done_parsing();
          return CUP$parserCH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

