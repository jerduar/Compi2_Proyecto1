
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 28 03:40:38 CST 2018
//----------------------------------------------------

package GeneradorCHTML;

import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import AST.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 28 03:40:38 CST 2018
  */
public class parserCH extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCH() {super();}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\007\000\002\003\012\000\002\003\010" +
    "\000\002\004\004\000\002\004\003\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\006\004\000\002\007\011" +
    "\000\002\007\007\000\002\007\012\000\002\007\010\000" +
    "\002\010\011\000\002\010\007\000\002\010\012\000\002" +
    "\010\010\000\002\011\004\000\002\011\003\000\002\012" +
    "\007\000\002\012\007\000\002\012\007\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\013\004\000" +
    "\002\013\003\000\002\014\012\000\002\014\010\000\002" +
    "\014\011\000\002\014\007\000\002\014\010\000\002\014" +
    "\007\000\002\014\010\000\002\014\007\000\002\014\010" +
    "\000\002\014\007\000\002\014\010\000\002\014\007\000" +
    "\002\014\010\000\002\014\007\000\002\014\010\000\002" +
    "\014\007\000\002\014\010\000\002\014\007\000\002\014" +
    "\012\000\002\014\010\000\002\014\011\000\002\014\007" +
    "\000\002\014\012\000\002\014\010\000\002\014\011\000" +
    "\002\014\007\000\002\014\005\000\002\015\004\000\002" +
    "\015\003\000\002\016\010\000\002\016\007\000\002\017" +
    "\004\000\002\017\003\000\002\020\012\000\002\020\010" +
    "\000\002\020\011\000\002\020\007\000\002\021\004\000" +
    "\002\021\003\000\002\022\012\000\002\022\010\000\002" +
    "\022\011\000\002\022\007\000\002\022\012\000\002\022" +
    "\010\000\002\022\011\000\002\022\007\000\002\023\003" +
    "\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\004\010\005\001\002\000\004\002\000\001" +
    "\002\000\004\017\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\030\006\020\011\025\066" +
    "\012\067\016\070\021\071\011\072\014\073\022\074\024" +
    "\075\023\100\017\001\002\000\004\015\u013d\001\002\000" +
    "\004\015\u013a\001\002\000\004\020\u0138\001\002\000\004" +
    "\015\u0135\001\002\000\030\006\020\011\u012e\066\012\067" +
    "\016\070\021\071\011\072\014\073\022\074\024\075\023" +
    "\100\017\001\002\000\004\015\u012a\001\002\000\004\015" +
    "\u0127\001\002\000\052\020\uffae\022\uffae\024\uffae\026\uffae" +
    "\030\uffae\032\uffae\034\uffae\036\uffae\040\uffae\042\uffae\044" +
    "\uffae\046\uffae\050\uffae\052\uffae\054\uffae\056\uffae\060\uffae" +
    "\062\uffae\064\uffae\077\uffae\001\002\000\004\015\u0124\001" +
    "\002\000\004\015\u0121\001\002\000\004\015\u011e\001\002" +
    "\000\004\015\u011b\001\002\000\004\010\031\001\002\000" +
    "\030\006\ufffa\011\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa" +
    "\072\ufffa\073\ufffa\074\ufffa\075\ufffa\100\ufffa\001\002\000" +
    "\004\010\115\001\002\000\004\010\112\001\002\000\006" +
    "\020\uffad\021\032\001\002\000\030\006\020\011\035\066" +
    "\012\067\016\070\021\071\011\072\014\073\022\074\024" +
    "\075\023\100\017\001\002\000\004\022\110\001\002\000" +
    "\030\006\020\011\101\066\012\067\016\070\021\071\011" +
    "\072\014\073\022\074\024\075\023\100\017\001\002\000" +
    "\004\010\037\001\002\000\004\010\uffe6\001\002\000\012" +
    "\022\uffad\023\044\025\045\076\046\001\002\000\004\010" +
    "\042\001\002\000\004\010\uffe7\001\002\000\012\022\043" +
    "\023\044\025\045\076\046\001\002\000\004\011\077\001" +
    "\002\000\030\006\020\011\051\066\012\067\016\070\021" +
    "\071\011\072\014\073\022\074\024\075\023\100\017\001" +
    "\002\000\030\006\020\011\051\066\012\067\016\070\021" +
    "\071\011\072\014\073\022\074\024\075\023\100\017\001" +
    "\002\000\030\006\020\011\051\066\012\067\016\070\021" +
    "\071\011\072\014\073\022\074\024\075\023\100\017\001" +
    "\002\000\004\077\057\001\002\000\030\006\020\011\051" +
    "\066\012\067\016\070\021\071\011\072\014\073\022\074" +
    "\024\075\023\100\017\001\002\000\004\010\052\001\002" +
    "\000\030\024\uffad\026\uffad\034\uffad\036\uffad\040\uffad\042" +
    "\uffad\044\uffad\056\uffad\062\uffad\064\uffad\077\uffad\001\002" +
    "\000\004\077\055\001\002\000\030\006\ufffb\011\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\100\ufffb\001\002\000\004\011\056\001\002\000" +
    "\004\010\uffe1\001\002\000\004\011\060\001\002\000\004" +
    "\010\uffe4\001\002\000\004\026\066\001\002\000\030\006" +
    "\020\011\051\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\004\026" +
    "\064\001\002\000\004\011\065\001\002\000\004\010\uffe2" +
    "\001\002\000\004\011\067\001\002\000\004\010\uffe5\001" +
    "\002\000\004\024\075\001\002\000\030\006\020\011\051" +
    "\066\012\067\016\070\021\071\011\072\014\073\022\074" +
    "\024\075\023\100\017\001\002\000\004\024\073\001\002" +
    "\000\004\011\074\001\002\000\004\010\uffe0\001\002\000" +
    "\004\011\076\001\002\000\004\010\uffe3\001\002\000\004" +
    "\010\uffef\001\002\000\004\022\106\001\002\000\004\010" +
    "\037\001\002\000\004\010\103\001\002\000\012\022\104" +
    "\023\044\025\045\076\046\001\002\000\004\011\105\001" +
    "\002\000\004\010\uffed\001\002\000\004\011\107\001\002" +
    "\000\004\010\uffec\001\002\000\004\011\111\001\002\000" +
    "\004\010\uffee\001\002\000\004\020\113\001\002\000\004" +
    "\011\114\001\002\000\004\002\uffff\001\002\000\004\027" +
    "\117\001\002\000\004\010\ufff0\001\002\000\030\006\020" +
    "\011\122\066\012\067\016\070\021\071\011\072\014\073" +
    "\022\074\024\075\023\100\017\001\002\000\004\030\u0119" +
    "\001\002\000\030\006\020\011\u0112\066\012\067\016\070" +
    "\021\071\011\072\014\073\022\074\024\075\023\100\017" +
    "\001\002\000\004\010\124\001\002\000\004\010\uffde\001" +
    "\002\000\040\030\uffad\031\132\032\uffad\033\137\035\142" +
    "\037\136\041\134\043\130\045\133\052\uffad\054\uffad\055" +
    "\131\057\135\063\143\065\140\001\002\000\004\010\127" +
    "\001\002\000\004\010\uffdf\001\002\000\032\030\141\031" +
    "\132\033\137\035\142\037\136\041\134\043\130\045\133" +
    "\055\131\057\135\063\143\065\140\001\002\000\030\006" +
    "\020\011\051\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\030\006" +
    "\020\011\051\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\030\006" +
    "\020\011\364\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\030\006" +
    "\020\011\247\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\030\006" +
    "\020\011\051\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\030\006" +
    "\020\011\204\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\030\006" +
    "\020\011\051\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\030\006" +
    "\020\011\051\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\004\011" +
    "\163\001\002\000\004\011\162\001\002\000\030\006\020" +
    "\011\051\066\012\067\016\070\021\071\011\072\014\073" +
    "\022\074\024\075\023\100\017\001\002\000\030\006\020" +
    "\011\051\066\012\067\016\070\021\071\011\072\014\073" +
    "\022\074\024\075\023\100\017\001\002\000\004\064\151" +
    "\001\002\000\030\006\020\011\051\066\012\067\016\070" +
    "\021\071\011\072\014\073\022\074\024\075\023\100\017" +
    "\001\002\000\004\064\147\001\002\000\004\011\150\001" +
    "\002\000\004\010\uffcd\001\002\000\004\011\152\001\002" +
    "\000\004\010\uffcc\001\002\000\004\036\160\001\002\000" +
    "\030\006\020\011\051\066\012\067\016\070\021\071\011" +
    "\072\014\073\022\074\024\075\023\100\017\001\002\000" +
    "\004\036\156\001\002\000\004\011\157\001\002\000\004" +
    "\010\uffd5\001\002\000\004\011\161\001\002\000\004\010" +
    "\uffd4\001\002\000\004\010\uffeb\001\002\000\004\010\uffc3" +
    "\001\002\000\004\034\171\001\002\000\030\006\020\011" +
    "\051\066\012\067\016\070\021\071\011\072\014\073\022" +
    "\074\024\075\023\100\017\001\002\000\004\034\167\001" +
    "\002\000\004\011\170\001\002\000\004\010\uffd9\001\002" +
    "\000\004\011\172\001\002\000\004\010\uffd8\001\002\000" +
    "\004\040\200\001\002\000\030\006\020\011\051\066\012" +
    "\067\016\070\021\071\011\072\014\073\022\074\024\075" +
    "\023\100\017\001\002\000\004\040\176\001\002\000\004" +
    "\011\177\001\002\000\004\010\uffd3\001\002\000\004\011" +
    "\201\001\002\000\004\010\uffd2\001\002\000\004\060\234" +
    "\001\002\000\030\006\020\011\225\066\012\067\016\070" +
    "\021\071\011\072\014\073\022\074\024\075\023\100\017" +
    "\001\002\000\004\010\206\001\002\000\004\010\uffc1\001" +
    "\002\000\006\060\uffad\061\213\001\002\000\004\010\211" +
    "\001\002\000\004\010\uffc2\001\002\000\006\060\212\061" +
    "\213\001\002\000\004\011\223\001\002\000\030\006\020" +
    "\011\051\066\012\067\016\070\021\071\011\072\014\073" +
    "\022\074\024\075\023\100\017\001\002\000\004\062\221" +
    "\001\002\000\030\006\020\011\051\066\012\067\016\070" +
    "\021\071\011\072\014\073\022\074\024\075\023\100\017" +
    "\001\002\000\004\062\217\001\002\000\004\011\220\001" +
    "\002\000\004\010\uffc0\001\002\000\004\011\222\001\002" +
    "\000\004\010\uffbf\001\002\000\004\010\uffc9\001\002\000" +
    "\004\060\232\001\002\000\004\010\206\001\002\000\004" +
    "\010\227\001\002\000\006\060\230\061\213\001\002\000" +
    "\004\011\231\001\002\000\004\010\uffcb\001\002\000\004" +
    "\011\233\001\002\000\004\010\uffca\001\002\000\004\011" +
    "\235\001\002\000\004\010\uffc8\001\002\000\004\042\243" +
    "\001\002\000\030\006\020\011\051\066\012\067\016\070" +
    "\021\071\011\072\014\073\022\074\024\075\023\100\017" +
    "\001\002\000\004\042\241\001\002\000\004\011\242\001" +
    "\002\000\004\010\uffd1\001\002\000\004\011\244\001\002" +
    "\000\004\010\uffd0\001\002\000\004\046\360\001\002\000" +
    "\030\006\020\011\351\066\012\067\016\070\021\071\011" +
    "\072\014\073\022\074\024\075\023\100\017\001\002\000" +
    "\004\010\252\001\002\000\004\010\uffbd\001\002\000\004" +
    "\010\345\001\002\000\006\046\uffad\047\253\001\002\000" +
    "\030\006\020\011\256\066\012\067\016\070\021\071\011" +
    "\072\014\073\022\074\024\075\023\100\017\001\002\000" +
    "\004\050\342\001\002\000\030\006\020\011\333\066\012" +
    "\067\016\070\021\071\011\072\014\073\022\074\024\075" +
    "\023\100\017\001\002\000\004\010\260\001\002\000\004" +
    "\010\326\001\002\000\010\050\uffad\051\263\053\262\001" +
    "\002\000\004\010\uffb7\001\002\000\030\006\020\011\307" +
    "\066\012\067\016\070\021\071\011\072\014\073\022\074" +
    "\024\075\023\100\017\001\002\000\030\006\020\011\266" +
    "\066\012\067\016\070\021\071\011\072\014\073\022\074" +
    "\024\075\023\100\017\001\002\000\004\052\303\001\002" +
    "\000\030\006\020\011\274\066\012\067\016\070\021\071" +
    "\011\072\014\073\022\074\024\075\023\100\017\001\002" +
    "\000\004\010\124\001\002\000\004\010\270\001\002\000" +
    "\032\031\132\033\137\035\142\037\136\041\134\043\130" +
    "\045\133\052\271\055\131\057\135\063\143\065\140\001" +
    "\002\000\004\011\272\001\002\000\004\010\uffb4\001\002" +
    "\000\004\052\301\001\002\000\004\010\124\001\002\000" +
    "\004\010\276\001\002\000\032\031\132\033\137\035\142" +
    "\037\136\041\134\043\130\045\133\052\277\055\131\057" +
    "\135\063\143\065\140\001\002\000\004\011\300\001\002" +
    "\000\004\010\uffb6\001\002\000\004\011\302\001\002\000" +
    "\004\010\uffb5\001\002\000\004\011\304\001\002\000\004" +
    "\010\uffb3\001\002\000\004\054\324\001\002\000\030\006" +
    "\020\011\315\066\012\067\016\070\021\071\011\072\014" +
    "\073\022\074\024\075\023\100\017\001\002\000\004\010" +
    "\124\001\002\000\004\010\311\001\002\000\032\031\132" +
    "\033\137\035\142\037\136\041\134\043\130\045\133\054" +
    "\312\055\131\057\135\063\143\065\140\001\002\000\004" +
    "\011\313\001\002\000\004\010\uffb0\001\002\000\004\054" +
    "\322\001\002\000\004\010\124\001\002\000\004\010\317" +
    "\001\002\000\032\031\132\033\137\035\142\037\136\041" +
    "\134\043\130\045\133\054\320\055\131\057\135\063\143" +
    "\065\140\001\002\000\004\011\321\001\002\000\004\010" +
    "\uffb2\001\002\000\004\011\323\001\002\000\004\010\uffb1" +
    "\001\002\000\004\011\325\001\002\000\004\010\uffaf\001" +
    "\002\000\010\050\330\051\263\053\262\001\002\000\004" +
    "\010\uffb8\001\002\000\004\011\331\001\002\000\004\010" +
    "\uffba\001\002\000\004\050\340\001\002\000\004\010\260" +
    "\001\002\000\004\010\335\001\002\000\010\050\336\051" +
    "\263\053\262\001\002\000\004\011\337\001\002\000\004" +
    "\010\uffbc\001\002\000\004\011\341\001\002\000\004\010" +
    "\uffbb\001\002\000\004\011\343\001\002\000\004\010\uffb9" +
    "\001\002\000\004\010\uffbe\001\002\000\006\046\346\047" +
    "\253\001\002\000\004\011\347\001\002\000\004\010\uffc5" +
    "\001\002\000\004\046\356\001\002\000\004\010\252\001" +
    "\002\000\004\010\353\001\002\000\006\046\354\047\253" +
    "\001\002\000\004\011\355\001\002\000\004\010\uffc7\001" +
    "\002\000\004\011\357\001\002\000\004\010\uffc6\001\002" +
    "\000\004\011\361\001\002\000\004\010\uffc4\001\002\000" +
    "\004\032\u0101\001\002\000\030\006\020\011\372\066\012" +
    "\067\016\070\021\071\011\072\014\073\022\074\024\075" +
    "\023\100\017\001\002\000\004\010\124\001\002\000\004" +
    "\010\366\001\002\000\032\031\132\032\367\033\137\035" +
    "\142\037\136\041\134\043\130\045\133\055\131\057\135" +
    "\063\143\065\140\001\002\000\004\011\370\001\002\000" +
    "\004\010\uffdb\001\002\000\004\032\377\001\002\000\004" +
    "\010\124\001\002\000\004\010\374\001\002\000\032\031" +
    "\132\032\375\033\137\035\142\037\136\041\134\043\130" +
    "\045\133\055\131\057\135\063\143\065\140\001\002\000" +
    "\004\011\376\001\002\000\004\010\uffdd\001\002\000\004" +
    "\011\u0100\001\002\000\004\010\uffdc\001\002\000\004\011" +
    "\u0102\001\002\000\004\010\uffda\001\002\000\004\056\u0108" +
    "\001\002\000\030\006\020\011\051\066\012\067\016\070" +
    "\021\071\011\072\014\073\022\074\024\075\023\100\017" +
    "\001\002\000\004\056\u0106\001\002\000\004\011\u0107\001" +
    "\002\000\004\010\uffd7\001\002\000\004\011\u0109\001\002" +
    "\000\004\010\uffd6\001\002\000\004\044\u010f\001\002\000" +
    "\030\006\020\011\051\066\012\067\016\070\021\071\011" +
    "\072\014\073\022\074\024\075\023\100\017\001\002\000" +
    "\004\044\u010d\001\002\000\004\011\u010e\001\002\000\004" +
    "\010\uffcf\001\002\000\004\011\u0110\001\002\000\004\010" +
    "\uffce\001\002\000\004\030\u0117\001\002\000\004\010\124" +
    "\001\002\000\004\010\u0114\001\002\000\032\030\u0115\031" +
    "\132\033\137\035\142\037\136\041\134\043\130\045\133" +
    "\055\131\057\135\063\143\065\140\001\002\000\004\011" +
    "\u0116\001\002\000\004\010\uffe9\001\002\000\004\011\u0118" +
    "\001\002\000\004\010\uffe8\001\002\000\004\011\u011a\001" +
    "\002\000\004\010\uffea\001\002\000\004\007\u011c\001\002" +
    "\000\004\014\u011d\001\002\000\030\006\ufff4\011\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4" +
    "\075\ufff4\100\ufff4\001\002\000\004\007\u011f\001\002\000" +
    "\004\014\u0120\001\002\000\030\006\ufff1\011\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\100\ufff1\001\002\000\004\007\u0122\001\002\000\004" +
    "\014\u0123\001\002\000\030\006\ufff5\011\ufff5\066\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5" +
    "\100\ufff5\001\002\000\004\007\u0125\001\002\000\004\014" +
    "\u0126\001\002\000\030\006\ufff8\011\ufff8\066\ufff8\067\ufff8" +
    "\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\100" +
    "\ufff8\001\002\000\004\007\u0128\001\002\000\004\014\u0129" +
    "\001\002\000\030\006\ufff2\011\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\100\ufff2" +
    "\001\002\000\004\007\u012b\001\002\000\004\014\u012c\001" +
    "\002\000\030\006\ufff3\011\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\100\ufff3\001" +
    "\002\000\004\020\u0133\001\002\000\004\010\031\001\002" +
    "\000\004\010\u0130\001\002\000\004\020\u0131\001\002\000" +
    "\004\011\u0132\001\002\000\004\002\ufffd\001\002\000\004" +
    "\011\u0134\001\002\000\004\002\ufffc\001\002\000\004\007" +
    "\u0136\001\002\000\004\014\u0137\001\002\000\030\006\ufff6" +
    "\011\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\100\ufff6\001\002\000\004\011\u0139" +
    "\001\002\000\004\002\ufffe\001\002\000\004\007\u013b\001" +
    "\002\000\004\014\u013c\001\002\000\030\006\ufff9\011\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074" +
    "\ufff9\075\ufff9\100\ufff9\001\002\000\004\007\u013e\001\002" +
    "\000\004\014\u013f\001\002\000\030\006\ufff7\011\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7" +
    "\075\ufff7\100\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\014\005\025\023\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\053\023\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\027\007\026\001\001\000\002\001\001\000\004\010\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\033\005\025\023\032\001\001\000\002\001\001\000\006" +
    "\005\053\023\077\001\001\000\006\011\037\012\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\070\005\025\023\067\001\001\000\010" +
    "\004\061\005\025\023\060\001\001\000\010\004\047\005" +
    "\025\023\046\001\001\000\002\001\001\000\006\005\053" +
    "\023\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\053\023\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\053\023\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\101\012\035\001\001\000" +
    "\004\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\120\005\025\023\117\001\001\000\002" +
    "\001\001\000\006\005\053\023\u0110\001\001\000\006\013" +
    "\124\014\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u010a\005\025\023\u0109\001\001\000\010" +
    "\004\u0103\005\025\023\u0102\001\001\000\010\004\362\005" +
    "\025\023\361\001\001\000\010\004\245\005\025\023\244" +
    "\001\001\000\010\004\236\005\025\023\235\001\001\000" +
    "\010\004\202\005\025\023\201\001\001\000\010\004\173" +
    "\005\025\023\172\001\001\000\010\004\164\005\025\023" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\153\005\025\023\152\001\001\000\010\004\144\005" +
    "\025\023\143\001\001\000\002\001\001\000\006\005\053" +
    "\023\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\053\023\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\053\023\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\053" +
    "\023\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\053\023\223\001\001\000\006\015" +
    "\206\016\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\214\005\025\023\213" +
    "\001\001\000\002\001\001\000\006\005\053\023\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\225\016\204\001\001\000\004" +
    "\016\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\053\023\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\053\023\347\001\001\000\006" +
    "\017\250\020\247\001\001\000\002\001\001\000\004\020" +
    "\343\001\001\000\002\001\001\000\010\004\254\005\025" +
    "\023\253\001\001\000\002\001\001\000\006\005\053\023" +
    "\331\001\001\000\006\021\256\022\260\001\001\000\004" +
    "\022\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\305\005\025\023\304\001\001\000\010\004\264" +
    "\005\025\023\263\001\001\000\002\001\001\000\006\005" +
    "\053\023\272\001\001\000\006\013\266\014\122\001\001" +
    "\000\004\014\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\274" +
    "\014\122\001\001\000\004\014\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\053\023\313\001\001\000\006" +
    "\013\307\014\122\001\001\000\004\014\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\315\014\122\001\001\000\004\014" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\333\022\260\001\001\000\004\022\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\351" +
    "\020\247\001\001\000\004\020\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\053\023\370\001\001\000\006" +
    "\013\364\014\122\001\001\000\004\014\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\372\014\122\001\001\000\004\014" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\053" +
    "\023\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\053\023\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\u0112\014" +
    "\122\001\001\000\004\014\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\u012e" +
    "\007\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    /* Metodo para errores sintacticos*/
	
    public void syntax_error(Symbol s){
        System.err.println("Error " + s.value + " " + s.left + " " + s.right);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Hubo un error en análisis irrecuperable :(");
        //System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCH$actions {

//Codigo de acciones
    

  private final parserCH parser;

  /** Constructor */
  CUP$parserCH$actions(parserCH parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCH$do_action(
    int                        CUP$parserCH$act_num,
    java_cup.runtime.lr_parser CUP$parserCH$parser,
    java.util.Stack            CUP$parserCH$stack,
    int                        CUP$parserCH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCH$result;

      /* select the action based on the action number */
      switch (CUP$parserCH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TEXTO ::= mayor menor 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCH.TEXTO);
                    RESULT.addHijo(ConsCH.VACIO,"",-4,-4);
                                /*Nodo padre = new Nodo("TEXTO");
                                padre.addHijos(new Nodo("Vacío"));
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("TEXTO",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TEXTO ::= texto 
            {
              Nodo RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCH.TEXTO);
                    RESULT.addHijo(new Nodo(ConsCH.TXT,txt,txtleft,txtright));
                                /*Nodo padre = new Nodo("TEXTO");
                                padre.addHijos(new Nodo(texto));
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("TEXTO",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ETQ_FILA ::= menor t_ct TEXTO t_fin_ct mayor 
            {
              Nodo RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo txt = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CT);
                    RESULT.addHijo(txt);
                                /*Nodo padre = new Nodo("CT");
                                padre.addHijos(texto);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ETQ_FILA ::= menor t_ct mayor L_ETQS_CUERPO menor t_fin_ct mayor 
            {
              Nodo RESULT =null;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CT);
                    RESULT.addHijo(lec);
                                /*Nodo padre = new Nodo("CT");
                                padre.addHijos(contenido);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ETQ_FILA ::= menor t_ct L_PROPIEDADES TEXTO t_fin_ct mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo txt = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CT);
                    RESULT.addHijo(p,txt);
                                /*Nodo padre = new Nodo("CT");
                                padre.addHijos(propiedades, texto);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ETQ_FILA ::= menor t_ct L_PROPIEDADES mayor L_ETQS_CUERPO menor t_fin_ct mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CT);
                    RESULT.addHijo(p,c);
                                /*Nodo padre = new Nodo("CT");
                                padre.addHijos(propiedades, contenido);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ETQ_FILA ::= menor t_cb TEXTO t_fin_cb mayor 
            {
              Nodo RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo txt = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CB);
                    RESULT.addHijo(txt);
                                /*Nodo padre = new Nodo("CB");
                                padre.addHijos(texto);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ETQ_FILA ::= menor t_cb mayor L_ETQS_CUERPO menor t_fin_cb mayor 
            {
              Nodo RESULT =null;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CB);
                    RESULT.addHijo(lec);
                                /*Nodo padre = new Nodo("CB");
                                padre.addHijos(contenido);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ETQ_FILA ::= menor t_cb L_PROPIEDADES TEXTO t_fin_cb mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo txt = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CB);
                    RESULT.addHijo(p,txt);
                                /*Nodo padre = new Nodo("CB");
                                padre.addHijos(propiedades, texto);
                                RESULT = padre;*/
                        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ETQ_FILA ::= menor t_cb L_PROPIEDADES mayor L_ETQS_CUERPO menor t_fin_cb mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CB);
                    RESULT.addHijo(p,lec);
                                /*Nodo padre = new Nodo("CB");
                                padre.addHijos(propiedades, contenido);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_FILA",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_ETQS_FIlA ::= ETQ_FILA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = e;
                                //RESULT = etiqueta;
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_FIlA",15, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_ETQS_FIlA ::= L_ETQS_FIlA ETQ_FILA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = l;
                    RESULT.addHijo(e);
                                /*Nodo padre = lista;
                                padre.addHijos(etiqueta);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_FIlA",15, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ETQ_TABLA ::= menor t_fil_t TEXTO t_fin_fil_t mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.FIL_T);
                    RESULT.addHijo(t);
                                /*Nodo padre = new Nodo("FIL_T");
                                padre.addHijos(texto);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_TABLA",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ETQ_TABLA ::= menor t_fil_t mayor L_ETQS_FIlA menor t_fin_fil_t mayor 
            {
              Nodo RESULT =null;
		int lefleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lefright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lef = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.FIL_T);
                    RESULT.addHijo(lef);
                                /*Nodo padre = new Nodo("FIL_T");
                                padre.addHijos(contenido);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_TABLA",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ETQ_TABLA ::= menor t_fil_t L_PROPIEDADES TEXTO t_fin_fil_t mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.FIL_T);
                    RESULT.addHijo(p,t);
                                /*Nodo padre = new Nodo("FIL_T");
                                padre.addHijos(propiedades, texto);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_TABLA",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ETQ_TABLA ::= menor t_fil_t L_PROPIEDADES mayor L_ETQS_FIlA menor t_fin_fil_t mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int lefleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lefright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lef = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.FIL_T);
                    RESULT.addHijo(p,lef);
                                /*Nodo padre = new Nodo("FIL_T");
                                padre.addHijos(propiedades, contenido);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_TABLA",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_ETQS_TABLA ::= ETQ_TABLA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = e;
                                //RESULT = etiqueta;
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_TABLA",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_ETQS_TABLA ::= L_ETQS_TABLA ETQ_TABLA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = l;
                    RESULT.addHijo(e);
                                /*Nodo padre = lista;
                                padre.addHijos(etiqueta);
                                RESULT = padre;*/
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_TABLA",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETQ_CAJA ::= menor t_opcion TEXTO t_fin_opcion mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.OPCION);
                    RESULT.addHijo(t);
                                /*Nodo padre = new Nodo("OPCIÓN");
                                padre.addHijos(texto);
                                RESULT = padre;*/
                 
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CAJA",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETQ_CAJA ::= menor t_opcion L_PROPIEDADES TEXTO t_fin_opcion mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.OPCION);
                    RESULT.addHijo(p,t);
                                /*Nodo padre = new Nodo("OPCIÓN");
                                padre.addHijos(propiedades, texto);
                                RESULT = padre;*/ 
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CAJA",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_ETQS_CAJA ::= ETQ_CAJA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCH.OPCIONES);
                    RESULT.addHijo(e);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_CAJA",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_ETQS_CAJA ::= L_ETQS_CAJA ETQ_CAJA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = l;
                    RESULT.addHijo(e);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_CAJA",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETQ_CUERPO ::= menor t_salto_fin mayor 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCH.SALTO_FIN);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETQ_CUERPO ::= menor t_tabla TEXTO t_fin_tabla mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TABLA);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETQ_CUERPO ::= menor t_tabla mayor L_ETQS_TABLA menor t_fin_tabla mayor 
            {
              Nodo RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo let = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.TABLA);
                    RESULT.addHijo(let);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETQ_CUERPO ::= menor t_tabla L_PROPIEDADES TEXTO t_fin_tabla mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TABLA);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETQ_CUERPO ::= menor t_tabla L_PROPIEDADES mayor L_ETQS_TABLA menor t_fin_tabla mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int letleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo let = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.TABLA);
                    RESULT.addHijo(p,let);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETQ_CUERPO ::= menor t_caja TEXTO t_fin_caja mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CAJA);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETQ_CUERPO ::= menor t_caja mayor L_ETQS_CAJA menor t_fin_caja mayor 
            {
              Nodo RESULT =null;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CAJA);
                    RESULT.addHijo(lec);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ETQ_CUERPO ::= menor t_caja L_PROPIEDADES TEXTO t_fin_caja mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CAJA);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ETQ_CUERPO ::= menor t_caja L_PROPIEDADES mayor L_ETQS_CAJA menor t_fin_caja mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CAJA);
                    RESULT.addHijo(p,lec);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ETQ_CUERPO ::= menor t_spinner TEXTO t_fin_spinner mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.SPINNER);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ETQ_CUERPO ::= menor t_spinner L_PROPIEDADES TEXTO t_fin_spinner mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.SPINNER);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ETQ_CUERPO ::= menor t_enlace TEXTO t_fin_enlace mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.ENLACE);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ETQ_CUERPO ::= menor t_enlace L_PROPIEDADES TEXTO t_fin_enlace mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.ENLACE);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ETQ_CUERPO ::= menor t_boton TEXTO t_fin_boton mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.BOTON);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ETQ_CUERPO ::= menor t_boton L_PROPIEDADES TEXTO t_fin_boton mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.BOTON);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ETQ_CUERPO ::= menor t_imagen TEXTO t_fin_imagen mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.IMAGEN);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ETQ_CUERPO ::= menor t_imagen L_PROPIEDADES TEXTO t_fin_imagen mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.IMAGEN);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ETQ_CUERPO ::= menor t_caja_texto TEXTO t_fin_caja_texto mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CAJA_TEXTO);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ETQ_CUERPO ::= menor t_caja_texto L_PROPIEDADES TEXTO t_fin_caja_texto mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CAJA_TEXTO);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ETQ_CUERPO ::= menor t_texto_a TEXTO t_fin_texto_a mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TEXTO_A);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ETQ_CUERPO ::= menor t_texto_a L_PROPIEDADES TEXTO t_fin_texto_a mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TEXTO_A);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ETQ_CUERPO ::= menor t_texto TEXTO t_fin_texto mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TEXTO);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ETQ_CUERPO ::= menor t_texto L_PROPIEDADES TEXTO t_fin_texto mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TEXTO);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ETQ_CUERPO ::= menor t_panel TEXTO t_fin_panel mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.PANEL);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ETQ_CUERPO ::= menor t_panel mayor L_ETQS_CUERPO menor t_fin_panel mayor 
            {
              Nodo RESULT =null;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.PANEL);
                    RESULT.addHijo(lec);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ETQ_CUERPO ::= menor t_panel L_PROPIEDADES TEXTO t_fin_panel mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.PANEL);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ETQ_CUERPO ::= menor t_panel L_PROPIEDADES mayor L_ETQS_CUERPO menor t_fin_panel mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.PANEL);
                    RESULT.addHijo(p,lec);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_CUERPO",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_ETQS_CUERPO ::= ETQ_CUERPO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = e;
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_CUERPO",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_ETQS_CUERPO ::= L_ETQS_CUERPO ETQ_CUERPO 
            {
              Nodo RESULT =null;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = lec;
                    RESULT.addHijo(e);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_CUERPO",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ETQ_ENC ::= menor t_cjs L_PROPIEDADES TEXTO t_fin_cjs mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CJS);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_ENC",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ETQ_ENC ::= menor t_ccss L_PROPIEDADES TEXTO t_fin_ccss mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CCSS);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_ENC",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ETQ_ENC ::= menor t_titulo L_PROPIEDADES TEXTO t_fin_titulo mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TITULO);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_ENC",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ETQ_ENC ::= menor t_cjs TEXTO t_fin_cjs mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CJS);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_ENC",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ETQ_ENC ::= menor t_ccss TEXTO t_fin_ccss mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CCSS);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_ENC",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ETQ_ENC ::= menor t_titulo TEXTO t_fin_titulo mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TITULO);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ETQ_ENC",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_ETQS_ENC ::= ETQ_ENC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = e;
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_ENC",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_ETQS_ENC ::= L_ETQS_ENC ETQ_ENC 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = l;
                    RESULT.addHijo(e);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ETQS_ENC",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO ::= menor t_cuerpo L_PROPIEDADES TEXTO t_fin_cuerpo mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CUERPO);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= menor t_cuerpo L_PROPIEDADES mayor L_ETQS_CUERPO menor t_fin_cuerpo mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CUERPO);
                    RESULT.addHijo(p,lec);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO ::= menor t_cuerpo TEXTO t_fin_cuerpo mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CUERPO);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO ::= menor t_cuerpo mayor L_ETQS_CUERPO menor t_fin_cuerpo mayor 
            {
              Nodo RESULT =null;
		int lecleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lec = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CUERPO);
                    RESULT.addHijo(lec);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ENCABEZADO ::= menor t_encabezado L_PROPIEDADES TEXTO t_fin_encabezado mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.ENCABEZADO);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ENCABEZADO ::= menor t_encabezado L_PROPIEDADES mayor L_ETQS_ENC menor t_fin_encabezado mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int leeleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int leeright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lee = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.ENCABEZADO);
                    RESULT.addHijo(p,lee);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ENCABEZADO ::= menor t_encabezado TEXTO t_fin_encabezado mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.TITULO);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ENCABEZADO ::= menor t_encabezado mayor L_ETQS_ENC menor t_fin_encabezado mayor 
            {
              Nodo RESULT =null;
		int leeleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int leeright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo lee = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.TITULO);
                    RESULT.addHijo(lee);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO ::= ENCABEZADO CUERPO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCH.CONTENIDO);
                    RESULT.addHijo(e,c);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PROPIEDAD ::= t_fondo igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.FONDO);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROPIEDAD ::= t_valor igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.VALOR);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROPIEDAD ::= t_ruta igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.RUTA);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROPIEDAD ::= t_alineado igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.ALINEADO);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROPIEDAD ::= t_ancho igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.ANCHO);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROPIEDAD ::= t_alto igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.ALTO);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROPIEDAD ::= t_grupo igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.GRUPO);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROPIEDAD ::= t_id igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.FONDO);
                    RESULT.addHijo(ConsCH.ID,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROPIEDAD ::= t_click igual cadena pyc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
                    RESULT = new Nodo(ConsCH.CLICK);
                    RESULT.addHijo(ConsCH.CAD,cad,cadleft,cadright);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("PROPIEDAD",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_PROPIEDADES ::= PROPIEDAD 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCH.PROPIEDADES);
                    RESULT.addHijo(p);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_PROPIEDADES",2, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_PROPIEDADES ::= L_PROPIEDADES PROPIEDAD 
            {
              Nodo RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo lp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = lp;
                    RESULT.addHijo(p);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_PROPIEDADES",2, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CHTML ::= menor t_chtml L_PROPIEDADES TEXTO t_fin_chtml mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CHTML);
                    RESULT.addHijo(p,t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CHTML",1, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CHTML ::= menor t_chtml L_PROPIEDADES mayor CONTENIDO menor t_fin_chtml mayor 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CHTML);
                    RESULT.addHijo(p,c);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CHTML",1, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CHTML ::= menor t_chtml TEXTO t_fin_chtml mayor 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                    RESULT = new Nodo(ConsCH.CHTML);
                    RESULT.addHijo(t);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CHTML",1, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CHTML ::= menor t_chtml mayor CONTENIDO menor t_fin_chtml mayor 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                    RESULT = new Nodo(ConsCH.CHTML);
                    RESULT.addHijo(c);
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CHTML",1, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CHTML 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
                    RESULT = c;
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		RESULT = start_val;
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCH$parser.done_parsing();
          return CUP$parserCH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

