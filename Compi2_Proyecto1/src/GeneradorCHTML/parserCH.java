
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 19 00:55:02 CST 2018
//----------------------------------------------------

package GeneradorCHTML;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.lang.Math;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 19 00:55:02 CST 2018
  */
public class parserCH extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCH() {super();}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\021\004\000\002\022\011\000\002\020\011" +
    "\000\002\005\004\000\002\005\003\000\002\007\011\000" +
    "\002\007\015\000\002\007\015\000\002\007\014\000\002" +
    "\007\010\000\002\007\014\000\002\006\004\000\002\006" +
    "\003\000\002\010\013\000\002\010\011\000\002\010\012" +
    "\000\002\010\010\000\002\010\013\000\002\010\010\000" +
    "\002\010\013\000\002\010\011\000\002\010\013\000\002" +
    "\010\011\000\002\010\013\000\002\010\011\000\002\010" +
    "\015\000\002\010\014\000\002\010\013\000\002\010\011" +
    "\000\002\010\013\000\002\010\011\000\002\010\013\000" +
    "\002\010\011\000\002\010\013\000\002\010\011\000\002" +
    "\010\005\000\002\024\004\000\002\024\003\000\002\023" +
    "\014\000\002\023\015\000\002\011\005\000\002\011\003" +
    "\000\002\012\005\000\002\012\003\000\002\013\007\000" +
    "\002\013\010\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\014" +
    "\007\000\002\014\010\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\016\004\000\002\016\003\000\002" +
    "\030\012\000\002\030\011\000\002\015\004\000\002\015" +
    "\003\000\002\017\011\000\002\017\011\000\002\025\003" +
    "\000\002\025\013\000\002\025\011\000\002\025\013\000" +
    "\002\025\011\000\002\031\004\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\005" +
    "\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0156\000\004\005\005\001\002\000\004\002\000\001" +
    "\002\000\004\011\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\005\014\001\002\000\004\005\101\001\002\000\004" +
    "\005\076\001\002\000\004\012\015\001\002\000\004\006" +
    "\016\001\002\000\004\005\021\001\002\000\004\005\ufffa" +
    "\001\002\000\004\005\073\001\002\000\010\013\022\014" +
    "\023\015\024\001\002\000\004\040\056\001\002\000\004" +
    "\040\042\001\002\000\004\006\025\001\002\000\012\005" +
    "\032\076\026\100\030\103\031\001\002\000\012\005\uffb4" +
    "\076\uffb4\100\uffb4\103\uffb4\001\002\000\012\005\uffb5\076" +
    "\uffb5\100\uffb5\103\uffb5\001\002\000\012\005\uffb2\076\uffb2" +
    "\100\uffb2\103\uffb2\001\002\000\012\005\uffb3\076\uffb3\100" +
    "\uffb3\103\uffb3\001\002\000\004\054\040\001\002\000\012" +
    "\005\035\076\026\100\030\103\031\001\002\000\012\005" +
    "\uffb6\076\uffb6\100\uffb6\103\uffb6\001\002\000\004\054\036" +
    "\001\002\000\004\006\037\001\002\000\004\005\ufff9\001" +
    "\002\000\004\006\041\001\002\000\004\005\ufff5\001\002" +
    "\000\004\007\043\001\002\000\004\101\044\001\002\000" +
    "\004\004\045\001\002\000\004\006\046\001\002\000\012" +
    "\005\047\076\026\100\030\103\031\001\002\000\004\053" +
    "\054\001\002\000\012\005\051\076\026\100\030\103\031" +
    "\001\002\000\004\053\052\001\002\000\004\006\053\001" +
    "\002\000\004\005\ufff8\001\002\000\004\006\055\001\002" +
    "\000\004\005\ufff6\001\002\000\004\007\057\001\002\000" +
    "\004\101\060\001\002\000\004\004\061\001\002\000\004" +
    "\006\062\001\002\000\012\005\063\076\026\100\030\103" +
    "\031\001\002\000\004\052\070\001\002\000\012\005\065" +
    "\076\026\100\030\103\031\001\002\000\004\052\066\001" +
    "\002\000\004\006\067\001\002\000\004\005\ufff7\001\002" +
    "\000\004\006\071\001\002\000\004\005\ufff4\001\002\000" +
    "\004\005\ufffb\001\002\000\012\013\022\014\023\015\024" +
    "\051\074\001\002\000\004\006\075\001\002\000\004\005" +
    "\ufffd\001\002\000\004\050\077\001\002\000\004\006\100" +
    "\001\002\000\004\002\uffff\001\002\000\004\016\103\001" +
    "\002\000\004\005\ufffe\001\002\000\004\006\104\001\002" +
    "\000\004\005\107\001\002\000\004\005\u0156\001\002\000" +
    "\004\005\ufff2\001\002\000\030\017\122\020\113\021\114" +
    "\022\112\023\111\024\121\025\110\032\115\033\116\035" +
    "\117\036\120\001\002\000\020\006\u010f\037\132\041\123" +
    "\042\131\043\126\044\124\045\127\001\002\000\022\006" +
    "\u0103\037\244\040\241\041\235\042\243\043\237\044\234" +
    "\045\242\001\002\000\022\006\367\037\244\040\241\041" +
    "\235\042\243\043\237\044\234\045\242\001\002\000\020" +
    "\006\354\037\132\041\123\042\131\043\126\044\124\045" +
    "\127\001\002\000\020\006\340\037\132\041\123\042\131" +
    "\043\126\044\124\045\127\001\002\000\020\006\324\037" +
    "\132\041\123\042\131\043\126\044\124\045\127\001\002" +
    "\000\022\006\245\037\244\040\241\041\235\042\243\043" +
    "\237\044\234\045\242\001\002\000\020\006\221\037\132" +
    "\041\123\042\131\043\126\044\124\045\127\001\002\000" +
    "\004\006\217\001\002\000\004\040\203\001\002\000\020" +
    "\006\133\037\132\041\123\042\131\043\126\044\124\045" +
    "\127\001\002\000\004\007\201\001\002\000\004\007\177" +
    "\001\002\000\006\004\uffd5\006\uffd5\001\002\000\004\007" +
    "\175\001\002\000\004\007\173\001\002\000\004\004\161" +
    "\001\002\000\004\007\157\001\002\000\004\007\143\001" +
    "\002\000\004\005\135\001\002\000\004\005\140\001\002" +
    "\000\032\017\122\020\113\021\114\022\112\023\111\024" +
    "\121\025\110\032\115\033\116\035\117\036\120\056\136" +
    "\001\002\000\004\006\137\001\002\000\004\005\uffee\001" +
    "\002\000\004\056\141\001\002\000\004\006\142\001\002" +
    "\000\004\005\ufff0\001\002\000\010\076\144\100\146\101" +
    "\145\001\002\000\010\004\uffb0\006\uffb0\075\uffb0\001\002" +
    "\000\010\004\uffb1\006\uffb1\075\uffb1\001\002\000\010\004" +
    "\uffaf\006\uffaf\075\uffaf\001\002\000\004\075\150\001\002" +
    "\000\006\074\151\100\152\001\002\000\006\004\uffd2\006" +
    "\uffd2\001\002\000\006\010\uffad\074\uffad\001\002\000\006" +
    "\010\155\074\154\001\002\000\006\004\uffd1\006\uffd1\001" +
    "\002\000\004\100\156\001\002\000\006\010\uffae\074\uffae" +
    "\001\002\000\010\076\144\100\146\101\145\001\002\000" +
    "\006\004\uffcf\006\uffcf\001\002\000\020\006\163\037\132" +
    "\041\123\042\131\043\126\044\124\045\127\001\002\000" +
    "\006\004\uffd6\006\uffd6\001\002\000\004\005\165\001\002" +
    "\000\004\005\170\001\002\000\032\017\122\020\113\021" +
    "\114\022\112\023\111\024\121\025\110\032\115\033\116" +
    "\035\117\036\120\056\166\001\002\000\004\006\167\001" +
    "\002\000\004\005\uffef\001\002\000\004\056\171\001\002" +
    "\000\004\006\172\001\002\000\004\005\ufff1\001\002\000" +
    "\010\076\144\100\146\101\145\001\002\000\006\004\uffcc" +
    "\006\uffcc\001\002\000\010\076\144\100\146\101\145\001" +
    "\002\000\006\004\uffce\006\uffce\001\002\000\010\076\144" +
    "\100\146\101\145\001\002\000\006\004\uffcd\006\uffcd\001" +
    "\002\000\010\076\144\100\146\101\145\001\002\000\006" +
    "\004\uffd0\006\uffd0\001\002\000\004\007\204\001\002\000" +
    "\004\101\205\001\002\000\004\004\206\001\002\000\004" +
    "\006\207\001\002\000\012\005\210\076\026\100\030\103" +
    "\031\001\002\000\004\063\215\001\002\000\012\005\212" +
    "\076\026\100\030\103\031\001\002\000\004\063\213\001" +
    "\002\000\004\006\214\001\002\000\004\005\uffe5\001\002" +
    "\000\004\006\216\001\002\000\004\005\uffe4\001\002\000" +
    "\004\005\uffdb\001\002\000\004\004\226\001\002\000\004" +
    "\076\222\001\002\000\004\005\223\001\002\000\004\073" +
    "\224\001\002\000\004\006\225\001\002\000\004\005\uffdc" +
    "\001\002\000\020\006\227\037\132\041\123\042\131\043" +
    "\126\044\124\045\127\001\002\000\004\076\230\001\002" +
    "\000\004\005\231\001\002\000\004\073\232\001\002\000" +
    "\004\006\233\001\002\000\004\005\uffdd\001\002\000\004" +
    "\007\321\001\002\000\004\007\317\001\002\000\004\004" +
    "\310\001\002\000\004\007\306\001\002\000\004\004\uffd3" +
    "\001\002\000\004\007\304\001\002\000\004\007\302\001" +
    "\002\000\004\007\300\001\002\000\004\007\272\001\002" +
    "\000\004\005\250\001\002\000\004\005\267\001\002\000" +
    "\004\005\uffd9\001\002\000\004\034\251\001\002\000\004" +
    "\031\252\001\002\000\004\007\253\001\002\000\010\076" +
    "\144\100\146\101\145\001\002\000\004\004\255\001\002" +
    "\000\004\006\256\001\002\000\012\005\257\076\026\100" +
    "\030\103\031\001\002\000\004\072\264\001\002\000\012" +
    "\005\261\076\026\100\030\103\031\001\002\000\004\072" +
    "\262\001\002\000\004\006\263\001\002\000\004\005\uffd7" +
    "\001\002\000\004\006\265\001\002\000\004\005\uffd8\001" +
    "\002\000\004\005\uffda\001\002\000\006\034\251\071\270" +
    "\001\002\000\004\006\271\001\002\000\004\005\uffde\001" +
    "\002\000\010\076\144\100\146\101\145\001\002\000\004" +
    "\075\274\001\002\000\006\074\275\100\152\001\002\000" +
    "\004\004\uffcb\001\002\000\006\010\155\074\277\001\002" +
    "\000\004\004\uffca\001\002\000\010\076\144\100\146\101" +
    "\145\001\002\000\004\004\uffc7\001\002\000\010\076\144" +
    "\100\146\101\145\001\002\000\004\004\uffc4\001\002\000" +
    "\010\076\144\100\146\101\145\001\002\000\004\004\uffc9" +
    "\001\002\000\010\076\144\100\146\101\145\001\002\000" +
    "\004\004\uffc6\001\002\000\022\006\312\037\244\040\241" +
    "\041\235\042\243\043\237\044\234\045\242\001\002\000" +
    "\004\004\uffd4\001\002\000\004\005\250\001\002\000\004" +
    "\005\314\001\002\000\006\034\251\071\315\001\002\000" +
    "\004\006\316\001\002\000\004\005\uffdf\001\002\000\010" +
    "\076\144\100\146\101\145\001\002\000\004\004\uffc8\001" +
    "\002\000\010\076\144\100\146\101\145\001\002\000\004" +
    "\004\uffc5\001\002\000\004\004\331\001\002\000\010\076" +
    "\026\100\030\103\031\001\002\000\012\005\326\076\026" +
    "\100\030\103\031\001\002\000\004\070\327\001\002\000" +
    "\004\006\330\001\002\000\004\005\uffe0\001\002\000\020" +
    "\006\332\037\132\041\123\042\131\043\126\044\124\045" +
    "\127\001\002\000\010\076\026\100\030\103\031\001\002" +
    "\000\012\005\334\076\026\100\030\103\031\001\002\000" +
    "\004\070\335\001\002\000\004\006\336\001\002\000\004" +
    "\005\uffe1\001\002\000\004\004\345\001\002\000\010\076" +
    "\026\100\030\103\031\001\002\000\012\005\342\076\026" +
    "\100\030\103\031\001\002\000\004\060\343\001\002\000" +
    "\004\006\344\001\002\000\004\005\uffea\001\002\000\020" +
    "\006\346\037\132\041\123\042\131\043\126\044\124\045" +
    "\127\001\002\000\010\076\026\100\030\103\031\001\002" +
    "\000\012\005\350\076\026\100\030\103\031\001\002\000" +
    "\004\060\351\001\002\000\004\006\352\001\002\000\004" +
    "\005\uffeb\001\002\000\004\004\360\001\002\000\004\005" +
    "\355\001\002\000\004\057\356\001\002\000\004\006\357" +
    "\001\002\000\004\005\uffec\001\002\000\020\006\361\037" +
    "\132\041\123\042\131\043\126\044\124\045\127\001\002" +
    "\000\010\076\026\100\030\103\031\001\002\000\012\005" +
    "\363\076\026\100\030\103\031\001\002\000\004\057\364" +
    "\001\002\000\004\006\365\001\002\000\004\005\uffed\001" +
    "\002\000\004\004\374\001\002\000\010\076\026\100\030" +
    "\103\031\001\002\000\012\005\371\076\026\100\030\103" +
    "\031\001\002\000\004\061\372\001\002\000\004\006\373" +
    "\001\002\000\004\005\uffe8\001\002\000\022\006\375\037" +
    "\244\040\241\041\235\042\243\043\237\044\234\045\242" +
    "\001\002\000\010\076\026\100\030\103\031\001\002\000" +
    "\012\005\377\076\026\100\030\103\031\001\002\000\004" +
    "\061\u0100\001\002\000\004\006\u0101\001\002\000\004\005" +
    "\uffe9\001\002\000\004\004\u0108\001\002\000\010\076\026" +
    "\100\030\103\031\001\002\000\012\005\u0105\076\026\100" +
    "\030\103\031\001\002\000\004\062\u0106\001\002\000\004" +
    "\006\u0107\001\002\000\004\005\uffe6\001\002\000\022\006" +
    "\u0109\037\244\040\241\041\235\042\243\043\237\044\234" +
    "\045\242\001\002\000\010\076\026\100\030\103\031\001" +
    "\002\000\012\005\u010b\076\026\100\030\103\031\001\002" +
    "\000\004\062\u010c\001\002\000\004\006\u010d\001\002\000" +
    "\004\005\uffe7\001\002\000\004\004\u014f\001\002\000\004" +
    "\005\u0111\001\002\000\004\005\u014b\001\002\000\004\026" +
    "\u0113\001\002\000\004\005\uffc2\001\002\000\020\006\u0115" +
    "\037\132\041\123\042\131\043\126\044\124\045\127\001" +
    "\002\000\006\004\u0145\006\u0146\001\002\000\004\005\u0117" +
    "\001\002\000\004\005\u0141\001\002\000\006\027\u0119\030" +
    "\u011a\001\002\000\004\005\uffbe\001\002\000\004\006\u013c" +
    "\001\002\000\004\006\u011b\001\002\000\012\005\u011d\076" +
    "\026\100\030\103\031\001\002\000\004\005\u0139\001\002" +
    "\000\006\022\u0120\023\u011f\001\002\000\012\005\uffbb\076" +
    "\026\100\030\103\031\001\002\000\022\006\u012e\037\244" +
    "\040\241\041\235\042\243\043\237\044\234\045\242\001" +
    "\002\000\022\006\u0122\037\244\040\241\041\235\042\243" +
    "\043\237\044\234\045\242\001\002\000\004\004\u0127\001" +
    "\002\000\010\076\026\100\030\103\031\001\002\000\012" +
    "\005\u0124\076\026\100\030\103\031\001\002\000\004\061" +
    "\u0125\001\002\000\004\006\u0126\001\002\000\004\005\uffb9" +
    "\001\002\000\022\006\u0128\037\244\040\241\041\235\042" +
    "\243\043\237\044\234\045\242\001\002\000\010\076\026" +
    "\100\030\103\031\001\002\000\012\005\u012a\076\026\100" +
    "\030\103\031\001\002\000\004\061\u012b\001\002\000\004" +
    "\006\u012c\001\002\000\004\005\uffba\001\002\000\004\004" +
    "\u0133\001\002\000\010\076\026\100\030\103\031\001\002" +
    "\000\012\005\u0130\076\026\100\030\103\031\001\002\000" +
    "\004\062\u0131\001\002\000\004\006\u0132\001\002\000\004" +
    "\005\uffb7\001\002\000\022\006\u0134\037\244\040\241\041" +
    "\235\042\243\043\237\044\234\045\242\001\002\000\010" +
    "\076\026\100\030\103\031\001\002\000\012\005\u0136\076" +
    "\026\100\030\103\031\001\002\000\004\062\u0137\001\002" +
    "\000\004\006\u0138\001\002\000\004\005\uffb8\001\002\000" +
    "\004\067\u013a\001\002\000\004\006\u013b\001\002\000\004" +
    "\005\uffbc\001\002\000\012\005\u011d\076\026\100\030\103" +
    "\031\001\002\000\004\005\u013e\001\002\000\004\066\u013f" +
    "\001\002\000\004\006\u0140\001\002\000\004\005\uffbd\001" +
    "\002\000\010\027\u0119\030\u011a\065\u0143\001\002\000\004" +
    "\005\uffbf\001\002\000\004\006\u0144\001\002\000\004\005" +
    "\uffc0\001\002\000\016\037\132\041\123\042\131\043\126" +
    "\044\124\045\127\001\002\000\004\005\u0117\001\002\000" +
    "\004\005\u0148\001\002\000\010\027\u0119\030\u011a\065\u0149" +
    "\001\002\000\004\006\u014a\001\002\000\004\005\uffc1\001" +
    "\002\000\006\026\u0113\064\u014d\001\002\000\004\005\uffc3" +
    "\001\002\000\004\006\u014e\001\002\000\004\005\uffe2\001" +
    "\002\000\020\006\u0150\037\132\041\123\042\131\043\126" +
    "\044\124\045\127\001\002\000\004\005\u0111\001\002\000" +
    "\004\005\u0152\001\002\000\006\026\u0113\064\u0153\001\002" +
    "\000\004\006\u0154\001\002\000\004\005\uffe3\001\002\000" +
    "\004\005\ufff3\001\002\000\032\017\122\020\113\021\114" +
    "\022\112\023\111\024\121\025\110\032\115\033\116\035" +
    "\117\036\120\055\u0157\001\002\000\004\006\u0158\001\002" +
    "\000\004\005\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0156\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\012\022\011\001\001\000" +
    "\004\020\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\007\016\001\001\000" +
    "\002\001\001\000\004\007\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\032\032\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\047\032" +
    "\026\001\001\000\002\001\001\000\004\032\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\063\032\026\001\001\000\002\001\001\000\004\032\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\104\010\105\001\001\000\004\010\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u010d\013\124\001" +
    "\001\000\006\012\u0101\014\237\001\001\000\006\012\365" +
    "\014\237\001\001\000\006\011\352\013\124\001\001\000" +
    "\006\011\336\013\124\001\001\000\006\011\322\013\124" +
    "\001\001\000\006\012\235\014\237\001\001\000\006\011" +
    "\217\013\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\127\013\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\157" +
    "\001\001\000\002\001\001\000\004\013\161\001\001\000" +
    "\002\001\001\000\004\010\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\173\001\001\000\002\001\001\000\004\026\175\001" +
    "\001\000\002\001\001\000\004\026\177\001\001\000\002" +
    "\001\001\000\004\026\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\210\032\026\001\001\000\002\001" +
    "\001\000\004\032\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\246\024\245\001\001\000\004\023\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\257\032\026\001\001" +
    "\000\002\001\001\000\004\032\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\272\001\001" +
    "\000\002\001\001\000\004\027\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\300" +
    "\001\001\000\002\001\001\000\004\026\302\001\001\000" +
    "\002\001\001\000\004\026\304\001\001\000\002\001\001" +
    "\000\004\026\306\001\001\000\002\001\001\000\004\014" +
    "\310\001\001\000\002\001\001\000\006\023\246\024\312" +
    "\001\001\000\004\023\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\317\001\001" +
    "\000\002\001\001\000\004\026\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\324\032\026\001\001" +
    "\000\004\032\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\161\001\001\000\006" +
    "\031\332\032\026\001\001\000\004\032\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\340\032\026\001\001\000\004\032" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\161\001\001\000\006\031\346\032" +
    "\026\001\001\000\004\032\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\161\001\001\000\006\031\361\032" +
    "\026\001\001\000\004\032\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\367\032\026\001\001\000\004\032\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\310\001\001\000\006\031\375\032\026\001\001" +
    "\000\004\032\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u0103" +
    "\032\026\001\001\000\004\032\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\310" +
    "\001\001\000\006\031\u0109\032\026\001\001\000\004\032" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\u010f\030\u0111\001" +
    "\001\000\004\030\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\u0113\013\124\001\001\000\002\001" +
    "\001\000\006\015\u0115\017\u0117\001\001\000\004\017\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\u011b\031\u011d\032\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\033\001\001\000\006\012\u012c\014\237\001\001\000\006" +
    "\012\u0120\014\237\001\001\000\002\001\001\000\006\031" +
    "\u0122\032\026\001\001\000\004\032\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\310\001\001\000\006\031\u0128\032\026\001\001\000\004" +
    "\032\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\u012e\032\026" +
    "\001\001\000\004\032\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\310\001\001" +
    "\000\006\031\u0134\032\026\001\001\000\004\032\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\u013c\031\u011d\032\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\161\001\001\000\006\015\u0146\017" +
    "\u0117\001\001\000\004\017\u0141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\161\001\001\000\006\016\u0150\030\u0111\001\001\000" +
    "\004\030\u014b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);       
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }   
  
    public void escribir_fichero(String texto, String nombre) throws IOException {
        String ruta = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";
        File archivo = new File(ruta);
        BufferedWriter bw;
        if (archivo.createNewFile()) {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(texto);
        }
        bw.close();

    }
    public int contador = 0;

    public void grafico(String nombre) {
        try {

            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            String fileInputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".txt";

            String fileOutputPath = "C:\\Users\\andree\\Documents\\NetBeansProjects\\[OLC1]Proyecto1_201408603\\imagenes\\" + nombre + ".jpg";
            String tParam = "-Tjpg";
            String tOParam = "-o";
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;
            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }  

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCH$actions {







  private final parserCH parser;

  /** Constructor */
  CUP$parserCH$actions(parserCH parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCH$do_action(
    int                        CUP$parserCH$act_num,
    java_cup.runtime.lr_parser CUP$parserCH$parser,
    java.util.Stack            CUP$parserCH$stack,
    int                        CUP$parserCH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCH$result;

      /* select the action based on the action number */
      switch (CUP$parserCH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L_PAR ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    RESULT = new Nodo("L_PARAMETROS");
    RESULT.getListaDehojas().add(new Nodo(id));
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L_PAR ::= L_PAR coma identificador 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    RESULT = val;
    RESULT.getListaDehojas().add(new Nodo(id));
    
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    RESULT = new Nodo("E");
    RESULT.getListaDehojas().add(new Nodo(id));
    
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= numero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    RESULT = new Nodo("E");
    RESULT.getListaDehojas().add(new Nodo(num));
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		 
    RESULT = new Nodo("E");
    
    RESULT.getListaDehojas().add(new Nodo(cad.substring(1, cad.length()-1)));
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_ID ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = id;
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_ID ::= otro_simb 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = si;
       
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_ID ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = num;
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_ID ::= LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = val; 
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L_ID ::= L_ID LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    
        RESULT = val + " " + id;
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONT_COL ::= menor pr_boton mayor L_ID menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new Nodo("BOTON"));
        RESULT.getListaDehojas().add(new Nodo(id));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONT_COL ::= menor pr_boton L_AT2 p_coma mayor L_ID menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new Nodo("BOTON"));
        RESULT.getListaDehojas().add(lista);
        RESULT.getListaDehojas().add(new Nodo(id));


    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONT_COL ::= menor pr_imagen mayor L_ID menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new Nodo("IMAGEN"));
        RESULT.getListaDehojas().add(new Nodo(id));
        

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONT_COL ::= menor pr_imagen L_AT2 p_coma mayor L_ID menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new Nodo("IMAGEN"));
        RESULT.getListaDehojas().add(lista);
        RESULT.getListaDehojas().add(new Nodo(id));

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONT_COL ::= L_ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = new Nodo("CONTENIDO_COLUMNA");
        RESULT.getListaDehojas().add(new Nodo(id));

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONT_FIL ::= menor pr_ct mayor CONT_COL menor pr_finct mayor 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            RESULT = new Nodo("CONT_FIL");
            RESULT.getListaDehojas().add(new Nodo("CT"));
            RESULT.getListaDehojas().add(cont);
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONT_FIL ::= menor pr_cb mayor CONT_COL menor pr_fincb mayor 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            RESULT = new Nodo("CONT_FIL");
            RESULT.getListaDehojas().add(new Nodo("CB"));
            RESULT.getListaDehojas().add(cont);
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CU_FIL ::= CONT_FIL 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("CU_FIL");
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CU_FIL ::= CU_FIL CONT_FIL 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(id);
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO_TABLA ::= menor pr_fil_t mayor CU_FIL menor pr_finfil_t mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            RESULT = new Nodo("CUERPO_TABLA");
            RESULT.getListaDehojas().add(val);
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO_TABLA ::= menor pr_fil_t L_AT mayor CU_FIL menor pr_finfil_t mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            RESULT = new Nodo("CUERPO_TABLA");
            RESULT.getListaDehojas().add(atr);
            RESULT.getListaDehojas().add(val);

        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CU_T ::= CUERPO_TABLA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        RESULT = new Nodo("CU_T");
        RESULT.getListaDehojas().add(val);
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CU_T ::= CU_T CUERPO_TABLA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(cuerpo);
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_ATRIBUTOS2 ::= pr_alineado igual E 
            {
              Nodo RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("Alineado"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L_ATRIBUTOS2 ::= pr_ancho igual E 
            {
              Nodo RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("Ancho"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_ATRIBUTOS2 ::= pr_alto igual E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("alto"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_ATRIBUTOS2 ::= pr_grupo igual E 
            {
              Nodo RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("grupo"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // L_ATRIBUTOS2 ::= pr_id igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("ID"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L_ATRIBUTOS2 ::= pr_ruta igual E 
            {
              Nodo RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ruta = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("Ruta"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            

            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_ATRIBUTOS2 ::= pr_click igual E pr_parA L_PAR pr_parC 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("Igual"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new Nodo("("));
            RESULT.getListaDehojas().add(val2);
            RESULT.getListaDehojas().add(new Nodo(")"));


            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_ATRIBUTOS2 ::= pr_click igual E pr_parA pr_parC 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            RESULT = new Nodo("L_ATRIBUTOS2");
            RESULT.getListaDehojas().add(new Nodo("Click"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new Nodo("("));
            RESULT.getListaDehojas().add(new Nodo(")"));

            

            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L_ATRIBUTOS ::= pr_alineado igual E 
            {
              Nodo RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new Nodo("Alineado"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_ATRIBUTOS ::= pr_ancho igual E 
            {
              Nodo RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            RESULT = new Nodo("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new Nodo("Ancho"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_ATRIBUTOS ::= pr_alto igual E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new Nodo("alto"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L_ATRIBUTOS ::= pr_grupo igual E 
            {
              Nodo RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new Nodo("grupo"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L_ATRIBUTOS ::= pr_id igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new Nodo("ID"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L_ATRIBUTOS ::= pr_click igual E pr_parA L_PAR pr_parC 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		
            RESULT = new Nodo("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new Nodo("Igual"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new Nodo("("));
            RESULT.getListaDehojas().add(val2);
            RESULT.getListaDehojas().add(new Nodo(")"));


            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L_ATRIBUTOS ::= pr_click igual E pr_parA pr_parC 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            RESULT = new Nodo("L_ATRIBUTOS");
            RESULT.getListaDehojas().add(new Nodo("Click"));
            RESULT.getListaDehojas().add(new Nodo("="));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new Nodo("("));
            RESULT.getListaDehojas().add(new Nodo(")"));

            

            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L_AT2 ::= L_ATRIBUTOS2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_AT2");
            RESULT.getListaDehojas().add(val);
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L_AT2 ::= L_AT2 p_coma L_ATRIBUTOS2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(new Nodo(";"));
            RESULT.getListaDehojas().add(hijo);
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_AT ::= L_ATRIBUTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = new Nodo("L_AT");
            RESULT.getListaDehojas().add(val);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_AT ::= L_AT p_coma L_ATRIBUTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(new Nodo(";"));
        RESULT.getListaDehojas().add(hijo);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma mayor L_ID menor pr_finopcion mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            RESULT = new Nodo("NUEVO");
            RESULT.getListaDehojas().add(new Nodo("opcion"));
            RESULT.getListaDehojas().add(val);
            RESULT.getListaDehojas().add(new Nodo(id));

        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-10)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma mayor menor pr_finopcion mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
            RESULT = new Nodo("NUEVO");
            RESULT.getListaDehojas().add(new Nodo("opcion"));
            RESULT.getListaDehojas().add(val);
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CAJA_OP ::= NUEVO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = val;
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CAJA_OP ::= CAJA_OP NUEVO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            RESULT = val;
            RESULT.getListaDehojas().add(otro);
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CU ::= menor pr_salto mayor 
            {
              Nodo RESULT =null;
		
         RESULT = new Nodo("CU");
         RESULT.getListaDehojas().add(new Nodo("salto"));
         

        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CU ::= menor pr_spinner mayor numero menor pr_finspinner mayor 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
         RESULT = new Nodo("CU");
         RESULT.getListaDehojas().add(new Nodo("Spinner " + n));
         
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CU ::= menor pr_spinner L_AT p_coma mayor numero menor pr_finspinner mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		
         RESULT = new Nodo("CU");
         RESULT.getListaDehojas().add(val);
         RESULT.getListaDehojas().add(new Nodo("salto"));
         
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CU ::= menor pr_caja mayor CAJA_OP menor pr_fincaja mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("Caja"));
        RESULT.getListaDehojas().add(val);

         
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CU ::= menor pr_caja L_AT2 p_coma mayor CAJA_OP menor pr_fincaja mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("Caja"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CU ::= menor pr_texto_a mayor L_ID menor pr_fintexto_a mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("TEXTO_A"));
        RESULT.getListaDehojas().add(new Nodo(val));

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CU ::= menor pr_texto_a L_AT p_coma mayor L_ID menor pr_fintexto_a mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("TEXTO_A"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new Nodo(cont));

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CU ::= menor pr_tabla mayor CU_T menor pr_fintabla mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("TABLA"));
        RESULT.getListaDehojas().add(val);

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CU ::= menor pr_tabla L_AT p_coma mayor CU_T menor pr_fintabla mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("TABLA"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cont);

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma mayor menor pr_finenlace mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("ENLACE "));
        

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma mayor L_ID menor pr_finenlace mayor 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("ENLACE" + cad.substring(1, cad.length()-1)));
        RESULT.getListaDehojas().add(new Nodo(val));
       
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-10)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CU ::= menor pr_boton mayor L_ID menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("BOTON"));
        RESULT.getListaDehojas().add(new Nodo(val));
        

    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CU ::= menor pr_boton L_AT2 p_coma mayor L_ID menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("BOTON"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new Nodo(id));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CU ::= menor pr_imagen mayor L_ID menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("BOTON"));
        RESULT.getListaDehojas().add(new Nodo(val));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CU ::= menor pr_imagen L_AT2 p_coma mayor L_ID menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("IMAGEN"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new Nodo(id));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CU ::= menor pr_caja_texto mayor L_ID menor pr_fincaja_texto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(new Nodo(val));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CU ::= menor pr_caja_texto L_AT p_coma mayor L_ID menor pr_fincaja_texto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("CAJA_TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new Nodo(id));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CU ::= menor pr_texto mayor menor pr_fintexto mayor 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("TEXTO"));
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CU ::= menor pr_texto L_AT p_coma mayor L_ID menor pr_fintexto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("TEXTO"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(new Nodo(id));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CU ::= menor pr_panel mayor menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("PANEL"));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CU ::= menor pr_panel L_AT p_coma mayor menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CU ::= menor pr_panel mayor CU menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("PANEL"));
        RESULT.getListaDehojas().add(val);
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CU ::= menor pr_panel L_AT p_coma mayor CU menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("PANEL"));
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(valor);
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONT_C ::= CU 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = new Nodo("CONT_C");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONT_C ::= CONT_C CU 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(valor);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma mayor menor pr_fincjs mayor 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("REP");
        RESULT.getListaDehojas().add(new Nodo("PR_CJS"));
       
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REP ::= menor pr_titulo mayor menor pr_fintitulo mayor 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("REP");
        RESULT.getListaDehojas().add(new Nodo("TITULO"));
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma mayor menor pr_finccss mayor 
            {
              Nodo RESULT =null;
		
        RESULT = new Nodo("REP");
        RESULT.getListaDehojas().add(new Nodo("PR_CCSS"));
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma mayor L_ID menor pr_fincjs mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("REP");
        RESULT.getListaDehojas().add(new Nodo("CJS"));
        RESULT.getListaDehojas().add(new Nodo(val));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-10)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma mayor L_ID menor pr_finccss mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CU");
        RESULT.getListaDehojas().add(new Nodo("CCSS"));
        RESULT.getListaDehojas().add(new Nodo(val));
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-10)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // REP ::= menor pr_titulo mayor L_ID menor pr_fintitulo mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("REP");
        RESULT.getListaDehojas().add(new Nodo("TITULO"));
        RESULT.getListaDehojas().add(new Nodo(val));
        
    
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONT_EN ::= REP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = new Nodo("CONT_EN");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONT_EN ::= CONT_EN REP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int nuevoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int nuevoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo nuevo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = val;
        RESULT.getListaDehojas().add(nuevo);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= menor pr_cuerpo mayor CONT_C menor pr_fincuerpo mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("CUERPO");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= menor pr_encabezado mayor CONT_EN menor pr_finencabezado mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            RESULT = new Nodo("ENCABEZADO");
        RESULT.getListaDehojas().add(val);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= ENCABEZADO CUERPO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
         RESULT = new Nodo("CONTENIDO");
        RESULT.getListaDehojas().add(val);
        RESULT.getListaDehojas().add(cuerpo);
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONTENIDO",15, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // H ::= menor pr_chtml mayor CONTENIDO menor pr_finchtml mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        RESULT = new Nodo("H");
        RESULT.getListaDehojas().add(val);
        

              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("H",1, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= H 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        RESULT = val;
        System.out.println(RESULT.getNombre() + "-----------");
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		RESULT = start_val;
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCH$parser.done_parsing();
          return CUP$parserCH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

