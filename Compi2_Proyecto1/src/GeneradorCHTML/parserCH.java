
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 22 01:17:28 CST 2018
//----------------------------------------------------

package GeneradorCHTML;

import AST.Nodo;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 22 01:17:28 CST 2018
  */
public class parserCH extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCH() {super();}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\021\004\000\002\022\011\000\002\020\011" +
    "\000\002\020\015\000\002\005\004\000\002\005\003\000" +
    "\002\007\007\000\002\007\013\000\002\007\013\000\002" +
    "\007\014\000\002\007\010\000\002\007\014\000\002\006" +
    "\004\000\002\006\003\000\002\010\013\000\002\010\011" +
    "\000\002\010\012\000\002\010\010\000\002\010\011\000" +
    "\002\010\012\000\002\010\010\000\002\010\007\000\002" +
    "\010\011\000\002\010\012\000\002\010\007\000\002\010" +
    "\010\000\002\010\011\000\002\010\012\000\002\010\007" +
    "\000\002\010\010\000\002\010\011\000\002\010\012\000" +
    "\002\010\007\000\002\010\010\000\002\010\013\000\002" +
    "\010\013\000\002\010\014\000\002\010\011\000\002\010" +
    "\010\000\002\010\007\000\002\010\011\000\002\010\012" +
    "\000\002\010\007\000\002\010\010\000\002\010\013\000" +
    "\002\010\011\000\002\010\011\000\002\010\012\000\002" +
    "\010\007\000\002\010\010\000\002\010\005\000\002\024" +
    "\004\000\002\024\003\000\002\023\014\000\002\023\013" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\016\004\000\002\016\003\000\002" +
    "\030\013\000\002\030\011\000\002\030\010\000\002\015" +
    "\004\000\002\015\003\000\002\017\013\000\002\017\011" +
    "\000\002\017\012\000\002\017\011\000\002\017\007\000" +
    "\002\017\010\000\002\017\011\000\002\017\010\000\002" +
    "\017\007\000\002\017\011\000\002\017\012\000\002\017" +
    "\013\000\002\025\011\000\002\025\012\000\002\025\007" +
    "\000\002\025\010\000\002\025\011\000\002\025\012\000" +
    "\002\025\007\000\002\025\010\000\002\031\004\000\002" +
    "\031\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\027\005\000\002\027\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\004\005\005\001\002\000\004\002\000\001" +
    "\002\000\004\011\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\006\011\001\002\000" +
    "\004\005\014\001\002\000\004\005\071\001\002\000\004" +
    "\005\066\001\002\000\004\012\015\001\002\000\004\006" +
    "\016\001\002\000\004\005\021\001\002\000\004\005\ufff9" +
    "\001\002\000\004\005\063\001\002\000\010\013\022\014" +
    "\023\015\024\001\002\000\004\041\047\001\002\000\004" +
    "\041\034\001\002\000\006\006\025\104\026\001\002\000" +
    "\004\005\031\001\002\000\004\055\027\001\002\000\004" +
    "\006\030\001\002\000\004\005\ufff8\001\002\000\004\055" +
    "\032\001\002\000\004\006\033\001\002\000\004\005\ufff4" +
    "\001\002\000\004\007\035\001\002\000\004\103\036\001" +
    "\002\000\004\004\037\001\002\000\006\006\040\104\041" +
    "\001\002\000\004\005\044\001\002\000\004\054\042\001" +
    "\002\000\004\006\043\001\002\000\004\005\ufff7\001\002" +
    "\000\004\054\045\001\002\000\004\006\046\001\002\000" +
    "\004\005\ufff5\001\002\000\004\007\050\001\002\000\004" +
    "\103\051\001\002\000\004\004\052\001\002\000\006\006" +
    "\053\104\054\001\002\000\004\005\057\001\002\000\004" +
    "\053\055\001\002\000\004\006\056\001\002\000\004\005" +
    "\ufff6\001\002\000\004\053\060\001\002\000\004\006\061" +
    "\001\002\000\004\005\ufff3\001\002\000\004\005\ufffa\001" +
    "\002\000\012\013\022\014\023\015\024\052\064\001\002" +
    "\000\004\006\065\001\002\000\004\005\ufffd\001\002\000" +
    "\004\051\067\001\002\000\004\006\070\001\002\000\004" +
    "\002\uffff\001\002\000\004\016\073\001\002\000\004\005" +
    "\ufffe\001\002\000\006\006\075\021\074\001\002\000\004" +
    "\007\u0193\001\002\000\004\005\100\001\002\000\004\005" +
    "\u0190\001\002\000\004\005\ufff1\001\002\000\030\017\113" +
    "\020\104\022\105\023\103\024\102\025\112\026\101\033" +
    "\106\034\107\036\111\037\110\001\002\000\022\006\u0116" +
    "\040\123\042\115\043\122\044\117\045\114\046\120\104" +
    "\u0114\001\002\000\024\006\u0106\040\232\041\227\042\223" +
    "\043\231\044\225\045\222\046\230\104\u0105\001\002\000" +
    "\024\006\366\040\232\041\227\042\223\043\231\044\225" +
    "\045\222\046\230\104\365\001\002\000\022\006\346\040" +
    "\123\042\115\043\122\044\117\045\114\046\120\104\344" +
    "\001\002\000\022\006\326\040\123\042\115\043\122\044" +
    "\117\045\114\046\120\104\324\001\002\000\022\006\306" +
    "\040\123\042\115\043\122\044\117\045\114\046\120\104" +
    "\304\001\002\000\022\006\233\040\232\041\227\042\223" +
    "\043\231\044\225\045\222\046\230\001\002\000\004\006" +
    "\221\001\002\000\022\006\203\040\123\042\115\043\122" +
    "\044\117\045\114\046\120\104\201\001\002\000\004\041" +
    "\166\001\002\000\020\006\124\040\123\042\115\043\122" +
    "\044\117\045\114\046\120\001\002\000\004\007\164\001" +
    "\002\000\004\007\162\001\002\000\004\004\uffc6\001\002" +
    "\000\004\007\160\001\002\000\004\007\156\001\002\000" +
    "\004\004\144\001\002\000\004\007\142\001\002\000\004" +
    "\007\135\001\002\000\004\005\126\001\002\000\004\005" +
    "\132\001\002\000\032\017\113\020\104\022\105\023\103" +
    "\024\102\025\112\026\101\033\106\034\107\036\111\037" +
    "\110\057\127\001\002\000\004\006\130\001\002\000\004" +
    "\005\uffed\001\002\000\004\005\ufff2\001\002\000\032\017" +
    "\113\020\104\022\105\023\103\024\102\025\112\026\101" +
    "\033\106\034\107\036\111\037\110\057\133\001\002\000" +
    "\004\006\134\001\002\000\004\005\uffef\001\002\000\010" +
    "\077\136\101\140\103\137\001\002\000\004\004\uff93\001" +
    "\002\000\004\004\uff94\001\002\000\004\004\uff92\001\002" +
    "\000\004\004\uffc3\001\002\000\010\077\136\101\140\103" +
    "\137\001\002\000\004\004\uffc1\001\002\000\020\006\146" +
    "\040\123\042\115\043\122\044\117\045\114\046\120\001" +
    "\002\000\004\004\uffc7\001\002\000\004\005\150\001\002" +
    "\000\004\005\153\001\002\000\032\017\113\020\104\022" +
    "\105\023\103\024\102\025\112\026\101\033\106\034\107" +
    "\036\111\037\110\057\151\001\002\000\004\006\152\001" +
    "\002\000\004\005\uffee\001\002\000\032\017\113\020\104" +
    "\022\105\023\103\024\102\025\112\026\101\033\106\034" +
    "\107\036\111\037\110\057\154\001\002\000\004\006\155" +
    "\001\002\000\004\005\ufff0\001\002\000\010\077\136\101" +
    "\140\103\137\001\002\000\004\004\uffbe\001\002\000\010" +
    "\077\136\101\140\103\137\001\002\000\004\004\uffc0\001" +
    "\002\000\010\077\136\101\140\103\137\001\002\000\004" +
    "\004\uffc2\001\002\000\010\077\136\101\140\103\137\001" +
    "\002\000\004\004\uffbf\001\002\000\004\007\167\001\002" +
    "\000\004\103\170\001\002\000\004\004\171\001\002\000" +
    "\006\006\172\104\173\001\002\000\004\005\176\001\002" +
    "\000\004\064\174\001\002\000\004\006\175\001\002\000" +
    "\004\005\uffdc\001\002\000\004\064\177\001\002\000\004" +
    "\006\200\001\002\000\004\005\uffda\001\002\000\004\074" +
    "\217\001\002\000\004\004\207\001\002\000\004\005\204" +
    "\001\002\000\004\074\205\001\002\000\004\006\206\001" +
    "\002\000\004\005\uffcd\001\002\000\022\006\211\040\123" +
    "\042\115\043\122\044\117\045\114\046\120\104\210\001" +
    "\002\000\004\074\215\001\002\000\004\005\212\001\002" +
    "\000\004\074\213\001\002\000\004\006\214\001\002\000" +
    "\004\005\uffcf\001\002\000\004\006\216\001\002\000\004" +
    "\005\uffd0\001\002\000\004\006\220\001\002\000\004\005" +
    "\uffce\001\002\000\004\005\uffcc\001\002\000\004\007\302" +
    "\001\002\000\004\007\300\001\002\000\004\004\271\001" +
    "\002\000\004\007\267\001\002\000\004\004\uffc4\001\002" +
    "\000\004\007\265\001\002\000\004\007\263\001\002\000" +
    "\004\007\261\001\002\000\004\007\257\001\002\000\004" +
    "\005\236\001\002\000\004\005\254\001\002\000\004\005" +
    "\uffca\001\002\000\004\035\237\001\002\000\004\032\240" +
    "\001\002\000\004\007\241\001\002\000\010\077\136\101" +
    "\140\103\137\001\002\000\004\004\243\001\002\000\006" +
    "\006\244\104\245\001\002\000\004\005\250\001\002\000" +
    "\004\073\246\001\002\000\004\006\247\001\002\000\004" +
    "\005\uffc8\001\002\000\004\073\251\001\002\000\004\006" +
    "\252\001\002\000\004\005\uffc9\001\002\000\004\005\uffcb" +
    "\001\002\000\006\035\237\072\255\001\002\000\004\006" +
    "\256\001\002\000\004\005\uffd1\001\002\000\010\077\136" +
    "\101\140\103\137\001\002\000\004\004\uffbd\001\002\000" +
    "\010\077\136\101\140\103\137\001\002\000\004\004\uffba" +
    "\001\002\000\010\077\136\101\140\103\137\001\002\000" +
    "\004\004\uffb7\001\002\000\010\077\136\101\140\103\137" +
    "\001\002\000\004\004\uffbc\001\002\000\010\077\136\101" +
    "\140\103\137\001\002\000\004\004\uffb9\001\002\000\022" +
    "\006\273\040\232\041\227\042\223\043\231\044\225\045" +
    "\222\046\230\001\002\000\004\004\uffc5\001\002\000\004" +
    "\005\236\001\002\000\004\005\275\001\002\000\006\035" +
    "\237\072\276\001\002\000\004\006\277\001\002\000\004" +
    "\005\uffd2\001\002\000\010\077\136\101\140\103\137\001" +
    "\002\000\004\004\uffbb\001\002\000\010\077\136\101\140" +
    "\103\137\001\002\000\004\004\uffb8\001\002\000\004\071" +
    "\322\001\002\000\004\004\312\001\002\000\004\005\307" +
    "\001\002\000\004\071\310\001\002\000\004\006\311\001" +
    "\002\000\004\005\uffd3\001\002\000\022\006\314\040\123" +
    "\042\115\043\122\044\117\045\114\046\120\104\313\001" +
    "\002\000\004\071\320\001\002\000\004\005\315\001\002" +
    "\000\004\071\316\001\002\000\004\006\317\001\002\000" +
    "\004\005\uffd5\001\002\000\004\006\321\001\002\000\004" +
    "\005\uffd6\001\002\000\004\006\323\001\002\000\004\005" +
    "\uffd4\001\002\000\004\061\342\001\002\000\004\004\332" +
    "\001\002\000\004\005\327\001\002\000\004\061\330\001" +
    "\002\000\004\006\331\001\002\000\004\005\uffe5\001\002" +
    "\000\022\006\334\040\123\042\115\043\122\044\117\045" +
    "\114\046\120\104\333\001\002\000\004\061\340\001\002" +
    "\000\004\005\335\001\002\000\004\061\336\001\002\000" +
    "\004\006\337\001\002\000\004\005\uffe7\001\002\000\004" +
    "\006\341\001\002\000\004\005\uffe8\001\002\000\004\006" +
    "\343\001\002\000\004\005\uffe6\001\002\000\004\060\362" +
    "\001\002\000\004\004\352\001\002\000\004\005\347\001" +
    "\002\000\004\060\350\001\002\000\004\006\351\001\002" +
    "\000\004\005\uffea\001\002\000\022\006\354\040\123\042" +
    "\115\043\122\044\117\045\114\046\120\104\353\001\002" +
    "\000\004\060\360\001\002\000\004\005\355\001\002\000" +
    "\004\060\356\001\002\000\004\006\357\001\002\000\004" +
    "\005\uffeb\001\002\000\004\006\361\001\002\000\004\005" +
    "\uffec\001\002\000\004\006\363\001\002\000\004\005\uffe9" +
    "\001\002\000\004\004\374\001\002\000\004\062\372\001" +
    "\002\000\004\005\367\001\002\000\004\062\370\001\002" +
    "\000\004\006\371\001\002\000\004\005\uffe1\001\002\000" +
    "\004\006\373\001\002\000\004\005\uffe2\001\002\000\024" +
    "\006\376\040\232\041\227\042\223\043\231\044\225\045" +
    "\222\046\230\104\375\001\002\000\004\062\u0102\001\002" +
    "\000\004\005\377\001\002\000\004\062\u0100\001\002\000" +
    "\004\006\u0101\001\002\000\004\005\uffe3\001\002\000\004" +
    "\006\u0103\001\002\000\004\005\uffe4\001\002\000\004\004" +
    "\u010c\001\002\000\004\063\u010a\001\002\000\004\005\u0107" +
    "\001\002\000\004\063\u0108\001\002\000\004\006\u0109\001" +
    "\002\000\004\005\uffdd\001\002\000\004\006\u010b\001\002" +
    "\000\004\005\uffde\001\002\000\024\006\u010e\040\232\041" +
    "\227\042\223\043\231\044\225\045\222\046\230\104\u010d" +
    "\001\002\000\004\063\u0112\001\002\000\004\005\u010f\001" +
    "\002\000\004\063\u0110\001\002\000\004\006\u0111\001\002" +
    "\000\004\005\uffdf\001\002\000\004\006\u0113\001\002\000" +
    "\004\005\uffe0\001\002\000\004\065\u018e\001\002\000\004" +
    "\004\u0187\001\002\000\004\005\u0118\001\002\000\004\005" +
    "\u0183\001\002\000\006\027\u011b\065\u011a\001\002\000\004" +
    "\005\uffb5\001\002\000\004\006\u0182\001\002\000\020\006" +
    "\u011d\040\123\042\115\043\122\044\117\045\114\046\120" +
    "\001\002\000\004\004\u017b\001\002\000\004\005\u011f\001" +
    "\002\000\004\005\u0177\001\002\000\010\030\u0122\031\u0123" +
    "\066\u0121\001\002\000\004\005\uffb0\001\002\000\004\006" +
    "\u0176\001\002\000\022\006\u0160\040\123\042\115\043\122" +
    "\044\117\045\114\046\120\104\u015e\001\002\000\022\006" +
    "\u0126\040\123\042\115\043\122\044\117\045\114\046\120" +
    "\104\u0124\001\002\000\004\070\u015c\001\002\000\004\004" +
    "\u0150\001\002\000\004\005\u0128\001\002\000\004\005\u014d" +
    "\001\002\000\010\023\u012b\024\u0129\070\u012a\001\002\000" +
    "\024\006\u013f\040\232\041\227\042\223\043\231\044\225" +
    "\045\222\046\230\104\u013e\001\002\000\004\006\u013c\001" +
    "\002\000\024\006\u012e\040\232\041\227\042\223\043\231" +
    "\044\225\045\222\046\230\104\u012d\001\002\000\004\004" +
    "\u0134\001\002\000\004\062\u0132\001\002\000\004\005\u012f" +
    "\001\002\000\004\062\u0130\001\002\000\004\006\u0131\001" +
    "\002\000\004\005\uffa0\001\002\000\004\006\u0133\001\002" +
    "\000\004\005\uffa1\001\002\000\024\006\u0136\040\232\041" +
    "\227\042\223\043\231\044\225\045\222\046\230\104\u0135" +
    "\001\002\000\004\062\u013a\001\002\000\004\005\u0137\001" +
    "\002\000\004\062\u0138\001\002\000\004\006\u0139\001\002" +
    "\000\004\005\uffa2\001\002\000\004\006\u013b\001\002\000" +
    "\004\005\uffa3\001\002\000\004\005\uffa8\001\002\000\004" +
    "\004\u0145\001\002\000\004\063\u0143\001\002\000\004\005" +
    "\u0140\001\002\000\004\063\u0141\001\002\000\004\006\u0142" +
    "\001\002\000\004\005\uff9c\001\002\000\004\006\u0144\001" +
    "\002\000\004\005\uff9d\001\002\000\024\006\u0147\040\232" +
    "\041\227\042\223\043\231\044\225\045\222\046\230\104" +
    "\u0146\001\002\000\004\063\u014b\001\002\000\004\005\u0148" +
    "\001\002\000\004\063\u0149\001\002\000\004\006\u014a\001" +
    "\002\000\004\005\uff9e\001\002\000\004\006\u014c\001\002" +
    "\000\004\005\uff9f\001\002\000\004\070\u014e\001\002\000" +
    "\004\006\u014f\001\002\000\004\005\uffa9\001\002\000\022" +
    "\006\u0152\040\123\042\115\043\122\044\117\045\114\046" +
    "\120\104\u0151\001\002\000\004\070\u015a\001\002\000\004" +
    "\005\u0154\001\002\000\004\005\u0157\001\002\000\010\023" +
    "\u012b\024\u0129\070\u0155\001\002\000\004\006\u0156\001\002" +
    "\000\004\005\uffa5\001\002\000\004\070\u0158\001\002\000" +
    "\004\006\u0159\001\002\000\004\005\uffa4\001\002\000\004" +
    "\006\u015b\001\002\000\004\005\uffa6\001\002\000\004\006" +
    "\u015d\001\002\000\004\005\uffa7\001\002\000\004\067\u0174" +
    "\001\002\000\004\004\u0168\001\002\000\004\005\u0162\001" +
    "\002\000\004\005\u0165\001\002\000\010\023\u012b\024\u0129" +
    "\067\u0163\001\002\000\004\006\u0164\001\002\000\004\005" +
    "\uffaa\001\002\000\004\067\u0166\001\002\000\004\006\u0167" +
    "\001\002\000\004\005\uffac\001\002\000\022\006\u016a\040" +
    "\123\042\115\043\122\044\117\045\114\046\120\104\u0169" +
    "\001\002\000\004\067\u0172\001\002\000\004\005\u016c\001" +
    "\002\000\004\005\u016f\001\002\000\010\023\u012b\024\u0129" +
    "\067\u016d\001\002\000\004\006\u016e\001\002\000\004\005" +
    "\uffad\001\002\000\004\067\u0170\001\002\000\004\006\u0171" +
    "\001\002\000\004\005\uffaf\001\002\000\004\006\u0173\001" +
    "\002\000\004\005\uffae\001\002\000\004\006\u0175\001\002" +
    "\000\004\005\uffab\001\002\000\004\005\uffb2\001\002\000" +
    "\010\030\u0122\031\u0123\066\u0179\001\002\000\004\005\uffb1" +
    "\001\002\000\004\006\u017a\001\002\000\004\005\uffb3\001" +
    "\002\000\020\006\u017c\040\123\042\115\043\122\044\117" +
    "\045\114\046\120\001\002\000\004\005\u017e\001\002\000" +
    "\004\005\u017f\001\002\000\006\030\u0122\031\u0123\001\002" +
    "\000\010\030\u0122\031\u0123\066\u0180\001\002\000\004\006" +
    "\u0181\001\002\000\004\005\uffb4\001\002\000\004\005\uffd8" +
    "\001\002\000\006\027\u011b\065\u0185\001\002\000\004\005" +
    "\uffb6\001\002\000\004\006\u0186\001\002\000\004\005\uffd9" +
    "\001\002\000\020\006\u0188\040\123\042\115\043\122\044" +
    "\117\045\114\046\120\001\002\000\004\005\u018a\001\002" +
    "\000\004\005\u018b\001\002\000\004\027\u011b\001\002\000" +
    "\006\027\u011b\065\u018c\001\002\000\004\006\u018d\001\002" +
    "\000\004\005\uffdb\001\002\000\004\006\u018f\001\002\000" +
    "\004\005\uffd7\001\002\000\032\017\113\020\104\022\105" +
    "\023\103\024\102\025\112\026\101\033\106\034\107\036" +
    "\111\037\110\056\u0191\001\002\000\004\006\u0192\001\002" +
    "\000\004\005\ufffc\001\002\000\010\077\136\101\140\103" +
    "\137\001\002\000\004\004\u0195\001\002\000\004\006\u0196" +
    "\001\002\000\004\005\100\001\002\000\004\005\u0198\001" +
    "\002\000\032\017\113\020\104\022\105\023\103\024\102" +
    "\025\112\026\101\033\106\034\107\036\111\037\110\056" +
    "\u0199\001\002\000\004\006\u019a\001\002\000\004\005\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\012\022\011\001\001\000" +
    "\004\020\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\007\016\001\001\000" +
    "\002\001\001\000\004\007\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\075\010\076\001\001\000\004" +
    "\010\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0114\013\115\001\001\000\006\012\u0103\014\225" +
    "\001\001\000\006\012\363\014\225\001\001\000\006\011" +
    "\344\013\115\001\001\000\006\011\324\013\115\001\001" +
    "\000\006\011\304\013\115\001\001\000\006\012\223\014" +
    "\225\001\001\000\002\001\001\000\006\011\201\013\115" +
    "\001\001\000\002\001\001\000\006\011\120\013\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\124\010\076" +
    "\001\001\000\004\010\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\142\001\001\000" +
    "\002\001\001\000\004\013\144\001\001\000\002\001\001" +
    "\000\006\006\146\010\076\001\001\000\004\010\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\156\001\001\000\002\001\001\000\004\026\160" +
    "\001\001\000\002\001\001\000\004\026\162\001\001\000" +
    "\002\001\001\000\004\026\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\234\024\233" +
    "\001\001\000\004\023\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\257\001\001\000\002\001" +
    "\001\000\004\026\261\001\001\000\002\001\001\000\004" +
    "\026\263\001\001\000\002\001\001\000\004\026\265\001" +
    "\001\000\002\001\001\000\004\026\267\001\001\000\002" +
    "\001\001\000\004\014\271\001\001\000\002\001\001\000" +
    "\006\023\234\024\273\001\001\000\004\023\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\300\001\001\000\002\001\001\000\004\026\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\u0116\030\u0118\001" +
    "\001\000\004\030\u0183\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u011b\013\115\001" +
    "\001\000\002\001\001\000\006\015\u011d\017\u011f\001\001" +
    "\000\004\017\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u015e\013\115\001\001" +
    "\000\006\011\u0124\013\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\u0126\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u013c\014\225\001\001\000" +
    "\002\001\001\000\006\012\u012b\014\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\144\001\001\000\002\001\001" +
    "\000\004\025\u0152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\144\001\001\000\002\001\001\000\004" +
    "\025\u016a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\144\001\001\000\006\015\u017c" +
    "\017\u011f\001\001\000\004\017\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\144\001\001" +
    "\000\006\016\u0188\030\u0118\001\001\000\004\030\u0183\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0193\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u0196\010\076\001\001\000\004\010\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    
    public void syntax_error(Symbol s){
        System.err.println("Error " + s.value + " " + s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Hubo un error en análisis irrecuperable :(");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCH$actions {




  private final parserCH parser;

  /** Constructor */
  CUP$parserCH$actions(parserCH parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCH$do_action(
    int                        CUP$parserCH$act_num,
    java_cup.runtime.lr_parser CUP$parserCH$parser,
    java.util.Stack            CUP$parserCH$stack,
    int                        CUP$parserCH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCH$result;

      /* select the action based on the action number */
      switch (CUP$parserCH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    
    
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= numero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		 
    
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("E",20, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // L_PAR ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // L_PAR ::= L_PAR coma identificador 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    
    
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_PAR",21, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTA_ID ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA_ID ::= otro_simb 
            {
              String RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
       
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA_ID ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("LISTA_ID",24, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // L_ID ::= LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
         
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // L_ID ::= L_ID LISTA_ID 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
    
        RESULT = val + " " + id;
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ID",23, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONT_COL ::= menor pr_boton mayor menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONT_COL ::= menor pr_boton cadena2 pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONT_COL ::= menor pr_boton L_AT2 p_coma mayor menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONT_COL ::= menor pr_boton L_AT2 p_coma cadena2 pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONT_COL ::= menor pr_imagen mayor menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		
        
        //agregar la imagen de no se encontro imagen
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONT_COL ::= menor pr_imagen cadena2 pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONT_COL ::= menor pr_imagen L_AT2 p_coma mayor menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONT_COL ::= menor pr_imagen L_AT2 p_coma cadena2 pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
    
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_COL",19, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONT_FIL ::= menor pr_ct L_AT p_coma mayor CONT_COL menor pr_finct mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONT_FIL ::= menor pr_ct L_AT p_coma mayor menor pr_finct mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONT_FIL ::= menor pr_ct L_AT p_coma cadena2 pr_finct mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONT_FIL ::= menor pr_ct cadena2 pr_finct mayor 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONT_FIL ::= menor pr_ct mayor menor pr_finct mayor 
            {
              Nodo RESULT =null;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONT_FIL ::= menor pr_ct mayor CONT_COL menor pr_finct mayor 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONT_FIL ::= menor pr_cb mayor menor pr_fincb mayor 
            {
              Nodo RESULT =null;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONT_FIL ::= menor pr_cb cadena2 pr_fincb mayor 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONT_FIL ::= menor pr_cb mayor CONT_COL menor pr_fincb mayor 
            {
              Nodo RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONT_FIL ::= menor pr_cb L_AT p_coma mayor menor pr_fincb mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONT_FIL ::= menor pr_cb L_AT p_coma cadena2 pr_fincb mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONT_FIL ::= menor pr_cb L_AT p_coma mayor CONT_COL menor pr_fincb mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_FIL",13, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CU_FIL ::= CONT_FIL 
            {
              Nodo RESULT =null;
		
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CU_FIL ::= CU_FIL CONT_FIL 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo id = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_FIL",11, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPO_TABLA ::= menor pr_fil_t mayor menor pr_finfil_t mayor 
            {
              Nodo RESULT =null;
		
            
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPO_TABLA ::= menor pr_fil_t mayor CU_FIL menor pr_finfil_t mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPO_TABLA ::= menor pr_fil_t L_AT p_coma mayor CU_FIL menor pr_finfil_t mayor 
            {
              Nodo RESULT =null;
		int atrleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int atrright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo atr = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO_TABLA",22, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CU_T ::= CUERPO_TABLA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CU_T ::= CU_T CUERPO_TABLA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU_T",12, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_ATRIBUTOS2 ::= pr_alineado igual E 
            {
              Nodo RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_ATRIBUTOS2 ::= pr_ancho igual E 
            {
              Nodo RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L_ATRIBUTOS2 ::= pr_alto igual E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L_ATRIBUTOS2 ::= pr_grupo igual E 
            {
              Nodo RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L_ATRIBUTOS2 ::= pr_id igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L_ATRIBUTOS2 ::= pr_ruta igual E 
            {
              Nodo RESULT =null;
		int rutaleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int rutaright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ruta = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            

            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_ATRIBUTOS2 ::= pr_click igual E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS2",10, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_ATRIBUTOS ::= pr_alineado igual E 
            {
              Nodo RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_ATRIBUTOS ::= pr_ancho igual E 
            {
              Nodo RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object ancho = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_ATRIBUTOS ::= pr_alto igual E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_ATRIBUTOS ::= pr_grupo igual E 
            {
              Nodo RESULT =null;
		int grupoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int gruporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object grupo = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_ATRIBUTOS ::= pr_id igual E 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_ATRIBUTOS ::= pr_click igual E 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
            
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_ATRIBUTOS",9, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_AT2 ::= L_ATRIBUTOS2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L_AT2 ::= L_AT2 p_coma L_ATRIBUTOS2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT2",8, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_AT ::= L_ATRIBUTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_AT ::= L_AT p_coma L_ATRIBUTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		int hijoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int hijoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo hijo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("L_AT",7, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma cadena2 pr_finopcion mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
            

        
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUEVO ::= menor pr_opcion pr_valor igual E p_coma mayor menor pr_finopcion mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
            
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("NUEVO",17, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CAJA_OP ::= NUEVO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CAJA_OP ::= CAJA_OP NUEVO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
            
        
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CAJA_OP",18, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CU ::= menor pr_salto mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CU ::= menor pr_spinner mayor menor pr_finspinner mayor 
            {
              Nodo RESULT =null;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CU ::= menor pr_spinner cadena2 pr_finspinner mayor 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CU ::= menor pr_spinner L_AT p_coma mayor menor pr_finspinner mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CU ::= menor pr_spinner L_AT p_coma cadena2 pr_finspinner mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CU ::= menor pr_caja mayor CAJA_OP menor pr_fincaja mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CU ::= menor pr_caja L_AT2 p_coma mayor CAJA_OP menor pr_fincaja mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CU ::= menor pr_texto_a mayor menor pr_fintexto_a mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CU ::= menor pr_texto_a cadena2 pr_fintexto_a mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CU ::= menor pr_texto_a L_AT p_coma mayor menor pr_fintexto_a mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CU ::= menor pr_texto_a L_AT p_coma cadena2 pr_fintexto_a mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String cont = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		

                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CU ::= menor pr_tabla cadena2 pr_fintabla mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
                

                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CU ::= menor pr_tabla mayor menor pr_fintabla mayor 
            {
              Nodo RESULT =null;
		        

                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CU ::= menor pr_tabla mayor CU_T menor pr_fintabla mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma mayor menor pr_finenlace mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
                    
                //agregar el nombre de la ruta ya que no tiene otro nombre
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CU ::= menor pr_tabla L_AT p_coma mayor CU_T menor pr_fintabla mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CU ::= menor pr_enlace pr_ruta igual cadena p_coma cadena2 pr_finenlace mayor 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CU ::= menor pr_boton mayor menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CU ::= menor pr_boton cadena2 pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CU ::= menor pr_boton L_AT2 p_coma mayor menor pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                //agregar el nombre por defecto
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CU ::= menor pr_boton L_AT2 p_coma cadena2 pr_finboton mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CU ::= menor pr_imagen mayor menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CU ::= menor pr_imagen cadena2 pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CU ::= menor pr_imagen L_AT2 p_coma mayor menor pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CU ::= menor pr_imagen L_AT2 p_coma cadena2 pr_finimagen mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CU ::= menor pr_caja_texto mayor menor pr_fincaja_texto mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CU ::= menor pr_caja_texto cadena2 pr_fincaja_texto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CU ::= menor pr_caja_texto L_AT p_coma mayor menor pr_fincaja_texto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CU ::= menor pr_caja_texto L_AT p_coma cadena2 pr_fincaja_texto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CU ::= menor pr_texto cadena2 pr_fintexto mayor 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CU ::= menor pr_texto mayor menor pr_fintexto mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CU ::= menor pr_texto L_AT p_coma mayor menor pr_fintexto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CU ::= menor pr_texto L_AT p_coma cadena2 pr_fintexto mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CU ::= menor pr_panel mayor menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CU ::= menor pr_panel L_AT p_coma mayor menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-7)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CU ::= menor pr_panel mayor CONT_C menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CU ::= menor pr_panel L_AT p_coma mayor CONT_C menor pr_finpanel mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CU",6, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONT_C ::= CU 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONT_C ::= CONT_C CU 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_C",4, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma mayor menor pr_fincjs mayor 
            {
              Nodo RESULT =null;
		
         
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REP ::= menor pr_titulo mayor menor pr_fintitulo mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-5)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma mayor menor pr_finccss mayor 
            {
              Nodo RESULT =null;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-9)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REP ::= menor pr_cjs pr_ruta igual cadena p_coma cadena2 pr_fincjs mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // REP ::= menor pr_ccss pr_ruta igual cadena p_coma cadena2 pr_finccss mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-8)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // REP ::= menor pr_titulo cadena2 pr_fintitulo mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-2)).value;
		
        
        
    
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("REP",5, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-4)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONT_EN ::= REP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONT_EN ::= CONT_EN REP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int nuevoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int nuevoright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo nuevo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT_EN",3, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= menor pr_cuerpo pr_fondo igual E p_coma mayor CONT_C menor pr_fincuerpo mayor 
            {
              Nodo RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).right;
		Nodo val2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-10)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= menor pr_cuerpo mayor CONT_C menor pr_fincuerpo mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
        
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ENCABEZADO ::= menor pr_encabezado mayor CONT_EN menor pr_finencabezado mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
            
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",16, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONT ::= ENCABEZADO CUERPO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
         
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("CONT",15, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // H ::= menor pr_chtml mayor CONT menor pr_finchtml mayor 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-3)).value;
		
                
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("H",1, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-6)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= H 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.peek()).value;
		
        
                
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          return CUP$parserCH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)).value;
		RESULT = start_val;
              CUP$parserCH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCH$stack.elementAt(CUP$parserCH$top-1)), ((java_cup.runtime.Symbol)CUP$parserCH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCH$parser.done_parsing();
          return CUP$parserCH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

