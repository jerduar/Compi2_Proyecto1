/* The following code was generated by JFlex 1.6.1 */

package GeneradorCHTML;
import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/GeneradorCHTML/LexicoCHTML.flex</tt>
 */
public class scannerCH implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int MULTI = 4;
  public static final int STRING_CENTRO = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 57, 54, 56, 55, 55,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    57,  6,  7,  6,  6,  6,  6,  0, 11, 12,  6,  6, 13,  5,  2,  8, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 14,  9, 15, 10,  6, 
     0, 27, 28, 23, 30, 26, 21, 36, 24, 17, 31,  3, 19, 25, 22, 20, 
    34,  3, 33, 32, 16, 18,  3,  3, 35,  3, 29,  0,  0,  0,  6,  4, 
     0, 44,  3, 37, 45, 51,  3, 46, 50, 39,  3, 40, 38,  3, 49, 48, 
    47,  3, 41, 52, 43, 42, 53,  3,  3,  3,  3,  6,  6,  6,  0,  0, 
     0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0, 
     6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\2\4\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\17\3\1\14"+
    "\1\15\1\16\2\17\1\20\1\1\1\0\1\3\1\21"+
    "\1\0\1\22\1\23\1\0\6\3\1\24\4\3\1\25"+
    "\10\3\1\26\5\3\1\0\1\27\1\2\2\0\13\3"+
    "\1\30\16\3\1\0\1\31\6\3\1\0\1\3\1\32"+
    "\1\3\1\33\6\3\1\34\1\3\1\35\1\3\1\36"+
    "\3\3\1\37\1\3\1\40\1\41\2\3\1\42\11\0"+
    "\1\3\1\43\3\3\1\44\2\3\1\45\1\46\1\3"+
    "\1\47\1\50\1\51\1\52\1\3\1\53\1\54\6\0"+
    "\1\55\4\0\1\56\5\0\1\57\1\3\1\60\1\3"+
    "\1\0\2\3\1\61\12\0\1\62\5\0\2\3\1\0"+
    "\1\63\1\3\7\0\1\64\1\0\1\65\5\0\2\3"+
    "\1\0\1\66\1\0\1\67\1\70\2\0\1\71\1\0"+
    "\1\72\3\0\1\73\1\0\1\74\2\3\1\75\1\76"+
    "\1\0\1\77\1\100\1\101\1\0\1\102\2\0\1\103"+
    "\1\104\1\105\2\0\1\106\4\0\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\350"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0"+
    "\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\u05aa\0\350\0\350\0\350\0\350\0\u05e4\0\350\0\u061e"+
    "\0\u0658\0\u0692\0\350\0\u01d0\0\350\0\350\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u015c\0\u0862\0\u089c"+
    "\0\u08d6\0\u0910\0\u015c\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u015c\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\350\0\u0658\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u015c\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\350\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u015c\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u015c\0\u166e\0\u015c\0\u16a8\0\u015c"+
    "\0\u16e2\0\u171c\0\u1756\0\350\0\u1790\0\u17ca\0\u015c\0\u1804"+
    "\0\u183e\0\u015c\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u015c\0\u1abc\0\u1af6\0\u1b30"+
    "\0\u015c\0\u1b6a\0\u1ba4\0\u015c\0\u015c\0\u1bde\0\u015c\0\u015c"+
    "\0\u015c\0\u015c\0\u1c18\0\u015c\0\u015c\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\350\0\u1dae\0\u1de8\0\u1e22\0\u1e5c"+
    "\0\350\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u015c\0\u1fb8"+
    "\0\u015c\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u015c\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\350\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u015c\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610"+
    "\0\u264a\0\u2684\0\350\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u015c\0\u2902\0\u293c"+
    "\0\350\0\u2976\0\u29b0\0\350\0\u29ea\0\350\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\350\0\u2ad2\0\350\0\u2b0c\0\u2b46\0\350\0\350"+
    "\0\u2b80\0\350\0\350\0\350\0\u2bba\0\350\0\u2bf4\0\u2c2e"+
    "\0\u015c\0\u015c\0\350\0\u2c68\0\u2ca2\0\350\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\350\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\10\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\7\1\25\1\26\1\7\1\27\2\7"+
    "\1\30\1\7\1\31\3\7\1\32\1\7\1\33\2\7"+
    "\1\34\1\7\1\35\1\7\1\36\2\7\1\37\1\7"+
    "\1\40\6\7\1\41\2\42\1\0\1\42\66\43\1\44"+
    "\3\43\5\45\1\46\60\45\2\42\1\0\1\45\5\47"+
    "\1\50\2\47\1\5\61\47\73\0\1\6\1\51\70\0"+
    "\1\52\1\0\2\7\13\0\46\7\11\0\1\53\64\0"+
    "\7\54\1\55\62\54\10\0\1\56\71\0\1\57\62\0"+
    "\1\52\1\0\2\7\13\0\1\7\1\60\10\7\1\61"+
    "\1\62\32\7\5\0\1\52\1\0\2\7\13\0\11\7"+
    "\1\63\34\7\5\0\1\52\1\0\2\7\13\0\22\7"+
    "\1\64\23\7\5\0\1\52\1\0\2\7\13\0\1\7"+
    "\1\65\44\7\5\0\1\52\1\0\2\7\13\0\1\66"+
    "\1\7\1\67\4\7\1\70\1\71\2\7\1\72\1\73"+
    "\2\7\1\74\26\7\5\0\1\52\1\0\2\7\13\0"+
    "\6\7\1\75\37\7\5\0\1\52\1\0\2\7\13\0"+
    "\4\7\1\76\41\7\5\0\1\52\1\0\2\7\13\0"+
    "\13\7\1\77\6\7\1\100\23\7\5\0\1\52\1\0"+
    "\2\7\13\0\13\7\1\101\32\7\5\0\1\52\1\0"+
    "\2\7\13\0\25\7\1\102\1\103\17\7\5\0\1\52"+
    "\1\0\2\7\13\0\35\7\1\104\10\7\5\0\1\52"+
    "\1\0\2\7\13\0\32\7\1\105\13\7\5\0\1\52"+
    "\1\0\2\7\13\0\26\7\1\106\12\7\1\107\4\7"+
    "\5\0\1\52\1\0\2\7\13\0\31\7\1\110\14\7"+
    "\5\0\1\52\1\0\2\7\13\0\34\7\1\111\11\7"+
    "\14\0\1\112\71\0\1\113\62\0\1\114\71\0\1\52"+
    "\1\115\2\7\13\0\46\7\14\0\1\116\62\0\1\52"+
    "\1\0\2\7\13\0\1\117\45\7\5\0\1\52\1\0"+
    "\2\7\13\0\23\7\1\120\22\7\5\0\1\52\1\0"+
    "\2\7\13\0\14\7\1\121\31\7\5\0\1\52\1\0"+
    "\2\7\13\0\13\7\1\122\32\7\5\0\1\52\1\0"+
    "\2\7\13\0\7\7\1\123\36\7\5\0\1\52\1\0"+
    "\2\7\13\0\3\7\1\124\2\7\1\125\37\7\5\0"+
    "\1\52\1\0\2\7\13\0\12\7\1\126\33\7\5\0"+
    "\1\52\1\0\2\7\13\0\20\7\1\127\25\7\5\0"+
    "\1\52\1\0\2\7\13\0\1\130\45\7\5\0\1\52"+
    "\1\0\2\7\13\0\17\7\1\131\26\7\5\0\1\52"+
    "\1\0\2\7\13\0\20\7\1\132\25\7\5\0\1\52"+
    "\1\0\2\7\13\0\3\7\1\133\3\7\1\134\36\7"+
    "\5\0\1\52\1\0\2\7\13\0\1\135\45\7\5\0"+
    "\1\52\1\0\2\7\13\0\3\7\1\136\42\7\5\0"+
    "\1\52\1\0\2\7\13\0\1\7\1\137\44\7\5\0"+
    "\1\52\1\0\2\7\13\0\6\7\1\140\37\7\5\0"+
    "\1\52\1\0\2\7\13\0\44\7\1\141\1\7\5\0"+
    "\1\52\1\0\2\7\13\0\27\7\1\142\16\7\5\0"+
    "\1\52\1\0\2\7\13\0\33\7\1\143\12\7\5\0"+
    "\1\52\1\0\2\7\13\0\27\7\1\144\3\7\1\145"+
    "\12\7\5\0\1\52\1\0\2\7\13\0\25\7\1\146"+
    "\20\7\5\0\1\52\1\0\2\7\13\0\32\7\1\147"+
    "\13\7\5\0\1\52\1\0\2\7\13\0\26\7\1\150"+
    "\17\7\14\0\1\151\62\0\1\7\75\0\1\152\65\0"+
    "\1\52\1\0\2\7\13\0\2\7\1\153\43\7\5\0"+
    "\1\52\1\0\2\7\13\0\1\154\45\7\5\0\1\52"+
    "\1\0\2\7\13\0\3\7\1\155\42\7\5\0\1\52"+
    "\1\0\2\7\13\0\24\7\1\156\21\7\5\0\1\52"+
    "\1\0\2\7\13\0\1\7\1\157\44\7\5\0\1\52"+
    "\1\0\1\7\1\160\13\0\46\7\5\0\1\52\1\0"+
    "\2\7\1\161\12\0\46\7\5\0\1\52\1\0\2\7"+
    "\13\0\21\7\1\162\24\7\5\0\1\52\1\0\2\7"+
    "\13\0\20\7\1\163\25\7\5\0\1\52\1\0\2\7"+
    "\13\0\11\7\1\164\34\7\5\0\1\52\1\0\2\7"+
    "\13\0\13\7\1\165\32\7\5\0\1\52\1\0\2\7"+
    "\13\0\13\7\1\166\32\7\5\0\1\52\1\0\2\7"+
    "\13\0\13\7\1\167\32\7\5\0\1\52\1\0\2\7"+
    "\13\0\4\7\1\170\41\7\5\0\1\52\1\0\2\7"+
    "\13\0\1\171\45\7\5\0\1\52\1\0\2\7\13\0"+
    "\6\7\1\172\37\7\5\0\1\52\1\0\2\7\13\0"+
    "\12\7\1\173\33\7\5\0\1\52\1\0\2\7\13\0"+
    "\44\7\1\174\1\7\5\0\1\52\1\0\2\7\13\0"+
    "\25\7\1\175\20\7\5\0\1\52\1\0\2\7\13\0"+
    "\34\7\1\176\11\7\5\0\1\52\1\0\2\7\13\0"+
    "\41\7\1\177\4\7\5\0\1\52\1\0\2\7\13\0"+
    "\40\7\1\200\5\7\5\0\1\52\1\0\2\7\13\0"+
    "\42\7\1\201\3\7\5\0\1\52\1\0\2\7\13\0"+
    "\37\7\1\202\6\7\5\0\1\52\1\0\2\7\13\0"+
    "\40\7\1\203\5\7\16\0\1\204\60\0\1\52\1\0"+
    "\2\7\13\0\3\7\1\205\42\7\5\0\1\52\1\0"+
    "\2\7\13\0\4\7\1\206\41\7\5\0\1\52\1\0"+
    "\2\7\13\0\13\7\1\207\32\7\5\0\1\52\1\0"+
    "\2\7\13\0\12\7\1\210\33\7\5\0\1\52\1\0"+
    "\2\7\13\0\4\7\1\211\41\7\5\0\1\52\1\0"+
    "\2\7\13\0\1\212\45\7\24\0\1\213\1\214\2\0"+
    "\1\215\1\216\1\0\1\217\2\0\1\220\1\0\1\221"+
    "\3\0\1\222\1\0\1\223\30\0\1\52\1\0\2\7"+
    "\13\0\22\7\1\224\23\7\5\0\1\52\1\0\2\7"+
    "\13\0\3\7\1\225\42\7\5\0\1\52\1\0\1\7"+
    "\1\226\13\0\46\7\5\0\1\52\1\0\2\7\13\0"+
    "\7\7\1\227\36\7\5\0\1\52\1\0\2\7\13\0"+
    "\14\7\1\230\31\7\5\0\1\52\1\0\2\7\13\0"+
    "\6\7\1\231\37\7\5\0\1\52\1\0\2\7\13\0"+
    "\4\7\1\232\41\7\5\0\1\52\1\0\2\7\13\0"+
    "\6\7\1\233\37\7\5\0\1\52\1\0\2\7\13\0"+
    "\3\7\1\234\42\7\5\0\1\52\1\0\2\7\13\0"+
    "\30\7\1\235\15\7\5\0\1\52\1\0\2\7\13\0"+
    "\43\7\1\236\2\7\5\0\1\52\1\0\2\7\13\0"+
    "\40\7\1\237\5\7\5\0\1\52\1\0\2\7\13\0"+
    "\40\7\1\240\5\7\5\0\1\52\1\0\2\7\13\0"+
    "\31\7\1\241\14\7\5\0\1\52\1\0\2\7\13\0"+
    "\4\7\1\242\41\7\5\0\1\52\1\0\1\7\1\243"+
    "\13\0\46\7\5\0\1\52\1\0\2\7\13\0\6\7"+
    "\1\244\37\7\5\0\1\52\1\0\2\7\13\0\6\7"+
    "\1\245\37\7\25\0\1\246\10\0\1\247\1\250\67\0"+
    "\1\251\102\0\1\252\50\0\1\253\70\0\1\254\1\0"+
    "\1\255\4\0\1\256\1\257\2\0\1\260\1\261\2\0"+
    "\1\262\60\0\1\263\67\0\1\264\107\0\1\265\62\0"+
    "\1\266\37\0\1\52\1\0\2\7\13\0\4\7\1\267"+
    "\41\7\5\0\1\52\1\0\2\7\13\0\1\270\45\7"+
    "\5\0\1\52\1\0\2\7\13\0\12\7\1\271\33\7"+
    "\5\0\1\52\1\0\2\7\13\0\12\7\1\272\33\7"+
    "\5\0\1\52\1\0\2\7\1\273\12\0\46\7\5\0"+
    "\1\52\1\0\2\7\13\0\12\7\1\274\33\7\5\0"+
    "\1\52\1\0\2\7\13\0\34\7\1\275\11\7\5\0"+
    "\1\52\1\0\2\7\13\0\13\7\1\276\32\7\24\0"+
    "\1\277\114\0\1\300\62\0\1\301\70\0\1\302\65\0"+
    "\1\303\65\0\1\304\100\0\1\305\77\0\1\306\51\0"+
    "\1\307\110\0\1\310\72\0\1\311\54\0\1\312\3\0"+
    "\1\313\62\0\1\314\72\0\1\315\76\0\1\316\44\0"+
    "\1\52\1\0\2\7\13\0\12\7\1\317\33\7\5\0"+
    "\1\52\1\0\2\7\13\0\15\7\1\320\30\7\31\0"+
    "\1\321\45\0\1\52\1\0\2\7\13\0\21\7\1\322"+
    "\24\7\5\0\1\52\1\0\2\7\13\0\35\7\1\323"+
    "\10\7\26\0\1\324\67\0\1\325\74\0\1\326\112\0"+
    "\1\327\46\0\1\330\54\0\1\331\126\0\1\332\70\0"+
    "\1\333\62\0\1\334\73\0\1\335\71\0\1\336\71\0"+
    "\1\337\62\0\1\340\73\0\1\341\75\0\1\342\40\0"+
    "\1\52\1\0\2\7\13\0\23\7\1\343\22\7\5\0"+
    "\1\52\1\0\2\7\13\0\13\7\1\344\32\7\25\0"+
    "\1\345\51\0\1\52\1\0\2\7\13\0\40\7\1\346"+
    "\5\7\27\0\1\347\72\0\1\350\100\0\1\351\70\0"+
    "\1\352\63\0\1\353\65\0\1\354\113\0\1\355\52\0"+
    "\1\356\52\0\1\357\114\0\1\360\76\0\1\361\63\0"+
    "\1\362\71\0\1\363\66\0\1\364\47\0\1\52\1\0"+
    "\2\7\13\0\1\365\45\7\5\0\1\52\1\0\2\7"+
    "\13\0\16\7\1\366\27\7\32\0\1\367\67\0\1\370"+
    "\51\0\1\371\113\0\1\372\71\0\1\373\67\0\1\374"+
    "\65\0\1\375\103\0\1\376\71\0\1\377\71\0\1\u0100"+
    "\40\0\1\52\1\0\2\7\13\0\4\7\1\u0101\41\7"+
    "\5\0\1\52\1\0\2\7\13\0\4\7\1\u0102\41\7"+
    "\37\0\1\u0103\70\0\1\u0104\74\0\1\u0105\75\0\1\u0106"+
    "\73\0\1\u0107\61\0\1\u0108\56\0\1\u0109\107\0\1\u010a"+
    "\57\0\1\u010b\71\0\1\u010c\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\4\1\6\11\17\1\4\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\2\11"+
    "\1\0\32\1\1\0\1\11\1\1\2\0\32\1\1\0"+
    "\1\11\6\1\1\0\22\1\1\11\6\1\11\0\22\1"+
    "\6\0\1\11\4\0\1\11\5\0\4\1\1\0\3\1"+
    "\12\0\1\11\5\0\2\1\1\0\2\1\7\0\1\11"+
    "\1\0\1\1\5\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\0\1\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\2\1\2\11\1\0\3\11\1\0\1\11\2\0"+
    "\2\1\1\11\2\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String colector_cadena = "";
public String comentario = "";  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCH(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symCH.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("simbolo: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
                            return new Symbol(symCH.ptodo, yycolumn, yyline, yytext());
                             //Listado_Errores.add(new Nodo_Error(yytext(),yycolumn,yyline,"Error Lexico","El caracter no pertenece al lenguaje"));
            }
          case 73: break;
          case 2: 
            { return new Symbol(symCH.numero, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 3: 
            { return new Symbol(symCH.identificador, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 4: 
            { return new Symbol(symCH.otro_simb, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 5: 
            { return new Symbol(symCH.menor, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 6: 
            { return new Symbol(symCH.mayor, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 7: 
            { return new Symbol(symCH.pr_parA, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 8: 
            { return new Symbol(symCH.pr_parC, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 9: 
            { return new Symbol(symCH.coma, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 10: 
            { return new Symbol(symCH.p_coma, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 11: 
            { return new Symbol(symCH.igual, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 12: 
            { /*Se ignoran*/
            }
          case 84: break;
          case 13: 
            { comentario += yytext();
            }
          case 85: break;
          case 14: 
            { System.out.println("Comentario simple: "+comentario);
                            comentario = "";
                            yybegin(YYINITIAL);
            }
          case 86: break;
          case 15: 
            { comentario+= yytext();
            }
          case 87: break;
          case 16: 
            { colector_cadena += yytext();
            }
          case 88: break;
          case 17: 
            { yybegin(STRING_CENTRO);
            }
          case 89: break;
          case 18: 
            { return new Symbol(symCH.cadena, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 19: 
            { yybegin(COMENTARIO);
            }
          case 91: break;
          case 20: 
            { return new Symbol(symCH.pr_ct, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 21: 
            { return new Symbol(symCH.pr_cb, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 22: 
            { return new Symbol(symCH.pr_id, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 23: 
            { String cadena_temporal = colector_cadena; 
                            colector_cadena = ""; 
                            yybegin(YYINITIAL); 
                            System.out.println("Comentario dentro etiquetas: "+cadena_temporal);
                            return new Symbol(symCH.cadena2, yycolumn, yyline, cadena_temporal);
            }
          case 95: break;
          case 24: 
            { return new Symbol(symCH.pr_cjs, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 25: 
            { yybegin(MULTI);
            }
          case 97: break;
          case 26: 
            { return new Symbol(symCH.pr_ccss, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 27: 
            { return new Symbol(symCH.pr_caja, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 28: 
            { return new Symbol(symCH.pr_atri_ccss, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 29: 
            { return new Symbol(symCH.pr_ruta, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 30: 
            { return new Symbol(symCH.pr_alto, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 31: 
            { System.out.println("Comentario multi: "+comentario);
                            comentario ="";
                            yybegin(YYINITIAL);
            }
          case 103: break;
          case 32: 
            { return new Symbol(symCH.pr_texto, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 33: 
            { return new Symbol(symCH.pr_tabla, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 34: 
            { return new Symbol(symCH.pr_fil_t, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 35: 
            { return new Symbol(symCH.pr_chtml, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 36: 
            { return new Symbol(symCH.pr_boton, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 37: 
            { return new Symbol(symCH.pr_panel, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 38: 
            { return new Symbol(symCH.pr_click, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 39: 
            { return new Symbol(symCH.pr_ancho, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 40: 
            { return new Symbol(symCH.pr_grupo, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 41: 
            { return new Symbol(symCH.pr_valor, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 42: 
            { return new Symbol(symCH.pr_titulo, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 43: 
            { return new Symbol(symCH.pr_imagen, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 44: 
            { return new Symbol(symCH.pr_opcion, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 45: 
            { return new Symbol(symCH.pr_finct, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 46: 
            { return new Symbol(symCH.pr_fincb, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 47: 
            { return new Symbol(symCH.pr_cuerpo, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 48: 
            { return new Symbol(symCH.pr_enlace, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 49: 
            { return new Symbol(symCH.pr_texto_a, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 50: 
            { return new Symbol(symCH.pr_fincjs, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 51: 
            { return new Symbol(symCH.pr_spinner, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 52: 
            { return new Symbol(symCH.pr_finccss, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 53: 
            { return new Symbol(symCH.pr_fincaja, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 54: 
            { return new Symbol(symCH.pr_alineado, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 55: 
            { return new Symbol(symCH.pr_fintexto, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 56: 
            { return new Symbol(symCH.pr_fintabla, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 57: 
            { return new Symbol(symCH.pr_finfil_t, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 58: 
            { return new Symbol(symCH.pr_finchtml, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 59: 
            { return new Symbol(symCH.pr_finboton, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 60: 
            { return new Symbol(symCH.pr_finpanel, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 61: 
            { return new Symbol(symCH.pr_salto, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 62: 
            { return new Symbol(symCH.pr_fintitulo, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 63: 
            { return new Symbol(symCH.pr_finimagen, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 64: 
            { return new Symbol(symCH.pr_finopcion, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 65: 
            { return new Symbol(symCH.pr_fincuerpo, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 66: 
            { return new Symbol(symCH.pr_finenlace, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 67: 
            { return new Symbol(symCH.pr_caja_texto, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 68: 
            { return new Symbol(symCH.pr_encabezado, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 69: 
            { return new Symbol(symCH.pr_fintexto_a, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 70: 
            { return new Symbol(symCH.pr_finspinner, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 71: 
            { return new Symbol(symCH.pr_fincaja_texto, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 72: 
            { return new Symbol(symCH.pr_finencabezado, yycolumn, yyline, yytext());
            }
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
