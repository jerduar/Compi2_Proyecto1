package GeneradorCCSS;

import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import AST.Nodo;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    /* Metodo para errores sintacticos*/
	
    public void sintax_error(Symbol s){
        System.out.println("Error en la linea: " + (s.right+1) + " Columna " + s.left + ". Token #" + s.value + " no reconocido.");
    }

    /* MÃ©todo errores fatales */

    public void errores_fatales(Symbol s) throws Exception{
        JOptionPane.showMessageDialog(null, "Error Sintactico en la linea: " + (s.right+1) + " Columna " + s.left + ". Token #" + s.value + " no reconocido.");
    }

:}

action code
{://Codigo de acciones
    
:}

terminal String ID, NUM, TRUE, FALSE, CADENA;
terminal String COR_IZQ, COR_DER, PAR_IZQ, PAR_DER, PUNTO_COMA, IGUAL, COMA, MAS, MENOS, POR, DIV, alineado, texto;
terminal String formato, letra, tamTex, fondoElemento, autoredimension, visible, borde, opaque, colorText, id_token,horizontal,vertical;
terminal String grupo, negrilla, cursiva, mayuscula, minuscula, capital, tamelemento; 
non terminal Nodo INICIO, L_DEF, DEF, ATRIB, L_SEN, SEN, L_FORM, E, FORM, L_ATRIB,AREA;

precedence left MAS, MENOS;
precedence left POR, DIV; 

start with INICIO;

INICIO          ::= L_DEF:l
                {:
                    RESULT = new Nodo(ConsCSS.INICIO);
                    RESULT.addHijo(l);
                :}
;

L_DEF           ::= L_DEF:l DEF:def
                {:
                    RESULT = l;
                    RESULT.addHijo(def);
                :}
                | DEF:def
                {:
                    RESULT = new Nodo(ConsCSS.L_DEF);
                    RESULT.addHijo(def);
                :}
;

DEF             ::= ID:id COR_IZQ L_ATRIB:l COR_DER
                {:
                    RESULT = new Nodo(ConsCSS.DEF);
                    RESULT.addHijo(ConsCSS.ID,id);
                    RESULT.addHijo(l);
                :}
                | ID:id COR_IZQ COR_DER
                {:
                    RESULT = new Nodo(ConsCSS.DEF);
                    RESULT.addHijo(ConsCSS.ID,id);
                :}
;

L_ATRIB         ::= L_ATRIB:l_atrib ATRIB:a
                {:
                    RESULT = l_atrib;
                    RESULT.addHijo(a);
                :}
                | ATRIB:a
                {:
                    RESULT = new Nodo(ConsCSS.L_ATRIB);
                    RESULT.addHijo(a);
                :}
;

ATRIB           ::= grupo PAR_IZQ ID:id PAR_DER PUNTO_COMA L_SEN:l
                {:
                    RESULT = new Nodo(ConsCSS.ATRIB_G);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id));
                    RESULT.addHijo(l);
                :}
                | id_token PAR_IZQ ID:id PAR_DER PUNTO_COMA L_SEN:l
                {:
                    RESULT = new Nodo(ConsCSS.ATRIB_ID);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id));
                    RESULT.addHijo(l);
                :}
                | grupo PAR_IZQ ID:id PAR_DER PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.ATRIB_G);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id));
                :}
                | id_token PAR_IZQ ID:id PAR_DER PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.ATRIB_ID);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id));
                :}
;

L_SEN       ::= L_SEN:l_sen SEN:s
                {:
                    RESULT = l_sen;
                    RESULT.addHijo(s);
                :}
                | SEN:s
                {:
                    RESULT = new Nodo(ConsCSS.L_SEN);
                    RESULT.addHijo(s);
                :}
;

SEN         ::= alineado IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.ALINEADO);
                    RESULT.addHijo(e);
                :}
                | texto IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.TEXTO);
                    RESULT.addHijo(e);
                :}
                | formato IGUAL L_FORM:l_form PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.FORMATO);
                    RESULT.addHijo(l_form);
                :}
                | letra IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.LETRA);
                    RESULT.addHijo(e);
                :}
                | tamTex IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.TAMTEX);
                    RESULT.addHijo(e);
                :}
                | fondoElemento IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.FONDOELE);
                    RESULT.addHijo(e);
                :}
                | autoredimension IGUAL COR_IZQ E:e1 COMA AREA:a COR_DER PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.AUTOREDIM);
                    RESULT.addHijo(e1,a);
                :}
                | visible IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.VISIBLE);
                    RESULT.addHijo(e);
                :}
                | borde IGUAL COR_IZQ E:e1 COMA E:e2 COMA E:e3 COR_DER PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.BORDE);
                    RESULT.addHijo(e1,e2,e3);
                :}
                | opaque IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.OPAQUE);
                    RESULT.addHijo(e);
                :}
                | colorText IGUAL E:e PUNTO_COMA
                {:
                    RESULT = new Nodo(ConsCSS.COLOR_TEXT);
                    RESULT.addHijo(e);
                :}
;

AREA            ::= horizontal{:
                    RESULT = new Nodo(ConsCSS.HORI);
                :}
                | vertical
                {:
                    RESULT = new Nodo(ConsCSS.VERTI);
                :}
;

L_FORM      ::= L_FORM:l_form COMA FORM:formato
                {:
                    RESULT = l_form;
                    RESULT.addHijo(formato);
                :}
                |   FORM:formato
                {:
                    RESULT = new Nodo(ConsCSS.L_FORM);
                    RESULT.addHijo(formato);
                :}
;

FORM         ::= mayuscula:formato
                {:
                    RESULT = new Nodo(ConsCSS.MAYUSCULA);
                :}
                |   minuscula:formato
                {:
                    RESULT = new Nodo(ConsCSS.MINUSCULA);
                :}
                | cursiva:formato
                {:
                    RESULT = new Nodo(ConsCSS.CURSIVA);
                :}
                | negrilla:formato
                {:
                    RESULT = new Nodo(ConsCSS.NEGRILLA);
                :}
                | capital:formato
                {:
                    RESULT = new Nodo(ConsCSS.CAPITAL);
                :}
;

E           ::= E:e1 MAS:signo E:e2
                {:
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.MAS);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                :}
                | E:e1 MENOS E:e2
                {:
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.MENOS);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                :}
                |   E:e1 POR E:e2
                {:
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.POR);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                :}
                |   E:e1 DIV E:e2
                {: 
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.DIV);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                :}
                | MENOS E:e 
                {:
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.MENOS);
                    RESULT.addHijo(n,e);
                :}
                | PAR_IZQ E:e PAR_DER   
                {:  
                    RESULT = e;
                :}
                | ID:id           
                {:  
                    RESULT = new Nodo(ConsCSS.E);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id));
                :}
                | NUM:num   
                {:  
                    RESULT = new Nodo(ConsCSS.E);
                    RESULT.addHijo(new Nodo(ConsCSS.NUM,num));
                :}
                | TRUE:tt  
                {: 
                    RESULT = new Nodo(ConsCSS.BOOL,tt); 
                :}
                | FALSE:tf
                {: 
                    RESULT = new Nodo(ConsCSS.BOOL,tf); 
                :}
                |   CADENA:cad   
                {: 
                    RESULT = new Nodo(ConsCSS.CAD,cad.substring(1, cad.length()-1)); 
                :}
;