
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 17 12:12:38 CST 2018
//----------------------------------------------------

package GeneradorCCSS;

import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import AST.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 17 12:12:38 CST 2018
  */
public class parserCCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCCSS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\013\004\000\002\013\003\000\002\005\010\000" +
    "\002\005\010\000\002\005\007\000\002\005\007\000\002" +
    "\006\004\000\002\006\003\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\012\000\002\007\006\000" +
    "\002\007\014\000\002\007\006\000\002\007\006\000\002" +
    "\010\005\000\002\010\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\004\004\004\001\002\000\004\011\012\001" +
    "\002\000\006\002\ufffe\004\ufffe\001\002\000\004\002\011" +
    "\001\002\000\006\002\000\004\004\001\002\000\006\002" +
    "\uffff\004\uffff\001\002\000\004\002\001\001\002\000\010" +
    "\012\014\037\015\040\013\001\002\000\004\013\151\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\013\022" +
    "\001\002\000\010\012\ufffa\037\ufffa\040\ufffa\001\002\000" +
    "\010\012\020\037\015\040\013\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\010\012\ufffb\037\ufffb\040\ufffb\001" +
    "\002\000\004\004\023\001\002\000\004\014\024\001\002" +
    "\000\004\015\025\001\002\000\036\012\ufff6\024\041\025" +
    "\035\026\030\027\040\030\031\031\042\032\027\033\032" +
    "\034\034\035\026\036\036\037\ufff6\040\ufff6\001\002\000" +
    "\004\016\146\001\002\000\004\016\137\001\002\000\004" +
    "\016\124\001\002\000\004\016\121\001\002\000\004\016" +
    "\116\001\002\000\036\012\ufff8\024\041\025\035\026\030" +
    "\027\040\030\031\031\042\032\027\033\032\034\034\035" +
    "\026\036\036\037\ufff8\040\ufff8\001\002\000\004\016\104" +
    "\001\002\000\004\016\101\001\002\000\004\016\076\001" +
    "\002\000\036\012\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\001\002\000\004\016\073\001\002" +
    "\000\004\016\070\001\002\000\004\016\043\001\002\000" +
    "\020\004\044\005\045\006\046\007\047\010\053\013\052" +
    "\021\050\001\002\000\022\012\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\001\002\000\022" +
    "\012\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\001\002\000\022\012\uffd9\014\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\001\002\000" +
    "\022\012\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\001\002\000\020\004\044\005\045\006" +
    "\046\007\047\010\053\013\052\021\050\001\002\000\014" +
    "\015\066\020\055\021\056\022\060\023\057\001\002\000" +
    "\020\004\044\005\045\006\046\007\047\010\053\013\052" +
    "\021\050\001\002\000\022\012\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\001\002\000\014" +
    "\014\061\020\055\021\056\022\060\023\057\001\002\000" +
    "\020\004\044\005\045\006\046\007\047\010\053\013\052" +
    "\021\050\001\002\000\020\004\044\005\045\006\046\007" +
    "\047\010\053\013\052\021\050\001\002\000\020\004\044" +
    "\005\045\006\046\007\047\010\053\013\052\021\050\001" +
    "\002\000\020\004\044\005\045\006\046\007\047\010\053" +
    "\013\052\021\050\001\002\000\022\012\uffdc\014\uffdc\015" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\001\002" +
    "\000\022\012\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\001\002\000\022\012\uffde\014\uffde" +
    "\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\001" +
    "\002\000\022\012\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\060\023\057\001\002\000\022\012\uffe1\014" +
    "\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\060\023\057" +
    "\001\002\000\036\012\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\001\002\000\022\012\uffdd\014" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022\060\023\057" +
    "\001\002\000\020\004\044\005\045\006\046\007\047\010" +
    "\053\013\052\021\050\001\002\000\014\015\072\020\055" +
    "\021\056\022\060\023\057\001\002\000\036\012\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\001" +
    "\002\000\020\004\044\005\045\006\046\007\047\010\053" +
    "\013\052\021\050\001\002\000\014\015\075\020\055\021" +
    "\056\022\060\023\057\001\002\000\036\012\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\001\002" +
    "\000\020\004\044\005\045\006\046\007\047\010\053\013" +
    "\052\021\050\001\002\000\014\015\100\020\055\021\056" +
    "\022\060\023\057\001\002\000\036\012\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000" +
    "\020\004\044\005\045\006\046\007\047\010\053\013\052" +
    "\021\050\001\002\000\014\015\103\020\055\021\056\022" +
    "\060\023\057\001\002\000\036\012\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000\004" +
    "\011\105\001\002\000\020\004\044\005\045\006\046\007" +
    "\047\010\053\013\052\021\050\001\002\000\014\017\107" +
    "\020\055\021\056\022\060\023\057\001\002\000\020\004" +
    "\044\005\045\006\046\007\047\010\053\013\052\021\050" +
    "\001\002\000\014\017\111\020\055\021\056\022\060\023" +
    "\057\001\002\000\020\004\044\005\045\006\046\007\047" +
    "\010\053\013\052\021\050\001\002\000\014\012\113\020" +
    "\055\021\056\022\060\023\057\001\002\000\004\015\114" +
    "\001\002\000\036\012\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\001\002\000\036\012\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\001" +
    "\002\000\020\004\044\005\045\006\046\007\047\010\053" +
    "\013\052\021\050\001\002\000\014\015\120\020\055\021" +
    "\056\022\060\023\057\001\002\000\036\012\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\001\002" +
    "\000\020\004\044\005\045\006\046\007\047\010\053\013" +
    "\052\021\050\001\002\000\014\015\123\020\055\021\056" +
    "\022\060\023\057\001\002\000\036\012\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\001\002\000" +
    "\014\041\133\042\132\043\131\044\130\045\127\001\002" +
    "\000\006\015\uffe7\017\uffe7\001\002\000\006\015\135\017" +
    "\134\001\002\000\006\015\uffe2\017\uffe2\001\002\000\006" +
    "\015\uffe5\017\uffe5\001\002\000\006\015\uffe6\017\uffe6\001" +
    "\002\000\006\015\uffe4\017\uffe4\001\002\000\006\015\uffe3" +
    "\017\uffe3\001\002\000\014\041\133\042\132\043\131\044" +
    "\130\045\127\001\002\000\036\012\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002\000\006" +
    "\015\uffe8\017\uffe8\001\002\000\004\011\140\001\002\000" +
    "\020\004\044\005\045\006\046\007\047\010\053\013\052" +
    "\021\050\001\002\000\014\017\142\020\055\021\056\022" +
    "\060\023\057\001\002\000\020\004\044\005\045\006\046" +
    "\007\047\010\053\013\052\021\050\001\002\000\014\012" +
    "\144\020\055\021\056\022\060\023\057\001\002\000\004" +
    "\015\145\001\002\000\036\012\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000\020\004" +
    "\044\005\045\006\046\007\047\010\053\013\052\021\050" +
    "\001\002\000\014\015\150\020\055\021\056\022\060\023" +
    "\057\001\002\000\036\012\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\001\002\000\004\004\152" +
    "\001\002\000\004\014\153\001\002\000\004\015\154\001" +
    "\002\000\036\012\ufff7\024\041\025\035\026\030\027\040" +
    "\030\031\031\042\032\027\033\032\034\034\035\026\036" +
    "\036\037\ufff7\040\ufff7\001\002\000\036\012\ufff9\024\041" +
    "\025\035\026\030\027\040\030\031\031\042\032\027\033" +
    "\032\034\034\035\026\036\036\037\ufff9\040\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\015\013\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\032\007\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\066\001\001\000\002\001\001" +
    "\000\004\011\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\064\001\001\000\004\011\063\001\001" +
    "\000\004\011\062\001\001\000\004\011\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\105" +
    "\001\001\000\002\001\001\000\004\011\107\001\001\000" +
    "\002\001\001\000\004\011\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\125\012\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\140\001\001\000\002\001\001" +
    "\000\004\011\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\154\007\036\001\001" +
    "\000\004\007\114\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    /* Metodo para errores sintacticos*/
	
    public void sintax_error(Symbol s){
        System.out.println("Error en la linea: " + (s.right+1) + " Columna " + s.left + ". Token #" + s.value + " no reconocido.");
    }

    /* Método errores fatales */

    public void errores_fatales(Symbol s) throws Exception{
        JOptionPane.showMessageDialog(null, "Error Sintactico en la linea: " + (s.right+1) + " Columna " + s.left + ". Token #" + s.value + " no reconocido.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCCSS$actions {

//Codigo de acciones
    

  private final parserCCSS parser;

  /** Constructor */
  CUP$parserCCSS$actions(parserCCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCCSS$do_action(
    int                        CUP$parserCCSS$act_num,
    java_cup.runtime.lr_parser CUP$parserCCSS$parser,
    java.util.Stack            CUP$parserCCSS$stack,
    int                        CUP$parserCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCCSS$result;

      /* select the action based on the action number */
      switch (CUP$parserCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= CADENA 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 /*RESULT = new Nodo(cad.substring(1, cad.length()-1));*/ 
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= FALSE 
            {
              Nodo RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 /*RESULT = new Nodo(tf);*/ 
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= TRUE 
            {
              Nodo RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 /*RESULT = new Nodo(tt);*/ 
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 /*RESULT = new Nodo(num);*/ 
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 /*RESULT = new Nodo(id);*/ 
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		 /*RESULT = exp;*/ 
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= MENOS E 
            {
              Nodo RESULT =null;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                            /*System.out.println("-"+exp.getTexto());
                            Nodo padre = new Nodo("NEGATIVO");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E DIV E 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                            /*System.out.println(izq.getTexto()+signo+der.getTexto());
                            Nodo padre = new Nodo(signo);
                            padre.getListaDeHijos().add(izq);
                            padre.getListaDeHijos().add(der);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= E POR E 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                            /*System.out.println(izq.getTexto()+signo+der.getTexto());
                            Nodo padre = new Nodo(signo);
                            padre.getListaDeHijos().add(izq);
                            padre.getListaDeHijos().add(der);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= E MENOS E 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                            /*System.out.println(izq.getTexto()+signo+der.getTexto());
                            Nodo padre = new Nodo(signo);
                            padre.getListaDeHijos().add(izq);
                            padre.getListaDeHijos().add(der);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= E MAS E 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                            /*System.out.println(izq.getTexto()+signo+der.getTexto());
                            Nodo padre = new Nodo(signo);
                            padre.getListaDeHijos().add(izq);
                            padre.getListaDeHijos().add(der);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORM ::= t_capital 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = new Nodo(formato);
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORM ::= t_negrilla 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = new Nodo(formato);
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORM ::= t_cursiva 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = new Nodo(formato);
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORM ::= t_minuscula 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = new Nodo(formato);
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORM ::= t_mayuscula 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = new Nodo(formato);
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_FORM ::= FORM 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo formato = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = formato;
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_FORM",6, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_FORM ::= L_FORM COMA FORM 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo formato = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            /*Nodo padre = new Nodo("L_FORM");
                            padre.getListaDeHijos().add(lista);
                            padre.getListaDeHijos().add(formato);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_FORM",6, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SEN ::= t_colorText IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("COLOR_TEXT");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SEN ::= t_opaque IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("OPAQUE");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SEN ::= t_borde IGUAL COR_IZQ E COMA E COMA E COR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-6)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-6)).right;
		Nodo exp1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo exp3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                            /*Nodo padre = new Nodo("BORDE");
                            padre.getListaDeHijos().add(exp1);
                            padre.getListaDeHijos().add(exp2);
                            padre.getListaDeHijos().add(exp3);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-9)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SEN ::= t_visible IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("VISIBLE");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SEN ::= t_autoredimension IGUAL COR_IZQ E COMA E COR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).right;
		Nodo exp1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                            /*Nodo padre = new Nodo("AUTOREDIMENSION");
                            padre.getListaDeHijos().add(exp1);
                            padre.getListaDeHijos().add(exp2);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SEN ::= t_fondoElemento IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("FONDO_ELEMENTO");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SEN ::= t_tamTex IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("TAM_TEX");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SEN ::= t_letra IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                           /* Nodo padre = new Nodo("LETRA");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SEN ::= t_formato IGUAL L_FORM PUNTO_COMA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("FORM");
                            padre.getListaDeHijos().add(lista);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SEN ::= t_texto IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("TEXTO");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SEN ::= t_alineado IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("ALINEADO");
                            padre.getListaDeHijos().add(exp);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_SEN ::= SEN 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = sent;
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_SEN",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_SEN ::= L_SEN SEN 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            /*Nodo padre = new Nodo("L_SEN");
                            padre.getListaDeHijos().add(lista);
                            padre.getListaDeHijos().add(sent);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_SEN",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATRIB ::= t_id PAR_IZQ ID PAR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                            /*Nodo padre = new Nodo("ATRIB");
                            padre.getListaDeHijos().add(new Nodo("ID"));
                            padre.getListaDeHijos().add(new Nodo(id));
                            padre.getListaDeHijos().add(new Nodo("Sin Instrucciones"));
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ATRIB ::= t_grupo PAR_IZQ ID PAR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                            /*Nodo padre = new Nodo("ATRIB");
                            padre.getListaDeHijos().add(new Nodo("GRUPO"));
                            padre.getListaDeHijos().add(new Nodo(id));
                            padre.getListaDeHijos().add(new Nodo("Sin Instrucciones"));
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ATRIB ::= t_id PAR_IZQ ID PAR_DER PUNTO_COMA L_SEN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            /*Nodo padre = new Nodo("X");
                            padre.getListaDeHijos().add(new Nodo("ID"));
                            padre.getListaDeHijos().add(new Nodo(id));
                            padre.getListaDeHijos().add(lista);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ATRIB ::= t_grupo PAR_IZQ ID PAR_DER PUNTO_COMA L_SEN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            /*Nodo padre = new Nodo("ATRIB");
                            padre.getListaDeHijos().add(new Nodo("GRUPO"));
                            padre.getListaDeHijos().add(new Nodo(id));
                            padre.getListaDeHijos().add(lista);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_ATRIB ::= ATRIB 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = x;
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_ATRIB",9, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_ATRIB ::= L_ATRIB ATRIB 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            /*Nodo padre = new Nodo("L_ATRIB");
                            padre.getListaDeHijos().add(lista);
                            padre.getListaDeHijos().add(x);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_ATRIB",9, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= ID COR_IZQ COR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                            /*Nodo padre = new Nodo("DEF");
                            padre.getListaDeHijos().add(new Nodo(id));
                            padre.getListaDeHijos().add(new Nodo("Sin Instrucciones"));
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= ID COR_IZQ L_ATRIB COR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                            /*Nodo padre = new Nodo("DEF");
                            padre.getListaDeHijos().add(new Nodo(id));
                            padre.getListaDeHijos().add(lista);
                            RESULT = padre;*/
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_DEF ::= DEF 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            //RESULT = def;
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_DEF",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_DEF ::= L_DEF DEF 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_DEF",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_DEF 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                            
                        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		RESULT = start_val;
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCCSS$parser.done_parsing();
          return CUP$parserCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

