
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 24 17:32:19 CST 2018
//----------------------------------------------------

package GeneradorCCSS;

import java_cup.runtime.Symbol;
import javax.swing.JOptionPane;
import AST.Nodo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 24 17:32:19 CST 2018
  */
public class parserCCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCCSS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\005" +
    "\000\002\013\004\000\002\013\003\000\002\005\010\000" +
    "\002\005\010\000\002\005\007\000\002\005\007\000\002" +
    "\006\004\000\002\006\003\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\007\006\000\002\007\012\000\002\007\006\000" +
    "\002\007\014\000\002\007\006\000\002\007\006\000\002" +
    "\017\005\000\002\017\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\010\005\000\002\010\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\016\003\000\002\016" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\004\000\002\011\005\000" +
    "\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\004\004\004\001\002\000\004\011\012\001" +
    "\002\000\006\002\ufffe\004\ufffe\001\002\000\004\002\011" +
    "\001\002\000\006\002\000\004\004\001\002\000\006\002" +
    "\uffff\004\uffff\001\002\000\004\002\001\001\002\000\010" +
    "\012\013\037\015\042\014\001\002\000\006\002\ufffc\004" +
    "\ufffc\001\002\000\004\013\160\001\002\000\004\013\022" +
    "\001\002\000\010\012\ufffa\037\ufffa\042\ufffa\001\002\000" +
    "\010\012\020\037\015\042\014\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\010\012\ufffb\037\ufffb\042\ufffb\001" +
    "\002\000\004\004\023\001\002\000\004\014\024\001\002" +
    "\000\004\015\025\001\002\000\036\012\ufff6\024\040\025" +
    "\032\026\041\027\034\030\033\031\042\032\036\033\027" +
    "\034\026\035\031\036\037\037\ufff6\042\ufff6\001\002\000" +
    "\004\016\147\001\002\000\004\016\144\001\002\000\036" +
    "\012\ufff8\024\040\025\032\026\041\027\034\030\033\031" +
    "\042\032\036\033\027\034\026\035\031\036\037\037\ufff8" +
    "\042\ufff8\001\002\000\004\016\136\001\002\000\004\016" +
    "\130\001\002\000\004\016\125\001\002\000\004\016\122" +
    "\001\002\000\036\012\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\042\ufff4\001\002\000\004\016\073\001" +
    "\002\000\004\016\070\001\002\000\004\016\061\001\002" +
    "\000\004\016\046\001\002\000\004\016\043\001\002\000" +
    "\004\010\044\001\002\000\004\015\045\001\002\000\036" +
    "\012\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\042\uffee\001\002\000\014\043\050\044\052\045\054\046" +
    "\053\047\055\001\002\000\006\015\uffdf\017\uffdf\001\002" +
    "\000\006\015\uffdb\017\uffdb\001\002\000\006\015\057\017" +
    "\056\001\002\000\006\015\uffdc\017\uffdc\001\002\000\006" +
    "\015\uffdd\017\uffdd\001\002\000\006\015\uffde\017\uffde\001" +
    "\002\000\006\015\uffda\017\uffda\001\002\000\014\043\050" +
    "\044\052\045\054\046\053\047\055\001\002\000\036\012" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\042" +
    "\ufff1\001\002\000\006\015\uffe0\017\uffe0\001\002\000\012" +
    "\050\066\051\065\052\062\053\063\001\002\000\004\015" +
    "\uffe1\001\002\000\004\015\uffe2\001\002\000\004\015\067" +
    "\001\002\000\004\015\uffe4\001\002\000\004\015\uffe3\001" +
    "\002\000\036\012\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\042\ufff3\001\002\000\004\010\071\001\002" +
    "\000\004\015\072\001\002\000\036\012\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\042\uffe9\001\002\000" +
    "\004\011\074\001\002\000\010\005\075\013\100\021\076" +
    "\001\002\000\020\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\001\002\000\010\005\075\013\100" +
    "\021\076\001\002\000\014\017\113\020\102\021\103\022" +
    "\105\023\104\001\002\000\010\005\075\013\100\021\076" +
    "\001\002\000\014\014\106\020\102\021\103\022\105\023" +
    "\104\001\002\000\010\005\075\013\100\021\076\001\002" +
    "\000\010\005\075\013\100\021\076\001\002\000\010\005" +
    "\075\013\100\021\076\001\002\000\010\005\075\013\100" +
    "\021\076\001\002\000\020\014\uffd2\015\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\001\002\000\020\014\uffd5" +
    "\015\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\001" +
    "\002\000\020\014\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\001\002\000\020\014\uffd6\015\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\105\023\104\001\002\000\020" +
    "\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\022\105\023" +
    "\104\001\002\000\006\040\115\041\116\001\002\000\004" +
    "\012\117\001\002\000\004\012\uffe6\001\002\000\004\012" +
    "\uffe5\001\002\000\004\015\120\001\002\000\036\012\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\042\uffed" +
    "\001\002\000\020\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\105\023\104\001\002\000\004\010\123\001\002" +
    "\000\004\015\124\001\002\000\036\012\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0\001\002\000" +
    "\010\005\075\013\100\021\076\001\002\000\014\015\127" +
    "\020\102\021\103\022\105\023\104\001\002\000\036\012" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\042" +
    "\uffef\001\002\000\004\010\132\001\002\000\006\015\134" +
    "\020\133\001\002\000\006\015\uffe7\020\uffe7\001\002\000" +
    "\004\010\135\001\002\000\036\012\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\042\ufff2\001\002\000\006" +
    "\015\uffe8\020\uffe8\001\002\000\006\006\137\007\140\001" +
    "\002\000\006\012\uffd9\015\uffd9\001\002\000\006\012\uffd8" +
    "\015\uffd8\001\002\000\004\015\142\001\002\000\036\012" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\042" +
    "\uffea\001\002\000\036\012\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\042\ufff5\001\002\000\010\005\075" +
    "\013\100\021\076\001\002\000\014\015\146\020\102\021" +
    "\103\022\105\023\104\001\002\000\036\012\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\042\uffec\001\002" +
    "\000\004\011\150\001\002\000\010\005\075\013\100\021" +
    "\076\001\002\000\014\017\152\020\102\021\103\022\105" +
    "\023\104\001\002\000\004\010\153\001\002\000\004\017" +
    "\154\001\002\000\006\006\137\007\140\001\002\000\004" +
    "\012\156\001\002\000\004\015\157\001\002\000\036\012" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\042" +
    "\uffeb\001\002\000\004\004\161\001\002\000\004\014\162" +
    "\001\002\000\004\015\163\001\002\000\036\012\ufff7\024" +
    "\040\025\032\026\041\027\034\030\033\031\042\032\036" +
    "\033\027\034\026\035\031\036\037\037\ufff7\042\ufff7\001" +
    "\002\000\036\012\ufff9\024\040\025\032\026\041\027\034" +
    "\030\033\031\042\032\036\033\027\034\026\035\031\036" +
    "\037\037\ufff9\042\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\015\013\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\027\007\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\050\012\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\076\001\001\000\002\001\001\000\004\011\120\001" +
    "\001\000\002\001\001\000\004\011\100\001\001\000\002" +
    "\001\001\000\004\011\111\001\001\000\004\011\110\001" +
    "\001\000\004\011\107\001\001\000\004\011\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\163\007\034\001\001\000\004\007\142\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    /* Metodo para errores sintacticos*/
	
    public void sintax_error(Symbol s){
        System.out.println("Error en la linea: " + (s.right+1) + " Columna " + s.left + ". Token #" + s.value + " no reconocido.");
    }

    /* Método errores fatales */

    public void errores_fatales(Symbol s) throws Exception{
        JOptionPane.showMessageDialog(null, "Error Sintactico en la linea: " + (s.right+1) + " Columna " + s.left + ". Token #" + s.value + " no reconocido.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCCSS$actions {

//Codigo de acciones
    

  private final parserCCSS parser;

  /** Constructor */
  CUP$parserCCSS$actions(parserCCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCCSS$do_action(
    int                        CUP$parserCCSS$act_num,
    java_cup.runtime.lr_parser CUP$parserCCSS$parser,
    java.util.Stack            CUP$parserCCSS$stack,
    int                        CUP$parserCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCCSS$result;

      /* select the action based on the action number */
      switch (CUP$parserCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= NUM 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		  
                    RESULT = new Nodo(ConsCSS.E);
                    RESULT.addHijo(new Nodo(ConsCSS.NUM,num,numleft,numright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= PAR_IZQ E PAR_DER 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		  
                    RESULT = e;
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= MENOS E 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.MENOS);
                    RESULT.addHijo(n,e);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E DIV E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.DIV);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E POR E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.POR);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E MENOS E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.MENOS);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E MAS E 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.E);
                    Nodo n = new Nodo(ConsCSS.MAS);
                    n.addHijo(e1,e2);
                    RESULT.addHijo(n);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BOOL ::= FALSE 
            {
              Nodo RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                    RESULT = new Nodo(ConsCSS.BOOL,tf,tfleft,tfright); 
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("BOOL",12, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOOL ::= TRUE 
            {
              Nodo RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		 
                    RESULT = new Nodo(ConsCSS.BOOL,tt,ttleft,ttright); 
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("BOOL",12, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FORM ::= capital 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.CAPITAL);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FORM ::= negrilla 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.NEGRILLA);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FORM ::= cursiva 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.CURSIVA);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FORM ::= minuscula 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.MINUSCULA);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FORM ::= mayuscula 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String formato = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.MAYUSCULA);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("FORM",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_FORM ::= FORM 
            {
              Nodo RESULT =null;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo formato = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.L_FORM);
                    RESULT.addHijo(formato);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_FORM",6, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_FORM ::= L_FORM COMA FORM 
            {
              Nodo RESULT =null;
		int l_formleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int l_formright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo l_form = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int formatoleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int formatoright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo formato = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = l_form;
                    RESULT.addHijo(formato);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_FORM",6, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ALI ::= derecha 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCSS.DER);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ALI",11, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ALI ::= izquierda 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCSS.IZQ);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ALI",11, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ALI ::= centrado 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCSS.CENTRADO);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ALI",11, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ALI ::= justificado 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCSS.JUSTIFICADO);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ALI",11, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AREA ::= vertical 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCSS.VERTI);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("AREA",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AREA ::= horizontal 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(ConsCSS.HORI);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("AREA",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CAD ::= CADENA 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.L_CAD);
                    RESULT.addHijo(new Nodo(ConsCSS.CAD,cad.substring(1, cad.length()-1),cadleft,cadright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_CAD",13, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CAD ::= L_CAD MAS CADENA 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = l;
                    RESULT.addHijo(new Nodo(ConsCSS.CAD,cad.substring(1, cad.length()-1),cadleft,cadright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_CAD",13, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SEN ::= colorText IGUAL CADENA PUNTO_COMA 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.COLOR_TEXT);
                    RESULT.addHijo(new Nodo(ConsCSS.CAD,cad.substring(1, cad.length()-1),cadleft,cadright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SEN ::= opaque IGUAL BOOL PUNTO_COMA 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.OPAQUE);
                    RESULT.addHijo(b);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SEN ::= borde IGUAL COR_IZQ E COMA CADENA COMA BOOL COR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-6)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-6)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                    RESULT = new Nodo(ConsCSS.BORDE);
                    RESULT.addHijo(e1,new Nodo(ConsCSS.CAD,cad.substring(1, cad.length()-1),cadleft,cadright),e3);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-9)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SEN ::= visible IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.VISIBLE);
                    RESULT.addHijo(e);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SEN ::= autoredimension IGUAL COR_IZQ E COMA AREA COR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                    RESULT = new Nodo(ConsCSS.AUTOREDIM);
                    RESULT.addHijo(e1,a);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SEN ::= fondoElemento IGUAL CADENA PUNTO_COMA 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.FONDOELE);
                    RESULT.addHijo(new Nodo(ConsCSS.CAD,cad.substring(1, cad.length()-1),cadleft,cadright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SEN ::= tamTex IGUAL E PUNTO_COMA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.TAMTEX);
                    RESULT.addHijo(e);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SEN ::= letra IGUAL CADENA PUNTO_COMA 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.LETRA);
                    RESULT.addHijo(new Nodo(ConsCSS.CAD,cad.substring(1, cad.length()-1),cadleft,cadright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SEN ::= formato IGUAL L_FORM PUNTO_COMA 
            {
              Nodo RESULT =null;
		int l_formleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int l_formright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo l_form = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.FORMATO);
                    RESULT.addHijo(l_form);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SEN ::= texto IGUAL L_CAD PUNTO_COMA 
            {
              Nodo RESULT =null;
		int l_cadleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int l_cadright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo l_cad = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.TEXTO);
                    RESULT.addHijo(l_cad);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SEN ::= alineado IGUAL ALI PUNTO_COMA 
            {
              Nodo RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo ali = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.ALINEADO);
                    RESULT.addHijo(ali);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("SEN",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_SEN ::= SEN 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.L_SEN);
                    RESULT.addHijo(s);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_SEN",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_SEN ::= L_SEN SEN 
            {
              Nodo RESULT =null;
		int l_senleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int l_senright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo l_sen = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = l_sen;
                    RESULT.addHijo(s);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_SEN",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATRIB ::= id_token PAR_IZQ ID PAR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                    RESULT = new Nodo(ConsCSS.ATRIB_ID);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id,idleft,idright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ATRIB ::= grupo PAR_IZQ ID PAR_DER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                    RESULT = new Nodo(ConsCSS.ATRIB_G);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id,idleft,idright));
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ATRIB ::= id_token PAR_IZQ ID PAR_DER PUNTO_COMA L_SEN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.ATRIB_ID);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id,idleft,idright));
                    RESULT.addHijo(l);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ATRIB ::= grupo PAR_IZQ ID PAR_DER PUNTO_COMA L_SEN 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.ATRIB_G);
                    RESULT.addHijo(new Nodo(ConsCSS.ID,id,idleft,idright));
                    RESULT.addHijo(l);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("ATRIB",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_ATRIB ::= ATRIB 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.L_ATRIB);
                    RESULT.addHijo(a);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_ATRIB",9, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_ATRIB ::= L_ATRIB ATRIB 
            {
              Nodo RESULT =null;
		int l_atribleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int l_atribright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo l_atrib = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = l_atrib;
                    RESULT.addHijo(a);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_ATRIB",9, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEF ::= ID COR_IZQ COR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)).value;
		
                    RESULT = new Nodo(ConsCSS.DEF);
                    RESULT.addHijo(ConsCSS.ID,id,idleft,idright);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= ID COR_IZQ L_ATRIB COR_DER 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		
                    RESULT = new Nodo(ConsCSS.DEF);
                    RESULT.addHijo(ConsCSS.ID,id,idleft,idright);
                    RESULT.addHijo(l);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("DEF",2, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_DEF ::= DEF 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.L_DEF);
                    RESULT.addHijo(def);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_DEF",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_DEF ::= L_DEF DEF 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = l;
                    RESULT.addHijo(def);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("L_DEF",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_DEF 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.peek()).value;
		
                    RESULT = new Nodo(ConsCSS.INICIO);
                    RESULT.addHijo(l);
                
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		RESULT = start_val;
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCCSS$parser.done_parsing();
          return CUP$parserCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

