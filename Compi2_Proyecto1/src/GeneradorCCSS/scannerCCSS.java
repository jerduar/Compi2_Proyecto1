/* The following code was generated by JFlex 1.6.1 */

package GeneradorCCSS;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
//Inicio

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/GeneradorCCSS/LexicoCCSS.flex</tt>
 */
public class scannerCCSS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO_SIMPLE = 2;
  public static final int COMENTARIO_MULTIPLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  6, 45,  7,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7,  0,  4,  0,  0,  0,  0,  0, 12, 18,  9, 16, 15, 17,  2,  8, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 13, 19,  0, 14,  0,  0, 
     0, 27, 40, 28, 39, 21, 37, 22, 43, 25,  3,  3, 26, 33, 20, 38, 
    35, 41, 23, 31, 36, 29, 32,  3, 42, 34, 44, 10,  0, 11,  0,  3, 
     0, 27, 40, 28, 39, 21, 37, 22, 43, 25,  3,  3, 26, 33, 20, 38, 
    35, 41, 23, 31, 36, 29, 32,  3, 42, 34, 44,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 45,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\1\16\2\3\1\1\13\3\1\0\1\3\1\0\1\17"+
    "\2\0\1\20\2\3\2\21\7\3\1\0\1\3\1\0"+
    "\12\3\1\2\3\0\3\3\1\0\6\3\1\0\1\3"+
    "\1\0\13\3\1\0\1\4\3\3\1\0\2\3\1\0"+
    "\1\3\1\0\3\3\1\0\1\3\1\0\3\3\1\22"+
    "\1\3\1\0\5\3\1\0\1\3\1\0\1\3\1\23"+
    "\1\24\1\0\2\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\25"+
    "\1\3\2\26\3\3\1\27\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\30\2\3"+
    "\1\31\1\0\1\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\2\32\1\3\1\0\1\3\2\33\1\0\1\3"+
    "\1\0\2\3\1\34\1\0\1\3\2\35\2\36\1\0"+
    "\1\3\1\0\1\3\2\37\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\40\1\41\2\42\2\43"+
    "\1\3\1\0\1\3\1\0\2\3\2\44\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\1\45\1\0\1\3\2\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\56\0\134\0\212\0\270\0\346\0\56"+
    "\0\u0114\0\56\0\56\0\56\0\56\0\u0142\0\56\0\56"+
    "\0\56\0\56\0\56\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\270\0\56\0\u0450\0\u047e\0\56"+
    "\0\u04ac\0\u04da\0\56\0\212\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u03f4\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u08ce\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"+
    "\0\212\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\212\0\212\0\u12de\0\u130c"+
    "\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\212\0\u15be"+
    "\0\56\0\212\0\u15ec\0\u161a\0\u1648\0\212\0\u1676\0\u16a4"+
    "\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814"+
    "\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984"+
    "\0\u19b2\0\u19e0\0\212\0\u1a0e\0\u1a3c\0\212\0\u1a6a\0\u1a98"+
    "\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\56"+
    "\0\212\0\u1c08\0\u1c36\0\u1c64\0\56\0\212\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\212\0\u1d78\0\u1da6\0\56\0\212"+
    "\0\56\0\212\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\56\0\212"+
    "\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce"+
    "\0\u1ffc\0\56\0\212\0\56\0\212\0\56\0\212\0\u202a"+
    "\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\56\0\212\0\u213e"+
    "\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\212"+
    "\0\u22ae\0\u22dc\0\56\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\3\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\5\1\25\1\5\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\3\1\5\1\33"+
    "\1\34\2\5\1\35\1\36\1\37\1\5\1\40\2\5"+
    "\1\41\1\5\60\0\1\4\1\42\54\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\0\5\5\1\0\16\5\1\0"+
    "\4\44\1\45\51\44\6\0\1\10\57\0\1\46\1\47"+
    "\62\0\1\50\40\0\1\43\1\0\1\5\20\0\1\5"+
    "\1\51\2\5\1\0\5\5\1\0\16\5\2\0\1\43"+
    "\1\0\1\5\20\0\3\5\1\52\1\0\5\5\1\0"+
    "\16\5\50\0\1\53\7\0\1\43\1\0\1\5\20\0"+
    "\4\5\1\0\5\5\1\0\10\5\1\54\5\5\2\0"+
    "\1\43\1\0\1\5\20\0\1\5\1\55\2\5\1\0"+
    "\5\5\1\0\16\5\2\0\1\43\1\0\1\5\20\0"+
    "\4\5\1\0\1\5\1\56\2\5\1\57\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\2\5"+
    "\1\60\1\5\1\61\1\0\7\5\1\62\6\5\2\0"+
    "\1\43\1\0\1\5\20\0\1\5\1\63\2\5\1\64"+
    "\1\65\4\5\1\0\16\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\66\1\67\1\5\1\70\2\5\1\0"+
    "\16\5\2\0\1\43\1\0\1\5\20\0\1\5\1\71"+
    "\1\5\1\72\1\0\2\5\1\73\2\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\2\5"+
    "\1\74\2\5\1\0\7\5\1\75\6\5\2\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\5\5\1\0\4\5"+
    "\1\76\11\5\2\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\7\5\1\77\6\5\2\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\5\5\1\0\7\5"+
    "\1\100\6\5\2\0\1\101\55\0\1\43\1\102\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\16\5\1\0\5\46"+
    "\1\7\1\10\47\46\11\103\1\104\44\103\1\0\1\43"+
    "\1\0\1\5\20\0\2\5\1\105\1\5\1\0\5\5"+
    "\1\0\16\5\2\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\4\5\1\106\1\0\16\5\2\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\0\5\5\1\0\5\5\1\107"+
    "\10\5\2\0\1\43\1\0\1\5\20\0\4\5\1\110"+
    "\1\111\4\5\1\0\16\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\5\5\1\112\10\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\0\4\5\1\113\11\5\2\0\1\43\1\0\1\5"+
    "\20\0\3\5\1\114\1\0\5\5\1\0\16\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\1\5\1\115"+
    "\3\5\1\0\16\5\2\0\1\43\1\0\1\5\20\0"+
    "\3\5\1\116\1\0\5\5\1\0\16\5\37\0\2\117"+
    "\17\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\117\1\120\15\5\25\0\1\121\32\0\1\43\1\0"+
    "\1\5\20\0\1\122\3\5\1\0\5\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\0\3\5\1\123\12\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\13\5\1\124\2\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\4\5"+
    "\1\125\1\0\16\5\2\0\1\43\1\0\1\5\20\0"+
    "\4\5\1\0\5\5\1\0\2\5\1\126\13\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\1\5\1\127"+
    "\3\5\1\0\16\5\2\0\1\43\1\0\1\5\20\0"+
    "\1\130\2\5\1\131\1\0\5\5\1\0\16\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\2\5\1\132"+
    "\2\5\1\0\16\5\2\0\1\43\1\0\1\5\20\0"+
    "\3\5\1\133\1\0\5\5\1\0\16\5\2\0\1\43"+
    "\1\0\1\5\20\0\3\5\1\134\1\0\5\5\1\0"+
    "\16\5\2\0\1\5\54\0\11\103\1\135\54\103\1\136"+
    "\1\135\44\103\1\0\1\43\1\0\1\5\20\0\3\5"+
    "\1\137\1\0\5\5\1\0\16\5\2\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\0\5\5\1\0\4\5\1\140"+
    "\11\5\2\0\1\43\1\0\1\5\20\0\3\5\1\141"+
    "\1\0\5\5\1\0\16\5\25\0\1\142\32\0\1\43"+
    "\1\0\1\5\20\0\1\143\3\5\1\0\5\5\1\0"+
    "\16\5\2\0\1\43\1\0\1\5\20\0\4\5\1\0"+
    "\5\5\1\0\7\5\1\144\6\5\2\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\145\1\146\4\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\147\1\150\15\5\2\0\1\43\1\0\1\5\20\0"+
    "\4\5\1\0\5\5\1\0\7\5\1\151\6\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\5\5\1\0"+
    "\5\5\1\152\10\5\31\0\2\153\25\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\153\1\154\4\5\1\0\16\5"+
    "\36\0\1\155\21\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\4\5\1\156\1\0\16\5\2\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\0\4\5\1\157\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\0\5\5\1\160\10\5\2\0\1\43\1\0\1\5"+
    "\20\0\1\5\1\161\2\5\1\0\5\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\0\5\5\1\162\10\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\163\1\164\15\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\5\5\1\0"+
    "\10\5\1\165\5\5\2\0\1\43\1\0\1\5\20\0"+
    "\4\5\1\0\5\5\1\0\2\5\1\166\13\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\5\5\1\0"+
    "\12\5\1\167\3\5\2\0\1\43\1\0\1\5\20\0"+
    "\4\5\1\0\5\5\1\0\10\5\1\170\5\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\171\1\172\4\5"+
    "\1\0\16\5\1\0\10\103\1\10\1\135\44\103\1\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\173\1\174\4\5"+
    "\1\0\16\5\2\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\7\5\1\175\6\5\2\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\2\5\1\176\2\5"+
    "\1\0\16\5\26\0\1\177\31\0\1\43\1\0\1\5"+
    "\20\0\1\5\1\200\2\5\1\0\5\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\3\5\1\201\1\0"+
    "\5\5\1\0\16\5\45\0\1\202\12\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\0\5\5\1\0\5\5\1\203"+
    "\10\5\31\0\2\204\25\0\1\43\1\0\1\5\20\0"+
    "\4\5\1\204\1\205\4\5\1\0\16\5\2\0\1\43"+
    "\1\0\1\5\20\0\3\5\1\206\1\0\5\5\1\0"+
    "\16\5\2\0\1\43\1\0\1\5\20\0\4\5\1\207"+
    "\1\210\4\5\1\0\16\5\51\0\1\211\6\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\5\5\1\0\11\5"+
    "\1\212\4\5\37\0\2\213\17\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\213\1\214\15\5\2\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\5\5\1\215"+
    "\1\216\15\5\2\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\7\5\1\217\6\5\2\0\1\43"+
    "\1\0\1\5\20\0\1\5\1\220\2\5\1\0\5\5"+
    "\1\0\16\5\26\0\1\221\31\0\1\43\1\0\1\5"+
    "\20\0\1\5\1\222\2\5\1\0\5\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\0\7\5\1\223\6\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\2\5\1\224\2\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\4\5"+
    "\1\225\1\0\16\5\2\0\1\43\1\0\1\5\20\0"+
    "\1\5\1\226\2\5\1\0\5\5\1\0\16\5\55\0"+
    "\1\227\2\0\1\43\1\0\1\5\20\0\4\5\1\0"+
    "\5\5\1\0\15\5\1\230\33\0\1\231\24\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\1\5\1\232\3\5"+
    "\1\0\16\5\34\0\1\233\23\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\2\5\1\234\2\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\1\5\1\235\2\5"+
    "\1\0\5\5\1\0\16\5\34\0\1\236\23\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\2\5\1\237\2\5"+
    "\1\0\16\5\41\0\1\240\16\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\1\5\1\241\14\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\0\5\5\1\242\10\5\35\0\1\243\22\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\3\5\1\244\1\5"+
    "\1\0\16\5\33\0\1\245\24\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\1\5\1\246\3\5\1\0\16\5"+
    "\35\0\1\247\22\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\3\5\1\250\1\5\1\0\16\5\35\0\1\251"+
    "\22\0\1\43\1\0\1\5\20\0\4\5\1\0\3\5"+
    "\1\252\1\5\1\0\16\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\13\5\1\253\2\5"+
    "\2\0\1\43\1\0\1\5\20\0\1\5\1\254\2\5"+
    "\1\0\5\5\1\0\16\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\5\5\1\255\10\5"+
    "\2\0\1\43\1\0\1\5\20\0\1\5\1\256\2\5"+
    "\1\0\5\5\1\0\16\5\47\0\1\257\10\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\5\5\1\0\7\5"+
    "\1\260\6\5\33\0\1\261\24\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\1\5\1\262\3\5\1\0\16\5"+
    "\50\0\1\263\7\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\10\5\1\264\5\5\2\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\5\5\1\0\10\5"+
    "\1\265\5\5\33\0\1\266\24\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\1\5\1\267\3\5\1\0\16\5"+
    "\34\0\1\270\23\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\2\5\1\271\2\5\1\0\16\5\2\0\1\43"+
    "\1\0\1\5\20\0\1\5\1\272\2\5\1\0\5\5"+
    "\1\0\16\5\34\0\1\273\23\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\2\5\1\274\2\5\1\0\16\5"+
    "\26\0\1\275\31\0\1\43\1\0\1\5\20\0\1\5"+
    "\1\276\2\5\1\0\5\5\1\0\16\5\36\0\1\277"+
    "\21\0\1\43\1\0\1\5\20\0\4\5\1\0\4\5"+
    "\1\300\1\0\16\5\36\0\1\301\21\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\0\4\5\1\302\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\4\5\1\0\1\5"+
    "\1\303\3\5\1\0\16\5\2\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\7\5\1\304\6\5"+
    "\25\0\1\305\32\0\1\43\1\0\1\5\20\0\1\306"+
    "\3\5\1\0\5\5\1\0\16\5\34\0\1\307\23\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\0\2\5\1\310"+
    "\2\5\1\0\16\5\47\0\1\311\10\0\1\43\1\0"+
    "\1\5\20\0\4\5\1\0\5\5\1\0\7\5\1\312"+
    "\6\5\2\0\1\43\1\0\1\5\20\0\4\5\1\313"+
    "\1\314\4\5\1\0\16\5\22\0\1\315\35\0\1\43"+
    "\1\0\1\5\15\0\1\315\2\0\4\5\1\0\5\5"+
    "\1\0\16\5\2\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\13\5\1\316\2\5\33\0\1\317"+
    "\24\0\1\43\1\0\1\5\20\0\4\5\1\0\1\5"+
    "\1\320\3\5\1\0\16\5\33\0\1\321\24\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\1\5\1\322\3\5"+
    "\1\0\16\5\33\0\1\323\24\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\1\5\1\324\3\5\1\0\16\5"+
    "\2\0\1\43\1\0\1\5\20\0\1\5\1\325\2\5"+
    "\1\0\5\5\1\0\16\5\45\0\1\326\12\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\5\5\1\0\5\5"+
    "\1\327\10\5\42\0\1\330\15\0\1\43\1\0\1\5"+
    "\20\0\4\5\1\0\5\5\1\0\2\5\1\331\13\5"+
    "\45\0\1\332\12\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\5\5\1\333\10\5\34\0\1\334"+
    "\23\0\1\43\1\0\1\5\20\0\4\5\1\0\2\5"+
    "\1\335\2\5\1\0\16\5\34\0\1\336\23\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\2\5\1\337\2\5"+
    "\1\0\16\5\2\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\2\5\1\340\13\5\34\0\1\341"+
    "\23\0\1\43\1\0\1\5\20\0\4\5\1\0\2\5"+
    "\1\342\2\5\1\0\16\5\26\0\1\343\31\0\1\43"+
    "\1\0\1\5\20\0\1\5\1\344\2\5\1\0\5\5"+
    "\1\0\16\5\2\0\1\43\1\0\1\5\20\0\1\5"+
    "\1\345\2\5\1\0\5\5\1\0\16\5\33\0\1\346"+
    "\24\0\1\43\1\0\1\5\20\0\4\5\1\0\1\5"+
    "\1\347\3\5\1\0\16\5\25\0\1\350\32\0\1\43"+
    "\1\0\1\5\20\0\1\351\3\5\1\0\5\5\1\0"+
    "\16\5\2\0\1\43\1\0\1\5\20\0\1\352\3\5"+
    "\1\0\5\5\1\0\16\5\37\0\2\353\17\0\1\43"+
    "\1\0\1\5\20\0\4\5\1\0\5\5\1\353\1\354"+
    "\15\5\2\0\1\43\1\0\1\5\20\0\4\5\1\0"+
    "\5\5\1\0\5\5\1\355\10\5\31\0\2\356\25\0"+
    "\1\43\1\0\1\5\20\0\4\5\1\356\1\357\4\5"+
    "\1\0\16\5\2\0\1\43\1\0\1\5\20\0\4\5"+
    "\1\0\5\5\1\0\7\5\1\360\6\5\47\0\1\361"+
    "\10\0\1\43\1\0\1\5\20\0\4\5\1\0\5\5"+
    "\1\0\7\5\1\362\6\5\25\0\1\363\32\0\1\43"+
    "\1\0\1\5\20\0\1\364\3\5\1\0\5\5\1\0"+
    "\16\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8970];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\4\1\1\11\1\1\4\11\1\1"+
    "\5\11\16\1\1\0\1\1\1\0\1\11\2\0\1\11"+
    "\2\1\1\11\10\1\1\0\1\1\1\0\13\1\3\0"+
    "\3\1\1\0\6\1\1\0\1\1\1\0\13\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\5\1\1\0\5\1\1\0\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\11"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\5\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\11\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//Código de Java
public String comentario = "";
//public ArrayList<Nodo_Error> Listado_Errores;  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCCSS(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symCCSS.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
            }
          case 39: break;
          case 2: 
            { return new Symbol(symCCSS.NUM, yycolumn, yyline, yytext());
            }
          case 40: break;
          case 3: 
            { return new Symbol(symCCSS.ID, yycolumn, yyline, yytext());
            }
          case 41: break;
          case 4: 
            { /*Se ignoran*/
            }
          case 42: break;
          case 5: 
            { return new Symbol(symCCSS.DIV, yycolumn, yyline, yytext());
            }
          case 43: break;
          case 6: 
            { return new Symbol(symCCSS.POR, yycolumn, yyline, yytext());
            }
          case 44: break;
          case 7: 
            { return new Symbol(symCCSS.COR_IZQ, yycolumn, yyline, yytext());
            }
          case 45: break;
          case 8: 
            { return new Symbol(symCCSS.COR_DER, yycolumn, yyline, yytext());
            }
          case 46: break;
          case 9: 
            { return new Symbol(symCCSS.PAR_IZQ, yycolumn, yyline, yytext());
            }
          case 47: break;
          case 10: 
            { return new Symbol(symCCSS.COMA, yycolumn, yyline, yytext());
            }
          case 48: break;
          case 11: 
            { return new Symbol(symCCSS.MAS, yycolumn, yyline, yytext());
            }
          case 49: break;
          case 12: 
            { return new Symbol(symCCSS.MENOS, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 13: 
            { return new Symbol(symCCSS.PAR_DER, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 14: 
            { return new Symbol(symCCSS.PUNTO_COMA, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 15: 
            { return new Symbol(symCCSS.CADENA, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 16: 
            { return new Symbol(symCCSS.IGUAL, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 17: 
            { return new Symbol(symCCSS.id_token, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 18: 
            { return new Symbol(symCCSS.TRUE, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 19: 
            { return new Symbol(symCCSS.grupo, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 20: 
            { return new Symbol(symCCSS.letra, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 21: 
            { return new Symbol(symCCSS.texto, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 22: 
            { return new Symbol(symCCSS.FALSE, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 23: 
            { return new Symbol(symCCSS.borde, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 24: 
            { return new Symbol(symCCSS.tamTex, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 25: 
            { return new Symbol(symCCSS.opaque, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 26: 
            { return new Symbol(symCCSS.cursiva, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 27: 
            { return new Symbol(symCCSS.visible, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 28: 
            { return new Symbol(symCCSS.formato, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 29: 
            { return new Symbol(symCCSS.negrilla, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 30: 
            { return new Symbol(symCCSS.alineado, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 31: 
            { return new Symbol(symCCSS.vertical, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 32: 
            { return new Symbol(symCCSS.capital, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 33: 
            { return new Symbol(symCCSS.colorText, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 34: 
            { return new Symbol(symCCSS.minuscula, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 35: 
            { return new Symbol(symCCSS.mayuscula, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 36: 
            { return new Symbol(symCCSS.horizontal, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 37: 
            { return new Symbol(symCCSS.fondoElemento, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 38: 
            { return new Symbol(symCCSS.autoredimension, yycolumn, yyline, yytext());
            }
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
